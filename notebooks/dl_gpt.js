{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Analysis for GPT paper\n",
    "\n",
    "This notebook analyses a dataset of Arxiv papers for our paper analysing Deep Learning\n",
    "as a GPT and its general-purpose-technology dimensions\n",
    "\n",
    "**Activities**\n",
    "\n",
    "1. Load the data:\n",
    " * Paper metadata\n",
    " * Paper topic mix\n",
    "2. Descriptive analysis of DL as a GPT\n",
    " * Rapid improvement: Has there been a rapid increase in the number of DL papers?\n",
    "   * This includes papers with some DL activity and papers that 'specialise' in DL activity (the DL topic is the maximum or above 0.5)\n",
    " * Rapid diffusion in other areas: Has there been an adoption of DL in a wide number of areas?\n",
    " * Innovation in other areas: Have the DL papers been influential where they have been adopted (i.e. do they receive more citations than other papers in their category?\n",
    "3. Geographical aspects of the situation\n",
    " * Has there been geographical disruption?\n",
    "  * How does the geography of DL compare with the geography of research in other Comp Sci disciplines?\n",
    "  * Has there been more churn in disciplines with higher levels of DL activity?\n",
    "4. Drivers of the geography of DL\n",
    "  * Path dependence: to which extent are geographical changes driven by long-standing specialisation in the topic? (Canada)\n",
    "  * Policy: China (but no AI policy until recently).\n",
    "  * Complementary assets: Presence of start-ups (based on CrunchBase data?)\n",
    "  * Disruption\n",
    "5. Conclusions\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 0. Preamble"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "#Some imports\n",
    "import matplotlib.patches as mpatches\n",
    "\n",
    "import random\n",
    "\n",
    "#Imports\n",
    "#Key imports are loaded from my profile (see standard_imports.py in src folder).\n",
    "\n",
    "#Paths\n",
    "\n",
    "#Paths\n",
    "top = os.path.dirname(os.getcwd())\n",
    "\n",
    "#External data (to download the GRID database)\n",
    "ext_data = os.path.join(top,'data/external')\n",
    "\n",
    "#Interim data (to place seed etc)\n",
    "int_data = os.path.join(top,'data/interim')\n",
    "\n",
    "#Proc data (to place seed etc)\n",
    "proc_data = os.path.join(top,'data/processed')\n",
    "\n",
    "#Figures\n",
    "fig_path = os.path.join(top,'reports/figures')\n",
    "\n",
    "#Models\n",
    "mod_path = os.path.join(top,'models')\n",
    "\n",
    "\n",
    "#Get date for saving files\n",
    "today = datetime.datetime.today()\n",
    "\n",
    "today_str = \"_\".join([str(x) for x in [today.day,today.month,today.year]])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Basic functions\n",
    "\n",
    "#Flatten list\n",
    "\n",
    "def flatten_list(a_list):\n",
    "    '''\n",
    "    Utility function that takes a list of nested elements and flattens it\n",
    "    \n",
    "    '''\n",
    "    \n",
    "    return([x for el in a_list for x in el])\n",
    "\n",
    "def flatten_freqs(a_list):\n",
    "    '''\n",
    "    Utility function that flattens a list and returns element frequencies\n",
    "    \n",
    "    '''\n",
    "    \n",
    "    #This flattens the list and returns value counts\n",
    "    return(pd.Series(flatten_list(a_list)).value_counts())\n",
    "\n",
    "\n",
    "#Functions\n",
    "def create_lq_df(df,year=None):\n",
    "    '''\n",
    "    Takes a df with cells = activity in col in row and returns a df with cells = lq\n",
    "    \n",
    "    '''\n",
    "    \n",
    "    area_activity = df.sum(axis=0)\n",
    "    area_shares = area_activity/area_activity.sum()\n",
    "    \n",
    "    lqs = df.apply(lambda x: (x/x.sum())/area_shares, axis=1)\n",
    "    \n",
    "    if year!=None:\n",
    "        lqs['period'] = year\n",
    "    \n",
    "    return(lqs)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Load data\n",
    "\n",
    "We have two datasets:\n",
    "\n",
    "1. One includes all CS papers obtained from ArXiv.\n",
    "2. One includes all CS papers with a DOI (need to check what's the exact difference in status between both categories). \n",
    "\n",
    "For now we will focus on number one. We are thinking of number 2 as more of a robustness checks variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(247931, 60)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load the papers\n",
    "\n",
    "papers = pd.read_json(\n",
    "    ext_data+'/corex_matched_noOAG.json',orient='records')\n",
    "\n",
    "papers.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are 247,931 papers. This is total number of CS + Stats papers in Arxiv CS papers (see methodology in paper for a description of the process used for this)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Initial exploration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "131189"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Note that there are many duplicated papers. This seems to be linked to the way they have been geocoded\n",
    "len(set(papers.arxiv_id))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#The only difference between papers I can find is in the latitude and longitude. \n",
    "#TODO: Check with Joel what's going on here.\n",
    "\n",
    "#for column in papers.columns:\n",
    "#    print(column)\n",
    "#    print(papers.loc[0,column])\n",
    "#    print(papers.loc[1,column])\n",
    "#    \n",
    "#    print('\\n')   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TOPIC_algorithm_problem_optimization_optimization problem_solve_solution_solving_approximation_efficient_convergence</th>\n",
       "      <th>TOPIC_approach_based_technique_existing_framework_based approach_approach based_new approach_using_novel approach</th>\n",
       "      <th>TOPIC_architecture_memory_parallel_network architecture_hardware_processor_cpu_computing_gpu_core</th>\n",
       "      <th>TOPIC_bound_upper_upper bound_np_polynomial time_constant_np hard_case_time algorithm_known</th>\n",
       "      <th>TOPIC_channel_interference_transmission_wireless_receiver_rate_antenna_transmitter_mimo_transmit</th>\n",
       "      <th>TOPIC_data_data set_data structure_real data_data analysis_big data_data driven_data point_collected_synthetic data</th>\n",
       "      <th>TOPIC_different_two different_different type_three different_different approach_across different_many different_different level_using different_different way</th>\n",
       "      <th>TOPIC_dimensional_sparse_high dimensional_space_sparsity_low rank_vector_dimension_recovery_sample</th>\n",
       "      <th>TOPIC_et_al_et al_polynomial_give_whether_proof_complete_every_theorem</th>\n",
       "      <th>TOPIC_experiment_experiment show_extensive experiment_high quality_high_result indicate_quality_indicate_extensive_resolution</th>\n",
       "      <th>...</th>\n",
       "      <th>full_title</th>\n",
       "      <th>grid_lat</th>\n",
       "      <th>grid_lon</th>\n",
       "      <th>institutes</th>\n",
       "      <th>journal</th>\n",
       "      <th>language</th>\n",
       "      <th>match_score</th>\n",
       "      <th>match_value</th>\n",
       "      <th>matched</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.428542</td>\n",
       "      <td>0.042882</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.074204</td>\n",
       "      <td>0.052545</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>Sparsity-certifying Graph Decompositions</td>\n",
       "      <td>[42.318119]</td>\n",
       "      <td>[-72.638139]</td>\n",
       "      <td>[smith college, university of massachusetts am...</td>\n",
       "      <td>Graphs and Combinatorics</td>\n",
       "      <td>en</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Smith College</td>\n",
       "      <td>True</td>\n",
       "      <td>sparsity certifying graph decompositions</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.428542</td>\n",
       "      <td>0.042882</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.074204</td>\n",
       "      <td>0.052545</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>Sparsity-certifying Graph Decompositions</td>\n",
       "      <td>[42.389002]</td>\n",
       "      <td>[-72.526712]</td>\n",
       "      <td>[smith college, university of massachusetts am...</td>\n",
       "      <td>Graphs and Combinatorics</td>\n",
       "      <td>en</td>\n",
       "      <td>1.0</td>\n",
       "      <td>University of Massachusetts Amherst</td>\n",
       "      <td>True</td>\n",
       "      <td>sparsity certifying graph decompositions</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.157418</td>\n",
       "      <td>0.042882</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.054565</td>\n",
       "      <td>0.526032</td>\n",
       "      <td>0.524284</td>\n",
       "      <td>0.020608</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>Intelligent location of simultaneously active ...</td>\n",
       "      <td>[46.049268]</td>\n",
       "      <td>[14.505099]</td>\n",
       "      <td>[university of ljubljana]</td>\n",
       "      <td>Aircraft Engineering and Aerospace Technology</td>\n",
       "      <td>en</td>\n",
       "      <td>1.0</td>\n",
       "      <td>University of Ljubljana</td>\n",
       "      <td>True</td>\n",
       "      <td>intelligent location of simultaneously active ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.206328</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>Intelligent location of simultaneously active ...</td>\n",
       "      <td>[46.049268]</td>\n",
       "      <td>[14.505099]</td>\n",
       "      <td>[university of ljubljana]</td>\n",
       "      <td>arXiv preprint arXiv:0704.0050</td>\n",
       "      <td>en</td>\n",
       "      <td>1.0</td>\n",
       "      <td>University of Ljubljana</td>\n",
       "      <td>True</td>\n",
       "      <td>intelligent location of simultaneously active ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.015733</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.034355</td>\n",
       "      <td>0.163856</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.050527</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>Sparsely spread CDMA—a statistical mechanics-b...</td>\n",
       "      <td>[52.486]</td>\n",
       "      <td>[-1.8895]</td>\n",
       "      <td>[aston university, hong kong university of sci...</td>\n",
       "      <td>Journal of Physics A</td>\n",
       "      <td>en</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Aston University</td>\n",
       "      <td>True</td>\n",
       "      <td>sparsely spread cdma a statistical mechanics b...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 60 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   TOPIC_algorithm_problem_optimization_optimization problem_solve_solution_solving_approximation_efficient_convergence  \\\n",
       "0                                           0.428542                                                                      \n",
       "1                                           0.428542                                                                      \n",
       "2                                           0.157418                                                                      \n",
       "3                                           0.206328                                                                      \n",
       "4                                           0.000000                                                                      \n",
       "\n",
       "   TOPIC_approach_based_technique_existing_framework_based approach_approach based_new approach_using_novel approach  \\\n",
       "0                                           0.042882                                                                   \n",
       "1                                           0.042882                                                                   \n",
       "2                                           0.042882                                                                   \n",
       "3                                           0.000000                                                                   \n",
       "4                                           0.015733                                                                   \n",
       "\n",
       "   TOPIC_architecture_memory_parallel_network architecture_hardware_processor_cpu_computing_gpu_core  \\\n",
       "0                                                0.0                                                   \n",
       "1                                                0.0                                                   \n",
       "2                                                0.0                                                   \n",
       "3                                                0.0                                                   \n",
       "4                                                0.0                                                   \n",
       "\n",
       "   TOPIC_bound_upper_upper bound_np_polynomial time_constant_np hard_case_time algorithm_known  \\\n",
       "0                                           0.000000                                             \n",
       "1                                           0.000000                                             \n",
       "2                                           0.000000                                             \n",
       "3                                           0.000000                                             \n",
       "4                                           0.034355                                             \n",
       "\n",
       "   TOPIC_channel_interference_transmission_wireless_receiver_rate_antenna_transmitter_mimo_transmit  \\\n",
       "0                                           0.000000                                                  \n",
       "1                                           0.000000                                                  \n",
       "2                                           0.054565                                                  \n",
       "3                                           0.000000                                                  \n",
       "4                                           0.163856                                                  \n",
       "\n",
       "   TOPIC_data_data set_data structure_real data_data analysis_big data_data driven_data point_collected_synthetic data  \\\n",
       "0                                           0.000000                                                                     \n",
       "1                                           0.000000                                                                     \n",
       "2                                           0.526032                                                                     \n",
       "3                                           0.000000                                                                     \n",
       "4                                           0.000000                                                                     \n",
       "\n",
       "   TOPIC_different_two different_different type_three different_different approach_across different_many different_different level_using different_different way  \\\n",
       "0                                           0.000000                                                                                                               \n",
       "1                                           0.000000                                                                                                               \n",
       "2                                           0.524284                                                                                                               \n",
       "3                                           0.000000                                                                                                               \n",
       "4                                           0.000000                                                                                                               \n",
       "\n",
       "   TOPIC_dimensional_sparse_high dimensional_space_sparsity_low rank_vector_dimension_recovery_sample  \\\n",
       "0                                           0.074204                                                    \n",
       "1                                           0.074204                                                    \n",
       "2                                           0.020608                                                    \n",
       "3                                           0.000000                                                    \n",
       "4                                           0.050527                                                    \n",
       "\n",
       "   TOPIC_et_al_et al_polynomial_give_whether_proof_complete_every_theorem  \\\n",
       "0                                           0.052545                        \n",
       "1                                           0.052545                        \n",
       "2                                           0.000000                        \n",
       "3                                           0.000000                        \n",
       "4                                           0.000000                        \n",
       "\n",
       "   TOPIC_experiment_experiment show_extensive experiment_high quality_high_result indicate_quality_indicate_extensive_resolution  \\\n",
       "0                                                0.0                                                                               \n",
       "1                                                0.0                                                                               \n",
       "2                                                0.0                                                                               \n",
       "3                                                0.0                                                                               \n",
       "4                                                0.0                                                                               \n",
       "\n",
       "                         ...                          \\\n",
       "0                        ...                           \n",
       "1                        ...                           \n",
       "2                        ...                           \n",
       "3                        ...                           \n",
       "4                        ...                           \n",
       "\n",
       "                                          full_title     grid_lat  \\\n",
       "0           Sparsity-certifying Graph Decompositions  [42.318119]   \n",
       "1           Sparsity-certifying Graph Decompositions  [42.389002]   \n",
       "2  Intelligent location of simultaneously active ...  [46.049268]   \n",
       "3  Intelligent location of simultaneously active ...  [46.049268]   \n",
       "4  Sparsely spread CDMA—a statistical mechanics-b...     [52.486]   \n",
       "\n",
       "       grid_lon                                         institutes  \\\n",
       "0  [-72.638139]  [smith college, university of massachusetts am...   \n",
       "1  [-72.526712]  [smith college, university of massachusetts am...   \n",
       "2   [14.505099]                          [university of ljubljana]   \n",
       "3   [14.505099]                          [university of ljubljana]   \n",
       "4     [-1.8895]  [aston university, hong kong university of sci...   \n",
       "\n",
       "                                         journal  language  match_score  \\\n",
       "0                       Graphs and Combinatorics        en          1.0   \n",
       "1                       Graphs and Combinatorics        en          1.0   \n",
       "2  Aircraft Engineering and Aerospace Technology        en          1.0   \n",
       "3                 arXiv preprint arXiv:0704.0050        en          1.0   \n",
       "4                           Journal of Physics A        en          1.0   \n",
       "\n",
       "                           match_value  matched  \\\n",
       "0                        Smith College     True   \n",
       "1  University of Massachusetts Amherst     True   \n",
       "2              University of Ljubljana     True   \n",
       "3              University of Ljubljana     True   \n",
       "4                     Aston University     True   \n",
       "\n",
       "                                               title  \n",
       "0           sparsity certifying graph decompositions  \n",
       "1           sparsity certifying graph decompositions  \n",
       "2  intelligent location of simultaneously active ...  \n",
       "3  intelligent location of simultaneously active ...  \n",
       "4  sparsely spread cdma a statistical mechanics b...  \n",
       "\n",
       "[5 rows x 60 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check the data\n",
    "papers.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We have a big bunch of columns with topics (`TOPIC_...`) and metadata from arxiv\n",
    "\n",
    "Let's check waht the latter are"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "arxiv_categories\n",
      "arxiv_created\n",
      "arxiv_id\n",
      "arxiv_raw_summary\n",
      "arxiv_raw_title\n",
      "arxiv_sources\n",
      "arxiv_summary\n",
      "arxiv_title\n",
      "citations\n",
      "date\n",
      "doi\n",
      "full_title\n",
      "grid_lat\n",
      "grid_lon\n",
      "institutes\n",
      "journal\n",
      "language\n",
      "match_score\n",
      "match_value\n",
      "matched\n",
      "title\n"
     ]
    }
   ],
   "source": [
    "#Check the col\n",
    "for column in papers.columns:\n",
    "    if 'TOPIC' not in column:\n",
    "        print(column)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The data is a timestamp so we parse it, and extract the year"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "papers['date_parsed'] = [datetime.datetime.fromtimestamp(x/1000) for x in papers['date']]\n",
    "\n",
    "papers['year'] = papers['date_parsed'].apply(lambda x: x.year)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Some initial checks"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Categories"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    247931.000000\n",
       "mean          1.916081\n",
       "std           0.985798\n",
       "min           1.000000\n",
       "25%           1.000000\n",
       "50%           2.000000\n",
       "75%           2.000000\n",
       "max          13.000000\n",
       "Name: arxiv_categories, dtype: float64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#How many categories are there by paper?\n",
    "papers.arxiv_categories.apply(lambda x: len(x)).describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "cs.IT      38485\n",
       "math.IT    38485\n",
       "cs.LG      28394\n",
       "cs.CV      24895\n",
       "stat.ML    20875\n",
       "cs.AI      20481\n",
       "cs.DS      19184\n",
       "cs.CL      16472\n",
       "cs.NI      15488\n",
       "cs.LO      12108\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flatten_freqs(papers.arxiv_categories).head(n=10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Strong presence of mathematics papers here - even though we are getting the CS papers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Language"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x117d13588>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "papers.language.value_counts().head(n=10).plot.bar(color='blue')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Not all papers are in English? What does this meaan?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "355    On Profit-Maximizing Pricing for the Highway a...\n",
       "356    On Profit-Maximizing Pricing for the Highway a...\n",
       "771    Towards History-based Grammars: Using Richer M...\n",
       "783    Determination of referential property and numb...\n",
       "832    DECISION LISTS FOR LEXICAL AMBIGUITY RESOLUTIO...\n",
       "Name: full_title, dtype: object"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "papers.loc[papers['language']=='en@@@ja','full_title'].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "They are in English"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Processing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We want to make the data easier to work with.\n",
    "\n",
    "We will create a df with the topics and an index with the `arxiv_id` and another with other variables we are interested in.\n",
    "\n",
    "Before doing that we need to deduplicate the papers. The analysis we are doing right now focuses on the diffusion of ML in other topics, for which we don't need individual institution information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(131189, 62)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#papers_un means papers unique\n",
    "papers_un = papers.drop_duplicates('arxiv_id')\n",
    "\n",
    "papers_un.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TOPIC_algorithm_problem_optimization_optimization problem_solve_solution_solving_approximation_efficient_convergence</th>\n",
       "      <th>TOPIC_approach_based_technique_existing_framework_based approach_approach based_new approach_using_novel approach</th>\n",
       "      <th>TOPIC_architecture_memory_parallel_network architecture_hardware_processor_cpu_computing_gpu_core</th>\n",
       "      <th>TOPIC_bound_upper_upper bound_np_polynomial time_constant_np hard_case_time algorithm_known</th>\n",
       "      <th>TOPIC_channel_interference_transmission_wireless_receiver_rate_antenna_transmitter_mimo_transmit</th>\n",
       "      <th>TOPIC_data_data set_data structure_real data_data analysis_big data_data driven_data point_collected_synthetic data</th>\n",
       "      <th>TOPIC_different_two different_different type_three different_different approach_across different_many different_different level_using different_different way</th>\n",
       "      <th>TOPIC_dimensional_sparse_high dimensional_space_sparsity_low rank_vector_dimension_recovery_sample</th>\n",
       "      <th>TOPIC_et_al_et al_polynomial_give_whether_proof_complete_every_theorem</th>\n",
       "      <th>TOPIC_experiment_experiment show_extensive experiment_high quality_high_result indicate_quality_indicate_extensive_resolution</th>\n",
       "      <th>...</th>\n",
       "      <th>TOPIC_prove_class_game_general_player_also_hold_existence_theoretic_exists</th>\n",
       "      <th>TOPIC_real_real world_world_widely_widely used_wide_wide range_application_synthetic_commonly used</th>\n",
       "      <th>TOPIC_research_year_ha_recent_human_community_attention_recent year_challenge_become</th>\n",
       "      <th>TOPIC_service_security_mobile_device_traffic_technology_resource_attack_internet_management</th>\n",
       "      <th>TOPIC_simulation_system_simulation result_control_energy_design_controller_simulation result show_sensor_efficiency</th>\n",
       "      <th>TOPIC_social_social network_role_play_robot_dynamic_interaction_decision making_decision_autonomous</th>\n",
       "      <th>TOPIC_software_development_implementation_tool_program_open source_interface_science_programming_execution</th>\n",
       "      <th>TOPIC_state art_art_state_deep_convolutional_convolutional neural_convolutional neural network_deep learning_datasets_deep neural</th>\n",
       "      <th>TOPIC_user_account_insight_impact_analysis_provide_study_focus_issue_take account</th>\n",
       "      <th>TOPIC_web_future_social medium_medium_project_business_twitter_organization_review_content</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>arxiv_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>oai:arXiv.org:0704.0002</th>\n",
       "      <td>0.428542</td>\n",
       "      <td>0.042882</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.074204</td>\n",
       "      <td>0.052545</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.058000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.135712</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>oai:arXiv.org:0704.0047</th>\n",
       "      <td>0.157418</td>\n",
       "      <td>0.042882</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.054565</td>\n",
       "      <td>0.526032</td>\n",
       "      <td>0.524284</td>\n",
       "      <td>0.020608</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.028615</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.016941</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.022756</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>oai:arXiv.org:0704.0050</th>\n",
       "      <td>0.206328</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.049272</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.022756</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>oai:arXiv.org:0704.0098</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.015733</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.034355</td>\n",
       "      <td>0.163856</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.050527</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.079938</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.022756</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>oai:arXiv.org:0704.0217</th>\n",
       "      <td>0.026281</td>\n",
       "      <td>0.015733</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.032564</td>\n",
       "      <td>0.472709</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.021966</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.020230</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.095396</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 39 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                         TOPIC_algorithm_problem_optimization_optimization problem_solve_solution_solving_approximation_efficient_convergence  \\\n",
       "arxiv_id                                                                                                                                        \n",
       "oai:arXiv.org:0704.0002                                           0.428542                                                                      \n",
       "oai:arXiv.org:0704.0047                                           0.157418                                                                      \n",
       "oai:arXiv.org:0704.0050                                           0.206328                                                                      \n",
       "oai:arXiv.org:0704.0098                                           0.000000                                                                      \n",
       "oai:arXiv.org:0704.0217                                           0.026281                                                                      \n",
       "\n",
       "                         TOPIC_approach_based_technique_existing_framework_based approach_approach based_new approach_using_novel approach  \\\n",
       "arxiv_id                                                                                                                                     \n",
       "oai:arXiv.org:0704.0002                                           0.042882                                                                   \n",
       "oai:arXiv.org:0704.0047                                           0.042882                                                                   \n",
       "oai:arXiv.org:0704.0050                                           0.000000                                                                   \n",
       "oai:arXiv.org:0704.0098                                           0.015733                                                                   \n",
       "oai:arXiv.org:0704.0217                                           0.015733                                                                   \n",
       "\n",
       "                         TOPIC_architecture_memory_parallel_network architecture_hardware_processor_cpu_computing_gpu_core  \\\n",
       "arxiv_id                                                                                                                     \n",
       "oai:arXiv.org:0704.0002                                                0.0                                                   \n",
       "oai:arXiv.org:0704.0047                                                0.0                                                   \n",
       "oai:arXiv.org:0704.0050                                                0.0                                                   \n",
       "oai:arXiv.org:0704.0098                                                0.0                                                   \n",
       "oai:arXiv.org:0704.0217                                                0.0                                                   \n",
       "\n",
       "                         TOPIC_bound_upper_upper bound_np_polynomial time_constant_np hard_case_time algorithm_known  \\\n",
       "arxiv_id                                                                                                               \n",
       "oai:arXiv.org:0704.0002                                           0.000000                                             \n",
       "oai:arXiv.org:0704.0047                                           0.000000                                             \n",
       "oai:arXiv.org:0704.0050                                           0.000000                                             \n",
       "oai:arXiv.org:0704.0098                                           0.034355                                             \n",
       "oai:arXiv.org:0704.0217                                           0.032564                                             \n",
       "\n",
       "                         TOPIC_channel_interference_transmission_wireless_receiver_rate_antenna_transmitter_mimo_transmit  \\\n",
       "arxiv_id                                                                                                                    \n",
       "oai:arXiv.org:0704.0002                                           0.000000                                                  \n",
       "oai:arXiv.org:0704.0047                                           0.054565                                                  \n",
       "oai:arXiv.org:0704.0050                                           0.000000                                                  \n",
       "oai:arXiv.org:0704.0098                                           0.163856                                                  \n",
       "oai:arXiv.org:0704.0217                                           0.472709                                                  \n",
       "\n",
       "                         TOPIC_data_data set_data structure_real data_data analysis_big data_data driven_data point_collected_synthetic data  \\\n",
       "arxiv_id                                                                                                                                       \n",
       "oai:arXiv.org:0704.0002                                           0.000000                                                                     \n",
       "oai:arXiv.org:0704.0047                                           0.526032                                                                     \n",
       "oai:arXiv.org:0704.0050                                           0.000000                                                                     \n",
       "oai:arXiv.org:0704.0098                                           0.000000                                                                     \n",
       "oai:arXiv.org:0704.0217                                           0.000000                                                                     \n",
       "\n",
       "                         TOPIC_different_two different_different type_three different_different approach_across different_many different_different level_using different_different way  \\\n",
       "arxiv_id                                                                                                                                                                                 \n",
       "oai:arXiv.org:0704.0002                                           0.000000                                                                                                               \n",
       "oai:arXiv.org:0704.0047                                           0.524284                                                                                                               \n",
       "oai:arXiv.org:0704.0050                                           0.000000                                                                                                               \n",
       "oai:arXiv.org:0704.0098                                           0.000000                                                                                                               \n",
       "oai:arXiv.org:0704.0217                                           0.000000                                                                                                               \n",
       "\n",
       "                         TOPIC_dimensional_sparse_high dimensional_space_sparsity_low rank_vector_dimension_recovery_sample  \\\n",
       "arxiv_id                                                                                                                      \n",
       "oai:arXiv.org:0704.0002                                           0.074204                                                    \n",
       "oai:arXiv.org:0704.0047                                           0.020608                                                    \n",
       "oai:arXiv.org:0704.0050                                           0.000000                                                    \n",
       "oai:arXiv.org:0704.0098                                           0.050527                                                    \n",
       "oai:arXiv.org:0704.0217                                           0.021966                                                    \n",
       "\n",
       "                         TOPIC_et_al_et al_polynomial_give_whether_proof_complete_every_theorem  \\\n",
       "arxiv_id                                                                                          \n",
       "oai:arXiv.org:0704.0002                                           0.052545                        \n",
       "oai:arXiv.org:0704.0047                                           0.000000                        \n",
       "oai:arXiv.org:0704.0050                                           0.000000                        \n",
       "oai:arXiv.org:0704.0098                                           0.000000                        \n",
       "oai:arXiv.org:0704.0217                                           0.000000                        \n",
       "\n",
       "                         TOPIC_experiment_experiment show_extensive experiment_high quality_high_result indicate_quality_indicate_extensive_resolution  \\\n",
       "arxiv_id                                                                                                                                                 \n",
       "oai:arXiv.org:0704.0002                                                0.0                                                                               \n",
       "oai:arXiv.org:0704.0047                                                0.0                                                                               \n",
       "oai:arXiv.org:0704.0050                                                0.0                                                                               \n",
       "oai:arXiv.org:0704.0098                                                0.0                                                                               \n",
       "oai:arXiv.org:0704.0217                                                0.0                                                                               \n",
       "\n",
       "                                                                    ...                                              \\\n",
       "arxiv_id                                                            ...                                               \n",
       "oai:arXiv.org:0704.0002                                             ...                                               \n",
       "oai:arXiv.org:0704.0047                                             ...                                               \n",
       "oai:arXiv.org:0704.0050                                             ...                                               \n",
       "oai:arXiv.org:0704.0098                                             ...                                               \n",
       "oai:arXiv.org:0704.0217                                             ...                                               \n",
       "\n",
       "                         TOPIC_prove_class_game_general_player_also_hold_existence_theoretic_exists  \\\n",
       "arxiv_id                                                                                              \n",
       "oai:arXiv.org:0704.0002                                           0.058000                            \n",
       "oai:arXiv.org:0704.0047                                           0.028615                            \n",
       "oai:arXiv.org:0704.0050                                           0.000000                            \n",
       "oai:arXiv.org:0704.0098                                           0.000000                            \n",
       "oai:arXiv.org:0704.0217                                           0.020230                            \n",
       "\n",
       "                         TOPIC_real_real world_world_widely_widely used_wide_wide range_application_synthetic_commonly used  \\\n",
       "arxiv_id                                                                                                                      \n",
       "oai:arXiv.org:0704.0002                                                0.0                                                    \n",
       "oai:arXiv.org:0704.0047                                                0.0                                                    \n",
       "oai:arXiv.org:0704.0050                                                0.0                                                    \n",
       "oai:arXiv.org:0704.0098                                                0.0                                                    \n",
       "oai:arXiv.org:0704.0217                                                0.0                                                    \n",
       "\n",
       "                         TOPIC_research_year_ha_recent_human_community_attention_recent year_challenge_become  \\\n",
       "arxiv_id                                                                                                        \n",
       "oai:arXiv.org:0704.0002                                           0.135712                                      \n",
       "oai:arXiv.org:0704.0047                                           0.000000                                      \n",
       "oai:arXiv.org:0704.0050                                           0.049272                                      \n",
       "oai:arXiv.org:0704.0098                                           0.000000                                      \n",
       "oai:arXiv.org:0704.0217                                           0.000000                                      \n",
       "\n",
       "                         TOPIC_service_security_mobile_device_traffic_technology_resource_attack_internet_management  \\\n",
       "arxiv_id                                                                                                               \n",
       "oai:arXiv.org:0704.0002                                                0.0                                             \n",
       "oai:arXiv.org:0704.0047                                                0.0                                             \n",
       "oai:arXiv.org:0704.0050                                                0.0                                             \n",
       "oai:arXiv.org:0704.0098                                                0.0                                             \n",
       "oai:arXiv.org:0704.0217                                                0.0                                             \n",
       "\n",
       "                         TOPIC_simulation_system_simulation result_control_energy_design_controller_simulation result show_sensor_efficiency  \\\n",
       "arxiv_id                                                                                                                                       \n",
       "oai:arXiv.org:0704.0002                                           0.000000                                                                     \n",
       "oai:arXiv.org:0704.0047                                           0.016941                                                                     \n",
       "oai:arXiv.org:0704.0050                                           0.000000                                                                     \n",
       "oai:arXiv.org:0704.0098                                           0.079938                                                                     \n",
       "oai:arXiv.org:0704.0217                                           0.095396                                                                     \n",
       "\n",
       "                         TOPIC_social_social network_role_play_robot_dynamic_interaction_decision making_decision_autonomous  \\\n",
       "arxiv_id                                                                                                                       \n",
       "oai:arXiv.org:0704.0002                                                0.0                                                     \n",
       "oai:arXiv.org:0704.0047                                                0.0                                                     \n",
       "oai:arXiv.org:0704.0050                                                0.0                                                     \n",
       "oai:arXiv.org:0704.0098                                                0.0                                                     \n",
       "oai:arXiv.org:0704.0217                                                0.0                                                     \n",
       "\n",
       "                         TOPIC_software_development_implementation_tool_program_open source_interface_science_programming_execution  \\\n",
       "arxiv_id                                                                                                                              \n",
       "oai:arXiv.org:0704.0002                                                0.0                                                            \n",
       "oai:arXiv.org:0704.0047                                                0.0                                                            \n",
       "oai:arXiv.org:0704.0050                                                0.0                                                            \n",
       "oai:arXiv.org:0704.0098                                                0.0                                                            \n",
       "oai:arXiv.org:0704.0217                                                0.0                                                            \n",
       "\n",
       "                         TOPIC_state art_art_state_deep_convolutional_convolutional neural_convolutional neural network_deep learning_datasets_deep neural  \\\n",
       "arxiv_id                                                                                                                                                     \n",
       "oai:arXiv.org:0704.0002                                                0.0                                                                                   \n",
       "oai:arXiv.org:0704.0047                                                0.0                                                                                   \n",
       "oai:arXiv.org:0704.0050                                                0.0                                                                                   \n",
       "oai:arXiv.org:0704.0098                                                0.0                                                                                   \n",
       "oai:arXiv.org:0704.0217                                                0.0                                                                                   \n",
       "\n",
       "                         TOPIC_user_account_insight_impact_analysis_provide_study_focus_issue_take account  \\\n",
       "arxiv_id                                                                                                     \n",
       "oai:arXiv.org:0704.0002                                           0.000000                                   \n",
       "oai:arXiv.org:0704.0047                                           0.022756                                   \n",
       "oai:arXiv.org:0704.0050                                           0.022756                                   \n",
       "oai:arXiv.org:0704.0098                                           0.022756                                   \n",
       "oai:arXiv.org:0704.0217                                           0.000000                                   \n",
       "\n",
       "                         TOPIC_web_future_social medium_medium_project_business_twitter_organization_review_content  \n",
       "arxiv_id                                                                                                             \n",
       "oai:arXiv.org:0704.0002                                                0.0                                           \n",
       "oai:arXiv.org:0704.0047                                                0.0                                           \n",
       "oai:arXiv.org:0704.0050                                                0.0                                           \n",
       "oai:arXiv.org:0704.0098                                                0.0                                           \n",
       "oai:arXiv.org:0704.0217                                                0.0                                           \n",
       "\n",
       "[5 rows x 39 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Create a topic df only including those variables referring to a topic\n",
    "topics = papers_un.set_index('arxiv_id')[[x for x in papers_un.columns if 'TOPIC' in x]]\n",
    "\n",
    "topics.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 TOPIC_algorithm_problem_optimization_optimization problem_solve_solution_solving_approximation_efficient_convergence\n",
      "1 TOPIC_approach_based_technique_existing_framework_based approach_approach based_new approach_using_novel approach\n",
      "2 TOPIC_architecture_memory_parallel_network architecture_hardware_processor_cpu_computing_gpu_core\n",
      "3 TOPIC_bound_upper_upper bound_np_polynomial time_constant_np hard_case_time algorithm_known\n",
      "4 TOPIC_channel_interference_transmission_wireless_receiver_rate_antenna_transmitter_mimo_transmit\n",
      "5 TOPIC_data_data set_data structure_real data_data analysis_big data_data driven_data point_collected_synthetic data\n",
      "6 TOPIC_different_two different_different type_three different_different approach_across different_many different_different level_using different_different way\n",
      "7 TOPIC_dimensional_sparse_high dimensional_space_sparsity_low rank_vector_dimension_recovery_sample\n",
      "8 TOPIC_et_al_et al_polynomial_give_whether_proof_complete_every_theorem\n",
      "9 TOPIC_experiment_experiment show_extensive experiment_high quality_high_result indicate_quality_indicate_extensive_resolution\n",
      "10 TOPIC_first_one_question_second_even_answer_main_two_contribution_may\n",
      "11 TOPIC_graph_vertex_edge_undirected_directed_subgraph_shortest path_path_graph vertex_connected\n",
      "12 TOPIC_image_recognition_feature_task_dataset_visual_text_segmentation_vision_semantic\n",
      "13 TOPIC_learning_neural_neural network_training_machine learning_classification_trained_machine_learn_learning algorithm\n",
      "14 TOPIC_linear_matrix_function_complexity_computational complexity_input_computational_non_linear time_non linear\n",
      "15 TOPIC_logic_quantum_semantics_automaton_calculus_theory_notion_formula_checking_reasoning\n",
      "16 TOPIC_lower bound_code_lower_log_decoding_coding_length_omega_frac_log log\n",
      "17 TOPIC_method_experimental_experimental result_method based_experimental result show_based method_new method_existing method_show method_method used\n",
      "18 TOPIC_model_prediction_model based_proposed model_modeling_based model_predictive_model used_predict_graphical model\n",
      "19 TOPIC_monte_carlo_monte carlo_random_degree_degree freedom_mutual information_freedom_message passing_mutual\n",
      "20 TOPIC_network_significant_layer_however_long_amount_end end_end_improvement_due\n",
      "21 TOPIC_node_communication_distributed_protocol_packet_allocation_link_routing_sensor network_topology\n",
      "22 TOPIC_numerical_probability_distribution_condition_numerical result_closed form_equation_markov_stochastic_sufficient condition\n",
      "23 TOPIC_optimal_convex_square_optimal solution_convex optimization_least square_non convex_sum_mean square_near optimal\n",
      "24 TOPIC_performance_significantly_compared_estimation_better_result show_show_achieves_result_outperforms\n",
      "25 TOPIC_present_paper present_present new_present novel_also present_work present_present algorithm_present two_paper present novel_paper present new\n",
      "26 TOPIC_propose_paper propose_large scale_scale_address_propose novel_propose new_large_demonstrate_effectiveness\n",
      "27 TOPIC_proposed_proposed method_proposed algorithm_show proposed_proposed approach_performance proposed_effectiveness proposed_proposed scheme_algorithm proposed_result show proposed\n",
      "28 TOPIC_proposes_information_paper proposes_key_iii_ii_stage_two stage_secondly_firstly\n",
      "29 TOPIC_prove_class_game_general_player_also_hold_existence_theoretic_exists\n",
      "30 TOPIC_real_real world_world_widely_widely used_wide_wide range_application_synthetic_commonly used\n",
      "31 TOPIC_research_year_ha_recent_human_community_attention_recent year_challenge_become\n",
      "32 TOPIC_service_security_mobile_device_traffic_technology_resource_attack_internet_management\n",
      "33 TOPIC_simulation_system_simulation result_control_energy_design_controller_simulation result show_sensor_efficiency\n",
      "34 TOPIC_social_social network_role_play_robot_dynamic_interaction_decision making_decision_autonomous\n",
      "35 TOPIC_software_development_implementation_tool_program_open source_interface_science_programming_execution\n",
      "36 TOPIC_state art_art_state_deep_convolutional_convolutional neural_convolutional neural network_deep learning_datasets_deep neural\n",
      "37 TOPIC_user_account_insight_impact_analysis_provide_study_focus_issue_take account\n",
      "38 TOPIC_web_future_social medium_medium_project_business_twitter_organization_review_content\n"
     ]
    }
   ],
   "source": [
    "#These are the topics. The neural network topic are 13 and 36. Seems to be picking up more generic machine learning stuff.\n",
    "for num,x in enumerate(topics.columns):\n",
    "    print(str(num)+' '+x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The DL topics are 13 and 36\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['TOPIC_learning_neural_neural network_training_machine learning_classification_trained_machine_learn_learning algorithm', 'TOPIC_state art_art_state_deep_convolutional_convolutional neural_convolutional neural network_deep learning_datasets_deep neural'], dtype='object')"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "topics.columns[[13,36]]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Question to consider**\n",
    "\n",
    "* Does it make a lot of sense to consider the coefficient for a topic in Corex as a 'weight'? \n",
    "* How useful is it to distinguish between 'specialist' and 'embedded' DL papers given that many other topics don't appear to be particularly tight?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>arxiv_categories</th>\n",
       "      <th>arxiv_created</th>\n",
       "      <th>arxiv_raw_summary</th>\n",
       "      <th>arxiv_raw_title</th>\n",
       "      <th>arxiv_sources</th>\n",
       "      <th>arxiv_summary</th>\n",
       "      <th>arxiv_title</th>\n",
       "      <th>citations</th>\n",
       "      <th>date</th>\n",
       "      <th>doi</th>\n",
       "      <th>...</th>\n",
       "      <th>grid_lon</th>\n",
       "      <th>institutes</th>\n",
       "      <th>journal</th>\n",
       "      <th>language</th>\n",
       "      <th>match_score</th>\n",
       "      <th>match_value</th>\n",
       "      <th>matched</th>\n",
       "      <th>title</th>\n",
       "      <th>date_parsed</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>arxiv_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>oai:arXiv.org:0704.0002</th>\n",
       "      <td>[math.CO, cs.CG]</td>\n",
       "      <td>1175212800000</td>\n",
       "      <td>We describe a new algorithm, the $(k,\\ell)$-pe...</td>\n",
       "      <td>Sparsity-certifying Graph Decompositions</td>\n",
       "      <td>[https://arxiv.org/abs/0704.0002]</td>\n",
       "      <td>[describe, new, algorithm, k, ell, pebble, gam...</td>\n",
       "      <td>[sparsity, certifying, graph, decomposition]</td>\n",
       "      <td>17</td>\n",
       "      <td>1241136000000</td>\n",
       "      <td>10.1007/s00373-008-0834-4</td>\n",
       "      <td>...</td>\n",
       "      <td>[-72.638139]</td>\n",
       "      <td>[smith college, university of massachusetts am...</td>\n",
       "      <td>Graphs and Combinatorics</td>\n",
       "      <td>en</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Smith College</td>\n",
       "      <td>True</td>\n",
       "      <td>sparsity certifying graph decompositions</td>\n",
       "      <td>2009-05-01 01:00:00</td>\n",
       "      <td>2009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>oai:arXiv.org:0704.0047</th>\n",
       "      <td>[cs.NE, cs.AI]</td>\n",
       "      <td>1175385600000</td>\n",
       "      <td>The intelligent acoustic emission locator is d...</td>\n",
       "      <td>Intelligent location of simultaneously active ...</td>\n",
       "      <td>[https://arxiv.org/abs/0704.0047]</td>\n",
       "      <td>[intelligent, acoustic, emission, locator, des...</td>\n",
       "      <td>[intelligent, location, simultaneously, active...</td>\n",
       "      <td>8</td>\n",
       "      <td>1044057600000</td>\n",
       "      <td>10.1108/00022660310457248</td>\n",
       "      <td>...</td>\n",
       "      <td>[14.505099]</td>\n",
       "      <td>[university of ljubljana]</td>\n",
       "      <td>Aircraft Engineering and Aerospace Technology</td>\n",
       "      <td>en</td>\n",
       "      <td>1.0</td>\n",
       "      <td>University of Ljubljana</td>\n",
       "      <td>True</td>\n",
       "      <td>intelligent location of simultaneously active ...</td>\n",
       "      <td>2003-02-01 00:00:00</td>\n",
       "      <td>2003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>oai:arXiv.org:0704.0050</th>\n",
       "      <td>[cs.NE, cs.AI]</td>\n",
       "      <td>1175385600000</td>\n",
       "      <td>Part I describes an intelligent acoustic emiss...</td>\n",
       "      <td>Intelligent location of simultaneously active ...</td>\n",
       "      <td>[]</td>\n",
       "      <td>[part, describes, intelligent, acoustic, emiss...</td>\n",
       "      <td>[intelligent, location, simultaneously, active...</td>\n",
       "      <td>0</td>\n",
       "      <td>1167609600000</td>\n",
       "      <td>None</td>\n",
       "      <td>...</td>\n",
       "      <td>[14.505099]</td>\n",
       "      <td>[university of ljubljana]</td>\n",
       "      <td>arXiv preprint arXiv:0704.0050</td>\n",
       "      <td>en</td>\n",
       "      <td>1.0</td>\n",
       "      <td>University of Ljubljana</td>\n",
       "      <td>True</td>\n",
       "      <td>intelligent location of simultaneously active ...</td>\n",
       "      <td>2007-01-01 00:00:00</td>\n",
       "      <td>2007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>oai:arXiv.org:0704.0098</th>\n",
       "      <td>[cs.IT, math.IT]</td>\n",
       "      <td>1175385600000</td>\n",
       "      <td>Sparse Code Division Multiple Access (CDMA), a...</td>\n",
       "      <td>Sparsely-spread CDMA - a statistical mechanics...</td>\n",
       "      <td>[https://arxiv.org/abs/0704.0098]</td>\n",
       "      <td>[sparse, code, division, multiple, access, cdm...</td>\n",
       "      <td>[sparsely, spread, cdma, statistical, mechanic...</td>\n",
       "      <td>24</td>\n",
       "      <td>1192147200000</td>\n",
       "      <td>10.1088/1751-8113/40/41/004</td>\n",
       "      <td>...</td>\n",
       "      <td>[-1.8895]</td>\n",
       "      <td>[aston university, hong kong university of sci...</td>\n",
       "      <td>Journal of Physics A</td>\n",
       "      <td>en</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Aston University</td>\n",
       "      <td>True</td>\n",
       "      <td>sparsely spread cdma a statistical mechanics b...</td>\n",
       "      <td>2007-10-12 01:00:00</td>\n",
       "      <td>2007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>oai:arXiv.org:0704.0217</th>\n",
       "      <td>[cs.IT, math.IT]</td>\n",
       "      <td>1175472000000</td>\n",
       "      <td>Given a multiple-input multiple-output (MIMO) ...</td>\n",
       "      <td>Capacity of a Multiple-Antenna Fading Channel ...</td>\n",
       "      <td>[https://arxiv.org/abs/0704.0217?context=cs]</td>\n",
       "      <td>[given, multiple, input, multiple, output, mim...</td>\n",
       "      <td>[capacity, multiple, antenna, fading, channel,...</td>\n",
       "      <td>154</td>\n",
       "      <td>1235865600000</td>\n",
       "      <td>10.1109/TIT.2008.2011437</td>\n",
       "      <td>...</td>\n",
       "      <td>[-87.673945, None]</td>\n",
       "      <td>[northwestern university]</td>\n",
       "      <td>IEEE Transactions on Information Theory</td>\n",
       "      <td>en</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Northwestern University</td>\n",
       "      <td>True</td>\n",
       "      <td>capacity of a multiple antenna fading channel ...</td>\n",
       "      <td>2009-03-01 00:00:00</td>\n",
       "      <td>2009</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                         arxiv_categories  arxiv_created  \\\n",
       "arxiv_id                                                   \n",
       "oai:arXiv.org:0704.0002  [math.CO, cs.CG]  1175212800000   \n",
       "oai:arXiv.org:0704.0047    [cs.NE, cs.AI]  1175385600000   \n",
       "oai:arXiv.org:0704.0050    [cs.NE, cs.AI]  1175385600000   \n",
       "oai:arXiv.org:0704.0098  [cs.IT, math.IT]  1175385600000   \n",
       "oai:arXiv.org:0704.0217  [cs.IT, math.IT]  1175472000000   \n",
       "\n",
       "                                                         arxiv_raw_summary  \\\n",
       "arxiv_id                                                                     \n",
       "oai:arXiv.org:0704.0002  We describe a new algorithm, the $(k,\\ell)$-pe...   \n",
       "oai:arXiv.org:0704.0047  The intelligent acoustic emission locator is d...   \n",
       "oai:arXiv.org:0704.0050  Part I describes an intelligent acoustic emiss...   \n",
       "oai:arXiv.org:0704.0098  Sparse Code Division Multiple Access (CDMA), a...   \n",
       "oai:arXiv.org:0704.0217  Given a multiple-input multiple-output (MIMO) ...   \n",
       "\n",
       "                                                           arxiv_raw_title  \\\n",
       "arxiv_id                                                                     \n",
       "oai:arXiv.org:0704.0002           Sparsity-certifying Graph Decompositions   \n",
       "oai:arXiv.org:0704.0047  Intelligent location of simultaneously active ...   \n",
       "oai:arXiv.org:0704.0050  Intelligent location of simultaneously active ...   \n",
       "oai:arXiv.org:0704.0098  Sparsely-spread CDMA - a statistical mechanics...   \n",
       "oai:arXiv.org:0704.0217  Capacity of a Multiple-Antenna Fading Channel ...   \n",
       "\n",
       "                                                        arxiv_sources  \\\n",
       "arxiv_id                                                                \n",
       "oai:arXiv.org:0704.0002             [https://arxiv.org/abs/0704.0002]   \n",
       "oai:arXiv.org:0704.0047             [https://arxiv.org/abs/0704.0047]   \n",
       "oai:arXiv.org:0704.0050                                            []   \n",
       "oai:arXiv.org:0704.0098             [https://arxiv.org/abs/0704.0098]   \n",
       "oai:arXiv.org:0704.0217  [https://arxiv.org/abs/0704.0217?context=cs]   \n",
       "\n",
       "                                                             arxiv_summary  \\\n",
       "arxiv_id                                                                     \n",
       "oai:arXiv.org:0704.0002  [describe, new, algorithm, k, ell, pebble, gam...   \n",
       "oai:arXiv.org:0704.0047  [intelligent, acoustic, emission, locator, des...   \n",
       "oai:arXiv.org:0704.0050  [part, describes, intelligent, acoustic, emiss...   \n",
       "oai:arXiv.org:0704.0098  [sparse, code, division, multiple, access, cdm...   \n",
       "oai:arXiv.org:0704.0217  [given, multiple, input, multiple, output, mim...   \n",
       "\n",
       "                                                               arxiv_title  \\\n",
       "arxiv_id                                                                     \n",
       "oai:arXiv.org:0704.0002       [sparsity, certifying, graph, decomposition]   \n",
       "oai:arXiv.org:0704.0047  [intelligent, location, simultaneously, active...   \n",
       "oai:arXiv.org:0704.0050  [intelligent, location, simultaneously, active...   \n",
       "oai:arXiv.org:0704.0098  [sparsely, spread, cdma, statistical, mechanic...   \n",
       "oai:arXiv.org:0704.0217  [capacity, multiple, antenna, fading, channel,...   \n",
       "\n",
       "                         citations           date  \\\n",
       "arxiv_id                                            \n",
       "oai:arXiv.org:0704.0002         17  1241136000000   \n",
       "oai:arXiv.org:0704.0047          8  1044057600000   \n",
       "oai:arXiv.org:0704.0050          0  1167609600000   \n",
       "oai:arXiv.org:0704.0098         24  1192147200000   \n",
       "oai:arXiv.org:0704.0217        154  1235865600000   \n",
       "\n",
       "                                                 doi  ...   \\\n",
       "arxiv_id                                              ...    \n",
       "oai:arXiv.org:0704.0002    10.1007/s00373-008-0834-4  ...    \n",
       "oai:arXiv.org:0704.0047    10.1108/00022660310457248  ...    \n",
       "oai:arXiv.org:0704.0050                         None  ...    \n",
       "oai:arXiv.org:0704.0098  10.1088/1751-8113/40/41/004  ...    \n",
       "oai:arXiv.org:0704.0217     10.1109/TIT.2008.2011437  ...    \n",
       "\n",
       "                                   grid_lon  \\\n",
       "arxiv_id                                      \n",
       "oai:arXiv.org:0704.0002        [-72.638139]   \n",
       "oai:arXiv.org:0704.0047         [14.505099]   \n",
       "oai:arXiv.org:0704.0050         [14.505099]   \n",
       "oai:arXiv.org:0704.0098           [-1.8895]   \n",
       "oai:arXiv.org:0704.0217  [-87.673945, None]   \n",
       "\n",
       "                                                                institutes  \\\n",
       "arxiv_id                                                                     \n",
       "oai:arXiv.org:0704.0002  [smith college, university of massachusetts am...   \n",
       "oai:arXiv.org:0704.0047                          [university of ljubljana]   \n",
       "oai:arXiv.org:0704.0050                          [university of ljubljana]   \n",
       "oai:arXiv.org:0704.0098  [aston university, hong kong university of sci...   \n",
       "oai:arXiv.org:0704.0217                          [northwestern university]   \n",
       "\n",
       "                                                               journal  \\\n",
       "arxiv_id                                                                 \n",
       "oai:arXiv.org:0704.0002                       Graphs and Combinatorics   \n",
       "oai:arXiv.org:0704.0047  Aircraft Engineering and Aerospace Technology   \n",
       "oai:arXiv.org:0704.0050                 arXiv preprint arXiv:0704.0050   \n",
       "oai:arXiv.org:0704.0098                           Journal of Physics A   \n",
       "oai:arXiv.org:0704.0217        IEEE Transactions on Information Theory   \n",
       "\n",
       "                        language match_score              match_value  \\\n",
       "arxiv_id                                                                \n",
       "oai:arXiv.org:0704.0002       en         1.0            Smith College   \n",
       "oai:arXiv.org:0704.0047       en         1.0  University of Ljubljana   \n",
       "oai:arXiv.org:0704.0050       en         1.0  University of Ljubljana   \n",
       "oai:arXiv.org:0704.0098       en         1.0         Aston University   \n",
       "oai:arXiv.org:0704.0217       en         1.0  Northwestern University   \n",
       "\n",
       "                         matched  \\\n",
       "arxiv_id                           \n",
       "oai:arXiv.org:0704.0002     True   \n",
       "oai:arXiv.org:0704.0047     True   \n",
       "oai:arXiv.org:0704.0050     True   \n",
       "oai:arXiv.org:0704.0098     True   \n",
       "oai:arXiv.org:0704.0217     True   \n",
       "\n",
       "                                                                     title  \\\n",
       "arxiv_id                                                                     \n",
       "oai:arXiv.org:0704.0002           sparsity certifying graph decompositions   \n",
       "oai:arXiv.org:0704.0047  intelligent location of simultaneously active ...   \n",
       "oai:arXiv.org:0704.0050  intelligent location of simultaneously active ...   \n",
       "oai:arXiv.org:0704.0098  sparsely spread cdma a statistical mechanics b...   \n",
       "oai:arXiv.org:0704.0217  capacity of a multiple antenna fading channel ...   \n",
       "\n",
       "                                date_parsed  year  \n",
       "arxiv_id                                           \n",
       "oai:arXiv.org:0704.0002 2009-05-01 01:00:00  2009  \n",
       "oai:arXiv.org:0704.0047 2003-02-01 00:00:00  2003  \n",
       "oai:arXiv.org:0704.0050 2007-01-01 00:00:00  2007  \n",
       "oai:arXiv.org:0704.0098 2007-10-12 01:00:00  2007  \n",
       "oai:arXiv.org:0704.0217 2009-03-01 00:00:00  2009  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#And now we create a paper metadata df.\n",
    "# Note that we have to set the index after subsetting (otherwise the subsetting can't find the arxiv id in the columns!)\n",
    "papers_meta = papers_un[[x for x in papers_un.columns if 'TOPIC' not in x]].set_index('arxiv_id')\n",
    "\n",
    "papers_meta.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>arxiv_categories</th>\n",
       "      <th>arxiv_raw_summary</th>\n",
       "      <th>arxiv_title</th>\n",
       "      <th>citations</th>\n",
       "      <th>year</th>\n",
       "      <th>full_title</th>\n",
       "      <th>journal</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>arxiv_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>oai:arXiv.org:0704.0002</th>\n",
       "      <td>[math.CO, cs.CG]</td>\n",
       "      <td>We describe a new algorithm, the $(k,\\ell)$-pe...</td>\n",
       "      <td>[sparsity, certifying, graph, decomposition]</td>\n",
       "      <td>17</td>\n",
       "      <td>2009</td>\n",
       "      <td>Sparsity-certifying Graph Decompositions</td>\n",
       "      <td>Graphs and Combinatorics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>oai:arXiv.org:0704.0047</th>\n",
       "      <td>[cs.NE, cs.AI]</td>\n",
       "      <td>The intelligent acoustic emission locator is d...</td>\n",
       "      <td>[intelligent, location, simultaneously, active...</td>\n",
       "      <td>8</td>\n",
       "      <td>2003</td>\n",
       "      <td>Intelligent location of simultaneously active ...</td>\n",
       "      <td>Aircraft Engineering and Aerospace Technology</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>oai:arXiv.org:0704.0050</th>\n",
       "      <td>[cs.NE, cs.AI]</td>\n",
       "      <td>Part I describes an intelligent acoustic emiss...</td>\n",
       "      <td>[intelligent, location, simultaneously, active...</td>\n",
       "      <td>0</td>\n",
       "      <td>2007</td>\n",
       "      <td>Intelligent location of simultaneously active ...</td>\n",
       "      <td>arXiv preprint arXiv:0704.0050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>oai:arXiv.org:0704.0098</th>\n",
       "      <td>[cs.IT, math.IT]</td>\n",
       "      <td>Sparse Code Division Multiple Access (CDMA), a...</td>\n",
       "      <td>[sparsely, spread, cdma, statistical, mechanic...</td>\n",
       "      <td>24</td>\n",
       "      <td>2007</td>\n",
       "      <td>Sparsely spread CDMA—a statistical mechanics-b...</td>\n",
       "      <td>Journal of Physics A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>oai:arXiv.org:0704.0217</th>\n",
       "      <td>[cs.IT, math.IT]</td>\n",
       "      <td>Given a multiple-input multiple-output (MIMO) ...</td>\n",
       "      <td>[capacity, multiple, antenna, fading, channel,...</td>\n",
       "      <td>154</td>\n",
       "      <td>2009</td>\n",
       "      <td>Capacity of a Multiple-Antenna Fading Channel ...</td>\n",
       "      <td>IEEE Transactions on Information Theory</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         arxiv_categories  \\\n",
       "arxiv_id                                    \n",
       "oai:arXiv.org:0704.0002  [math.CO, cs.CG]   \n",
       "oai:arXiv.org:0704.0047    [cs.NE, cs.AI]   \n",
       "oai:arXiv.org:0704.0050    [cs.NE, cs.AI]   \n",
       "oai:arXiv.org:0704.0098  [cs.IT, math.IT]   \n",
       "oai:arXiv.org:0704.0217  [cs.IT, math.IT]   \n",
       "\n",
       "                                                         arxiv_raw_summary  \\\n",
       "arxiv_id                                                                     \n",
       "oai:arXiv.org:0704.0002  We describe a new algorithm, the $(k,\\ell)$-pe...   \n",
       "oai:arXiv.org:0704.0047  The intelligent acoustic emission locator is d...   \n",
       "oai:arXiv.org:0704.0050  Part I describes an intelligent acoustic emiss...   \n",
       "oai:arXiv.org:0704.0098  Sparse Code Division Multiple Access (CDMA), a...   \n",
       "oai:arXiv.org:0704.0217  Given a multiple-input multiple-output (MIMO) ...   \n",
       "\n",
       "                                                               arxiv_title  \\\n",
       "arxiv_id                                                                     \n",
       "oai:arXiv.org:0704.0002       [sparsity, certifying, graph, decomposition]   \n",
       "oai:arXiv.org:0704.0047  [intelligent, location, simultaneously, active...   \n",
       "oai:arXiv.org:0704.0050  [intelligent, location, simultaneously, active...   \n",
       "oai:arXiv.org:0704.0098  [sparsely, spread, cdma, statistical, mechanic...   \n",
       "oai:arXiv.org:0704.0217  [capacity, multiple, antenna, fading, channel,...   \n",
       "\n",
       "                         citations  year  \\\n",
       "arxiv_id                                   \n",
       "oai:arXiv.org:0704.0002         17  2009   \n",
       "oai:arXiv.org:0704.0047          8  2003   \n",
       "oai:arXiv.org:0704.0050          0  2007   \n",
       "oai:arXiv.org:0704.0098         24  2007   \n",
       "oai:arXiv.org:0704.0217        154  2009   \n",
       "\n",
       "                                                                full_title  \\\n",
       "arxiv_id                                                                     \n",
       "oai:arXiv.org:0704.0002           Sparsity-certifying Graph Decompositions   \n",
       "oai:arXiv.org:0704.0047  Intelligent location of simultaneously active ...   \n",
       "oai:arXiv.org:0704.0050  Intelligent location of simultaneously active ...   \n",
       "oai:arXiv.org:0704.0098  Sparsely spread CDMA—a statistical mechanics-b...   \n",
       "oai:arXiv.org:0704.0217  Capacity of a Multiple-Antenna Fading Channel ...   \n",
       "\n",
       "                                                               journal  \n",
       "arxiv_id                                                                \n",
       "oai:arXiv.org:0704.0002                       Graphs and Combinatorics  \n",
       "oai:arXiv.org:0704.0047  Aircraft Engineering and Aerospace Technology  \n",
       "oai:arXiv.org:0704.0050                 arXiv preprint arXiv:0704.0050  \n",
       "oai:arXiv.org:0704.0098                           Journal of Physics A  \n",
       "oai:arXiv.org:0704.0217        IEEE Transactions on Information Theory  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Select columns of interest\n",
    "my_columns = ['arxiv_categories','arxiv_raw_summary','arxiv_title', 'citations','year','full_title','journal']\n",
    "\n",
    "#These columns are picking up the description of the papers, the institutes involved, the journal and the year.\n",
    "#I need all these things for the analysis of 'diffusion' which is coming up.\n",
    "\n",
    "papers_meta = papers_meta[my_columns]\n",
    "\n",
    "papers_meta.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### a. Paper classification\n",
    "Our first stage is a descriptive analysis of DL activity: in order to do this, we need to combine the paper data and the topic mix data and then label papers based on the relative importance of the DL topics. We will then plot some descriptives.\n",
    "\n",
    "We will start with a class that classifies papers depending on the presence of DL topics. Since we have two topics and it is not straightforward to combine coefficients into a single 'DL weight', we will classify the papers twice and then combine all the information to generate a DL variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "class DlPaperClassification():\n",
    "    '''\n",
    "    The class takes a paper df, a topic mix and an index for the topics which contain DL.\n",
    "\n",
    "    It has a .label_papers method that takes the topic mix and categories papers into DL groups.\n",
    "    \n",
    "    It also generates a categorical variable indicating if a paper is 'specialist' (dl is top category) or \n",
    "    embedded (dl is simply present)\n",
    "        \n",
    "    '''\n",
    "    \n",
    "    def __init__(self,papers,topic_mix,dl_var):\n",
    "        '''\n",
    "        Initialise the class with a papers file,\n",
    "        A topic mix file and a list of DL categories.\n",
    "        \n",
    "        '''\n",
    "        \n",
    "        #NB we will have \n",
    "        self.papers = papers\n",
    "        self.topics = topic_mix\n",
    "        \n",
    "        #This can be more than one\n",
    "        self.dl_var = dl_var\n",
    "        \n",
    "        \n",
    "    def label_papers(self,thres=0.2):\n",
    "        '''\n",
    "        We label papers into different levels of DL activity based on the weight\n",
    "        in their topic mix\n",
    "        -present if it is above a certain threshold\n",
    "        -top if it is the top topic (not necessarily above 0.5)\n",
    "        \n",
    "        '''\n",
    "        \n",
    "        #Load all the information we need for the analysis\n",
    "        papers = self.papers\n",
    "        topics = self.topics\n",
    "        dl_var = self.dl_var\n",
    "        \n",
    "        #Classify papers into categories\n",
    "        #Is the DL topic present?\n",
    "        dl_present = pd.Series(topics[dl_var].apply(lambda x: x>thres),\n",
    "                              name='dl_present')\n",
    "        \n",
    "        #Is the DL topic the biggest one?\n",
    "        dl_max = pd.Series(topics.idxmax(axis=1)==dl_var,name='dl_spec')\n",
    "                \n",
    "        #Concatenate all categories and index them (to concatenate with the papers in a moment)\n",
    "        dl_all_class = pd.concat([dl_present,dl_max],axis=1)\n",
    "        \n",
    "        #We define an 'embed' category if papers have dl presence but are not specialised\n",
    "        dl_all_class['dl_embed'] = (dl_all_class['dl_present']==True) & (dl_all_class['dl_spec']==False)\n",
    "        \n",
    "        dl_all_class.index = topics.index\n",
    "        \n",
    "        #Concatenate papers and our topic classification\n",
    "        papers_lab = pd.concat([papers,dl_all_class],axis=1)\n",
    "        \n",
    "        #And give them a categorical variable depending on whether they are specialist or embedded\n",
    "        papers_lab['dl_category'] = ['dl_spec' if x==True else 'dl_embed' if y==True else 'not_dl' for\n",
    "                                      x,y in zip(papers_lab['dl_spec'],papers_lab['dl_embed'])]\n",
    "    \n",
    "        #Save outputs\n",
    "        #Labels stores the labels we have created\n",
    "        self.labels = dl_all_class\n",
    "        \n",
    "        #Papers_lab stores the paper metadata labelled\n",
    "        self.papers_lab = papers_lab\n",
    "        \n",
    "        #topics_agg stores the aggregated topics (mostly for checking)\n",
    "        #self.topics_agg = topic_aggregated     \n",
    "        \n",
    "        return(self)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Run the analysis for both classes\n",
    "dl_vars = [\n",
    "    'TOPIC_learning_neural_neural network_training_machine learning_classification_trained_machine_learn_learning algorithm',\n",
    "    'TOPIC_state art_art_state_deep_convolutional_convolutional neural_convolutional neural network_deep learning_datasets_deep neural']\n",
    "\n",
    "#Each of the elements in dl classified is the output of the classification for a topic\n",
    "dl_classified = [DlPaperClassification(papers_meta,topics,var).label_papers().labels for var in dl_vars]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>dl_present</th>\n",
       "      <td>24127</td>\n",
       "      <td>14576</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dl_spec</th>\n",
       "      <td>3803</td>\n",
       "      <td>8890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dl_embed</th>\n",
       "      <td>20387</td>\n",
       "      <td>6090</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                0      1\n",
       "dl_present  24127  14576\n",
       "dl_spec      3803   8890\n",
       "dl_embed    20387   6090"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#These are the totals for both categories\n",
    "pd.concat([dl_classified[0].sum(),dl_classified[1].sum()],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30652\n",
      "8051\n"
     ]
    }
   ],
   "source": [
    "#We create two lists of dl papers: one that appears in either topic (expansive) and one that appears in both (restrictive)\n",
    "\n",
    "#Expansive (is in both)\n",
    "papers_expansive = dl_classified[0].loc[(dl_classified[0]['dl_present']==True) | (dl_classified[1]['dl_present']==True)].index\n",
    "\n",
    "#Restrictive (is only in one)\n",
    "papers_restrictive = dl_classified[0].loc[(dl_classified[0]['dl_present']==True) & (dl_classified[1]['dl_present']==True)].index\n",
    "\n",
    "print(len(papers_expansive))\n",
    "print(len(papers_restrictive))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.23364763814039285"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Percentage of DL papers in the total\n",
    "len(papers_expansive)/len(papers_meta)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Now we want to explore those papers\n",
    "\n",
    "def sense_checker(data,text_var,sample_size=10,text_size=300):\n",
    "    '''\n",
    "    This function takes a dataset, draws random samples from it and prints the text so we can sense-check the quality of the matches.\n",
    "    \n",
    "    '''\n",
    "    \n",
    "    #Draw a random sample of size sample size from the data\n",
    "    drawn = random.sample(list(data.index),sample_size)\n",
    "    \n",
    "    #return(data.loc[drawn])\n",
    "    \n",
    "    \n",
    "    #For each element we have drawn from the sample we print the text variable up to the parameter length\n",
    "    for obs in data.loc[drawn][text_var]:\n",
    "        print(obs[:text_size])\n",
    "        print('\\n')\n",
    "    \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 302,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Expansive\n",
      "=========\n",
      "We introduce the novel problem of automatically generating animated GIFs from\n",
      "video. GIFs are short looping video with no sound, and a perfect combination\n",
      "between image and video that really capture our attention. GIFs tell a story,\n",
      "express emotion, turn events into humorous moments, and are the new\n",
      "\n",
      "\n",
      "We methodologically address the problem of Q-value overestimation in deep\n",
      "reinforcement learning to handle high-dimensional state spaces efficiently. By\n",
      "adapting concepts from information theory, we introduce an intrinsic penalty\n",
      "signal encouraging reduced Q-value estimates. The resultant algorithm\n",
      "\n",
      "\n",
      "\n",
      "Pathological lung segmentation (PLS) is an important, yet challenging,\n",
      "medical image application due to the wide variability of pathological lung\n",
      "appearance and shape. Because PLS is often a pre-requisite for other imaging\n",
      "analytics, methodological simplicity and generality are key factors in\n",
      "usabil\n",
      "\n",
      "\n",
      "Recent advances of derivative-free optimization allow efficient approximating\n",
      "the global optimal solutions of sophisticated functions, such as functions with\n",
      "many local optima, non-differentiable and non-continuous functions. This\n",
      "article describes the ZOOpt (https://github.com/eyounx/ZOOpt) toolbox\n",
      "\n",
      "\n",
      "We study the problem of constructing synthetic graphs that resemble\n",
      "real-world directed graphs in terms of their degree correlations. We define the\n",
      "problem of directed 2K construction (D2K) that takes as input the directed\n",
      "degree sequence (DDS) and a joint degree and attribute matrix (JDAM) so as to\n",
      "\n",
      "\n",
      "In this article, a survey of several important equilibrium concepts for\n",
      "decentralized networks is presented. The term decentralized is used here to\n",
      "refer to scenarios where decisions (e.g., choosing a power allocation policy)\n",
      "are taken autonomously by devices interacting with each other (e.g., throu\n",
      "\n",
      "\n",
      "Low-rank matrix approximations are often used to help scale standard machine\n",
      "learning algorithms to large-scale problems. Recently, matrix coherence has\n",
      "been used to characterize the ability to extract global information from a\n",
      "subset of matrix entries in the context of these low-rank approximations\n",
      "\n",
      "\n",
      "Matching pedestrians across disjoint camera views, known as person\n",
      "re-identification (re-id), is a challenging problem that is of importance to\n",
      "visual recognition and surveillance. Most existing methods exploit local\n",
      "regions within spatial manipulation to perform matching in local\n",
      "correspondence. Ho\n",
      "\n",
      "\n",
      "We study a general adaptive ranking problem where an algorithm needs to\n",
      "perform a sequence of actions on a random user, drawn from a known\n",
      "distribution, so as to \"satisfy\" the user as early as possible. The\n",
      "satisfaction of each user is captured by an individual submodular function,\n",
      "where the user is\n",
      "\n",
      "\n",
      "Traffic correlation attacks to de-anonymize Tor users are possible when an\n",
      "adversary is in a position to observe traffic entering and exiting the Tor\n",
      "network. Recent work has brought attention to the threat of these attacks by\n",
      "network-level adversaries (e.g., Autonomous Systems). We perform a histor\n",
      "\n",
      "\n",
      "Restrictive\n",
      "=========\n",
      "Due to the prevalence of social media websites, one challenge facing computer\n",
      "vision researchers is to devise methods to process and search for persons of\n",
      "interest among the billions of shared photos on these websites. Facebook\n",
      "revealed in a 2013 white paper that its users have uploaded more than 25\n",
      "\n",
      "\n",
      "The design, analysis and application of a volumetric convolutional neural\n",
      "network (VCNN) are studied in this work. Although many CNNs have been proposed\n",
      "in the literature, their design is empirical. In the design of the VCNN, we\n",
      "propose a feed-forward K-means clustering algorithm to determine the fi\n",
      "\n",
      "\n",
      "I present a new way to parallelize the training of convolutional neural\n",
      "networks across multiple GPUs. The method scales significantly better than all\n",
      "alternatives when applied to modern convolutional neural networks.\n",
      "\n",
      "\n",
      "The deep learning community has devised a diverse set of methods to make\n",
      "gradient optimization, using large datasets, of large and highly complex models\n",
      "with deeply cascaded nonlinearities, practical. Taken as a whole, these methods\n",
      "constitute a breakthrough, allowing computational structures which \n",
      "\n",
      "\n",
      "State-of-the-art Convolutional Neural Network (CNN) benefits much from\n",
      "multi-task learning (MTL), which learns multiple related tasks simultaneously\n",
      "to obtain shared or mutually related representations for different tasks. The\n",
      "most widely used MTL CNN structure is based on an empirical or heuristic \n",
      "\n",
      "\n",
      "Many current methods to interpret convolutional neural networks (CNNs) use\n",
      "visualization techniques and words to highlight concepts of the input seemingly\n",
      "relevant to a CNN's decision. The methods hypothesize that the recognition of\n",
      "these concepts are instrumental in the decision a CNN reaches, but \n",
      "\n",
      "\n",
      "Dynamic hand gesture recognition has attracted increasing interests because\n",
      "of its importance for human computer interaction. In this paper, we propose a\n",
      "new motion feature augmented recurrent neural network for skeleton-based\n",
      "dynamic hand gesture recognition. Finger motion features are extracted to\n",
      "\n",
      "\n",
      "The superconducting LHC magnets are coupled with an electronic monitoring\n",
      "system which records and analyses voltage time series reflecting their\n",
      "performance. A currently used system is based on a range of preprogrammed\n",
      "triggers which launches protection procedures when a misbehavior of the magnets\n",
      "i\n",
      "\n",
      "\n",
      "Deep neural networks have been playing an essential role in many computer\n",
      "vision tasks including Visual Question Answering (VQA). Until recently, the\n",
      "study of their accuracy has been the main focus of research and now there is a\n",
      "huge trend toward assessing the robustness of these models against adve\n",
      "\n",
      "\n",
      "Many works have concentrated on visualizing and understanding the inner\n",
      "mechanism of convolutional neural networks (CNNs) by generating images that\n",
      "activate some specific neurons, which is called deep visualization. However, it\n",
      "is still unclear what the filters extract from images intuitively. In th\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print('Expansive')\n",
    "print('=========')\n",
    "sense_checker(papers_meta.loc[papers_expansive],text_var='arxiv_raw_summary')\n",
    "\n",
    "\n",
    "print('Restrictive')\n",
    "print('=========')\n",
    "sense_checker(papers_meta.loc[papers_restrictive],text_var='arxiv_raw_summary')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The results for both analyses look fine. We will stick with the expansive definition for now (more data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### b. Descriptive analysis: GPTs\n",
    "\n",
    "Having selected a set of papers to work with, we address our descriptive research questions.\n",
    "\n",
    "We will build a class that addresses these questions through its methods:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25.0"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "papers_meta.citations.quantile(0.9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Functions used in the class\n",
    "\n",
    "def get_cited_papers(data,citation_var,q=0.75):\n",
    "    '''\n",
    "    This function subsets a dataset returning the most cited papers of the period (based on the citation variable and the quantile)\n",
    "    \n",
    "    '''\n",
    "    #Get the quantile\n",
    "    citation_quantile = papers[citation_var].quantile(q)\n",
    "    \n",
    "    #Subset the data\n",
    "    subset_data = data.loc[data[citation_var]>=citation_quantile]\n",
    "\n",
    "    return(subset_data)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "class DlPaperAnalysis_GPT():\n",
    "    '''\n",
    "    This class generates descriptive analyses informing our first research question: Is DL a GPT.\n",
    "    \n",
    "    It does so with three methods:\n",
    "    \n",
    "        .is_growing produces a timeseries comparing levels of activity in DL papers versus the total\n",
    "        .is_spreading estimates the diffusion of DL papers in different fields\n",
    "        .is_impactful estimates the citation rates for papers in different fields\n",
    "    \n",
    "    '''\n",
    "    \n",
    "    def __init__(self,papers,dl_ids):\n",
    "        ''''\n",
    "        This function is initialised with the full set of papers and the ids of DL papers\n",
    "        \n",
    "        '''\n",
    "        \n",
    "        #We label the data with the ids\n",
    "        papers['is_dl'] = ['dl' if x in dl_ids else 'not_dl' for x in papers.index]\n",
    "        \n",
    "        #Store the information\n",
    "        self.papers = papers\n",
    "        \n",
    "        #Also store the DL ids although I doubt we will do much with them\n",
    "        self.dl_ids = dl_ids\n",
    "        \n",
    "        #Extract categories (we are only interested in computer science or statistics / ML)\n",
    "        categories = [x for x in set(flatten_list(papers.arxiv_categories)) if (x[:2]=='cs') | (x=='stat.ML')]\n",
    "        self.categories=categories\n",
    "        \n",
    "    def is_growing(self,ax,year_lims=(2000,2018),thres_year=2012,high_cited=False):\n",
    "        '''\n",
    "        This method charts levels of activity in DL and compares the importance of DL before / after a threshold year\n",
    "        \n",
    "        We also give it: \n",
    "            -year_lims to subset the x axis\n",
    "            -thres_year to compare the importance of DL before/after the threshold year\n",
    "            -high_cited subsets the data to focus on the most highly cited papers each year (its value represents the\n",
    "            position in the distribution)\n",
    "        \n",
    "        '''\n",
    "        \n",
    "        #Load papers\n",
    "        papers = self.papers\n",
    "        \n",
    "        #Subset if we are focusing on highly cited papers\n",
    "        if high_cited!=False:\n",
    "            \n",
    "            #This loops over years and extracts the top cited papers\n",
    "            papers = pd.concat([get_cited_papers(papers.loc[papers.year==x,:],'citations',high_cited) for x in np.arange(year_lims[0],year_lims[1])])\n",
    "            \n",
    "            \n",
    "        \n",
    "        #######################\n",
    "        #1. Create a timeseries\n",
    "        #######################\n",
    "        \n",
    "        #Create timeseries (note we are subsetting this table with the year lims)\n",
    "        papers_year = pd.crosstab(papers['year'],papers['is_dl']).loc[year_lims[0]:year_lims[1]]\n",
    "        \n",
    "        #Plot\n",
    "        papers_year.plot.bar(stacked=True,ax=ax)\n",
    "    \n",
    "        #Add titles etc\n",
    "        \n",
    "        if high_cited==False:\n",
    "            title = 'Number of papers in ArXiv (DL / non DL), \\n {y0}-{y1}'.format(y0=str(year_lims[0]),y1=str(year_lims[1]))\n",
    "        else:\n",
    "            title = 'Number of papers in ArXiv (DL / non DL), \\n {y0}-{y1} (top {q} citations in year)'.format(y0=str(year_lims[0]),y1=str(year_lims[1]),\n",
    "                                                                                                              q=str(100*high_cited)+'%')\n",
    "        \n",
    "        ax.set_title(title,size=14)\n",
    "        \n",
    "        #Store information\n",
    "        self.papers_year = papers_year\n",
    "        \n",
    "        #############################\n",
    "        #2. Before / after comparison\n",
    "        ###############################\n",
    "        \n",
    "        #Crosstabs a boolean indicating if the year is before / after the threshold and normalise over the rows\n",
    "        ct = pd.crosstab(papers['year']>thres_year,papers['is_dl'],normalize=0)\n",
    "        \n",
    "        #We want to relabel the index of the crosstab to make the output more readable\n",
    "        y = str(thres_year)\n",
    "        \n",
    "        ct.index=['Before '+y, 'After '+y]\n",
    "        \n",
    "        self.dl_shares_change= ct\n",
    "        \n",
    "    def is_spreading(self,ax,year_lims=(2000,2017),thres_year=2012,high_cited=False,pop_categories=False):\n",
    "        '''\n",
    "        \n",
    "        This method charts the diffusion of DL across domains. \n",
    "        One annoying aspect of this is that the papers have multiple categories with no weights. \n",
    "        We will expand the data and consider categories separately.\n",
    "        \n",
    "        pop_categories allows us to focus on the more popular categories of activity where we expect our share estimates to be more robust.\n",
    "        \n",
    "        \n",
    "        #What are the key outputs:\n",
    "        \n",
    "        #Line chart representing DL papers as a share of total in papers with different categories\n",
    "        #Line chart comparing DL papers as a share of total in different categories before / after threshold.\n",
    "        \n",
    "        #Note that the ax argument has two elements for the two figures we are drawing.\n",
    "        \n",
    "        '''\n",
    "        \n",
    "        #Load papers\n",
    "        papers = self.papers\n",
    "        \n",
    "        #Subset if we have decided to focus on highly cited papers\n",
    "        if high_cited!=False:\n",
    "            #This loops over years and extracts the top cited papers (should probably turn this into a function)\n",
    "            papers = pd.concat([get_cited_papers(papers.loc[papers.year==x,:],'citations',high_cited) for x in np.arange(year_lims[0],year_lims[1])])\n",
    "            \n",
    "        \n",
    "        #If we are filtering to focus on popular categories\n",
    "        if pop_categories!=False:\n",
    "            #This extracts the top categories based on their frequency of appearance in the data\n",
    "            categories = flatten_freqs(papers.arxiv_categories)[self.categories][:pop_categories].index\n",
    "            \n",
    "            \n",
    "        #######\n",
    "        #1. Create linechart of activity by category\n",
    "        ########\n",
    "        \n",
    "        #We create a couple of containers to store the data\n",
    "        #Share container stores the share of DL in total (we will use this for plotting)\n",
    "        cat_share_container =[]\n",
    "        \n",
    "        #Cat total container stores the totals for each category. We use a dict for this\n",
    "        cat_total_container = {}\n",
    "        \n",
    "        \n",
    "        #We loop over each category of interest\n",
    "        for cat in categories:\n",
    "            #Subset the data to identify papers with the category\n",
    "            subset = papers.loc[[cat in x for x in papers['arxiv_categories']],:]\n",
    "            \n",
    "            #We crosstab year vs dl categorical\n",
    "            subset_year = pd.crosstab(subset['year'],subset['is_dl'])\n",
    "            \n",
    "            #Store the totals\n",
    "            cat_total_container[cat] = subset_year\n",
    "            \n",
    "            #If there are any DL papers at all\n",
    "            if 'dl' in subset_year.columns:\n",
    "                #Calculate the share of DL papers\n",
    "                subset_year['share'] = subset_year['dl']/subset_year.sum(axis=1)\n",
    "                \n",
    "                #We only output the share as a series named after the category (this will become the column name when we concatenate latewr)\n",
    "                out = pd.Series(subset_year['share'],name=cat)\n",
    "                \n",
    "                #Out it comes\n",
    "                cat_share_container.append(out)\n",
    "            \n",
    "        #Create the df filling nas and focusing on our threshold years\n",
    "        category_share_df = pd.concat(cat_share_container,axis=1).fillna(0).loc[year_lims[0]:year_lims[1]]\n",
    "        \n",
    "        \n",
    "        #Now we plot this.\n",
    "        #Note that we are assuming that there are too many variables for a legend. We will probably create a cleaner version with nicer labels later.\n",
    "        category_share_df.rolling(window=3).mean().plot(legend=False,color='mediumblue',alpha=0.7,ax=ax[0])\n",
    "        \n",
    "        ax[0].set_title('DL paper shares by ArXiv categories',size=14)\n",
    "        ax[0].set_ylabel('Share of all papers in category /year')\n",
    "        \n",
    "        #Store results\n",
    "        self.cat_totals = cat_total_container\n",
    "        self.cat_shares = cat_share_container\n",
    "        self.cat_shares_df = category_share_df\n",
    "        \n",
    "        #########\n",
    "        #2. Create barchart comparing two intervals\n",
    "        #########\n",
    "\n",
    "        cat_period_container = []\n",
    "\n",
    "        #As before, we loop over categories.\n",
    "        for cat in categories:\n",
    "                #Subset the data to identify papers with the category\n",
    "                subset = papers.loc[[cat in x for x in papers['arxiv_categories']],:]\n",
    "\n",
    "                #We crosstab a boolean (before / after threshold) vs the dl boolean\n",
    "                subset_ct = pd.crosstab(subset['year']>thres_year,subset['is_dl'],normalize=0)\n",
    "                \n",
    "                #This is to relabel the index (useful for the chart later)\n",
    "                y = str(thres_year)\n",
    "                subset_ct.index=['Before '+y, 'After '+y]\n",
    "        \n",
    "\n",
    "                #We append to the container, turning into a series so we can rename\n",
    "                cat_period_container.append(pd.Series(subset_ct['dl'],name=cat))\n",
    "\n",
    "        #Create the df\n",
    "        cat_thres_df = pd.concat(cat_period_container,axis=1).T.sort_values('After '+y,ascending=False)\n",
    "        \n",
    "        cat_thres_df.plot.bar(ax=ax[1])\n",
    "        \n",
    "        ax[1].set_title('Change in DL shares before/after '+str(thres_year),size=14)\n",
    "        ax[1].set_ylabel('Share of all papers in category/year')\n",
    "        \n",
    "        \n",
    "        #Store the df\n",
    "        \n",
    "        self.cat_thres_df = cat_thres_df\n",
    "            \n",
    "        \n",
    "    def is_impactful(self,ax,q=0.75,year_thres=2012,pop_categories=False):\n",
    "        '''\n",
    "        Finally, we want to check if DL papers are 'impactful' - do they tend to receive more citations than other papers in each field?\n",
    "        \n",
    "        To measure this we will estimate, for each category, what is the share of DL papers in total vs share of highly cited Dl papers. \n",
    "        \n",
    "        We focus on papers published from a threshold year to avoid being skewed by changes in the historical distribution of papers.\n",
    "        \n",
    "        '''\n",
    "        \n",
    "        #Load papers and categories\n",
    "        papers = self.papers\n",
    "        categories = self.categories\n",
    "        \n",
    "        cit_cont=[]\n",
    "        \n",
    "        #If we are filtering to focus on popular categories\n",
    "        if pop_categories!=False:\n",
    "            #This extracts the top categories based on their frequency of appearance in the data\n",
    "            categories = flatten_freqs(papers.loc[papers.year>year_thres,'arxiv_categories'])[categories][:pop_categories].index\n",
    "        \n",
    "        #For each category\n",
    "        for cat in categories:\n",
    "            #Here we have the papers since threshold (eg 2012) in the category\n",
    "            subset = papers.loc[(papers.year>year_thres) & ([cat in x for x in papers['arxiv_categories']])]\n",
    "            \n",
    "            #Share of dl in all papers\n",
    "            dl_all = subset['is_dl'].value_counts(normalize=True)['dl']\n",
    "            \n",
    "            #Share of dl in highly cited papers\n",
    "            #We use a previous function to subset this\n",
    "            subset_high_cited = get_cited_papers(subset,'citations',q)\n",
    "            \n",
    "            dl_high_cited = subset_high_cited['is_dl'].value_counts(normalize=True)['dl']\n",
    "            \n",
    "            #out = pd.Series([dl_all,dl_high_cited],index=['dl_share_all','dl_share_high_cited'],name=cat)\n",
    "            \n",
    "            #We output an index which normalises the share of high cited papers by the total. \n",
    "            #It is positive if DL papers are overrepresented amont the highly cited ones\n",
    "            out = pd.Series((dl_high_cited/dl_all)-1,index=['high_cited_total_ratio'],name=cat)\n",
    "        \n",
    "        \n",
    "            cit_cont.append(out)\n",
    "            \n",
    "        #Create citation df\n",
    "        citation_df = pd.concat(cit_cont,axis=1).T\n",
    "        \n",
    "        #And plot it\n",
    "        citation_df.sort_values('high_cited_total_ratio',ascending=False).plot.bar(ax=ax,legend=False)\n",
    "        \n",
    "        #Add title\n",
    "        ax.set_title('DL paper citation \\'competitiveness\\' \\n (papers published after {y}, top {q} citations in period))'.format(\n",
    "            y=str(year_thres),q=str(100*q)+'%'))\n",
    "        \n",
    "        #And x label\n",
    "        ax.set_ylabel('(DL papers share of highly cited/ \\n DL papers share of all)-1')\n",
    "        \n",
    "        \n",
    "        #Store the df\n",
    "        self.citation_impact_df = citation_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x216 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "test = DlPaperAnalysis_GPT(papers_meta,papers_expansive)\n",
    "\n",
    "fig,ax = plt.subplots(figsize=(5,3))\n",
    "\n",
    "test.is_growing(ax=ax,year_lims=(2005,2018))\n",
    "ax.set_title('')\n",
    "ax.set_ylabel('Number of papers')\n",
    "ax.set_xlabel('')\n",
    "ax.legend(title='Category',labels=['Deep Learning','Not Deep Learning'])\n",
    "\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.savefig(fig_path+'/paper_figures/figure_1_trends.pdf')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Fast increase of activity in ArXiv.\n",
    "\n",
    "DL appears to be growing at a faster rate, consistent with the 'rapidity' thesis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>is_dl</th>\n",
       "      <th>dl</th>\n",
       "      <th>not_dl</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Before 2012</th>\n",
       "      <td>0.103048</td>\n",
       "      <td>0.896952</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>After 2012</th>\n",
       "      <td>0.281553</td>\n",
       "      <td>0.718447</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "is_dl              dl    not_dl\n",
       "Before 2012  0.103048  0.896952\n",
       "After 2012   0.281553  0.718447"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.dl_shares_change"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>is_dl</th>\n",
       "      <th>dl</th>\n",
       "      <th>not_dl</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Before 2012</th>\n",
       "      <td>0.123297</td>\n",
       "      <td>0.876703</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>After 2012</th>\n",
       "      <td>0.312269</td>\n",
       "      <td>0.687731</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "is_dl              dl    not_dl\n",
       "Before 2012  0.123297  0.876703\n",
       "After 2012   0.312269  0.687731"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x216 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "test2 = DlPaperAnalysis_GPT(papers_meta,papers_expansive)\n",
    "\n",
    "fig,ax = plt.subplots(figsize=(7,3))\n",
    "test2.is_growing(high_cited=0.75,ax=ax)\n",
    "test2.dl_shares_change"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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PxK4XETuw20g8GGdpasDvXv35s03My8TbBiGYRhNCr+gUkEKjoGr6jG4VZc+Am4VkVdE5BQR6VhHGQ3DMAzDKJFMmzao6lLc6kV34VbsOhh4S0RsUQ3DMAzDaAAKKnARGSUiD+CW22uFWxt5X2A73PrBhmEYhmHUM1nGwA8F/q6qz4cdVfUbETmpMmIZhmEYlWb16tXMnTuXlStXNrQozZI2bdrQq1cvWrVqVVL4RAXut5h8DPhrkuGaqj5V0lMNwzCMBmfu3Ll07NiR3r17EyzWZdQPqsqiRYuYO3cuffr0KSmOtBb48bht+saKyNa4LQ4fA55U1ca3nejYzpHr6I6OhmEYRpiVK1ea8m4gRISuXbuycGHpO7ImKnB1m8PfirM8b4Hbw3df3D7NK4DJqnpxyU82DMMwGhxT3g1HXfM+ixFbV1WtVtVXVPU8VR0BjAbm1enJhmEYRrOnqqqKQYMGsd122zFkyBBefvnlgmGuvPJK+vXrx9FHH11WWebMmcPuu+9O//79GTBgAFdccUXNvcWLF7PXXnvRt29f9tprL7788ksAPvzwQ3baaSdat27NpZdemimucpHFiO1VvyPZLcC/1fEFcGfZpalvwt3u1uVuGEYzp/eYR8oa36xx+xf007ZtW9555x0AHn/8cc4991yee+651DDXXHMNTz75JL169cokx5o1a2jZsrC6a9myJX/7298YMmQIy5YtY+jQoey1117079+fcePGseeeezJmzBjGjRvHuHHjuOiii9hggw248sormThxYua4ykWWeeBbA+OBY4EZIvIXPyZuGIZhGGVj6dKlrL/++jXXl1xyCdtvvz0DBw7k/PPPB+DUU0/l448/Zt999+Xvf/87ixcv5qCDDmLgwIEMHz6cqVOnAjB27FiOPfZYRowYwbHHHsvatWs555xzauK7/vrraz2/R48eDBkyBICOHTvSr18/5s1znc0PPvggxx9/PADHH398jcLecMMN2X777WtZkqfFVS4KVkn8piVPAE+IyO7AHcBpIvIuMEZVXymrRIZhGEazYcWKFQwaNIiVK1cyf/58nn76aQAmT57MjBkzeP3111FVRo0axfPPP891113HY489xjPPPEO3bt0444wzGDx4MBMnTuTpp5/muOOOq2nRT58+nRdffJG2bdsyfvx4OnfuzBtvvMGqVasYMWIEe++9d6IF+KxZs3j77bfZcccdAfj888/p0aMHABtvvDGff/555jRG4yoXBRW4iHQFjsG1wD8HzgAmAYNwW4uWZv9uGIZhNHvCXeivvPIKxx13HNOmTWPy5MlMnjyZwYMHA7B8+XJmzJjBrrvumhf+xRdf5L777gNgjz32YNGiRSxduhSAUaNG0bZtW8BVCKZOncq9994LwJIlS5gxY0asAl++fDmHHnool19+OZ06dap1X0QyG6AViqsuZBkDfwX4J3CQqs4Nub8pIteVVRrDMAyj2bLTTjvxxRdfsHDhQlSVc889l5/+9Kclx9e+ffuac1XlqquuYp999kkNs3r1ag499FCOPvpoDjnkkBr3jTbaiPnz59OjRw/mz5/PhhtuWPD5SXGVi9QxcBGpAh5S1QsjyhsAVb2o7BIZhmEYzZIPP/yQtWvX0rVrV/bZZx9uvvlmli9fDsC8efNYsGBBrTDf+973uPNOZ1P97LPP0q1bt9iW7j777MO1117L6tWrAfjvf//L11/nL2miqpx00kn069ePs88+O+/eqFGjuO222wC47bbbOPDAA1PTkhZXuUhtgavqWhHZuSJPNgzDMJo9wRg4OKV32223UVVVxd57780HH3zATjvtBECHDh244447arV8x44dy4knnsjAgQNp165djZKNcvLJJzNr1iyGDBmCqtK9e/daluMvvfQS//znP9l2221rZPrLX/7Cfvvtx5gxYzjiiCO46aab2Hzzzbn77rsB+Oyzzxg2bBhLly6lRYsWXH755UyfPp2pU6cmxlUuxNmopXgQuRboiRvvrqmuqOr9ZZOiCIYNG6ax+4GXshKbTSMzDKMZ88EHH9CvX7+GFqNZE/cORGSKqg4rFDbLGHgbYBGwR8hNgQZR4IZhGIZhZJtG9uP6EMQwDMMwjOxkmUbWC7gKGOGdXgDOijNqaxZYt7thGIbRCMiyEtstuHnfm/jjIe9mGIZhGEYDkUWBd1fVW1R1jT9uBbpXWC7DMAzDMFLIosAXicgxIlLlj2NwRm2GYRiGYTQQWRT4icARwGfAfOAwwAzbDMMwjLIwceJERIQPP/wwz/2cc85hwIABnHPOOUycOJHp06fX6TlPPPEEQ4cOZdttt2Xo0KE1664DTJkyhW233ZatttqKM888k2CK9T333MOAAQNo0aIF4SnMaXHVF1ms0GcDo+pBFsMwDKMhia6nUef4shn6TpgwgV122YUJEybwxz/+scZ9/PjxLF68mKqqKk444QQOOOCAorbjjG4j2q1bNx566CE22WQTpk2bxj777FOzQ9jPfvYzbrjhBnbccUf2228/HnvsMfbdd1+++93vcv/999da0jUtrvoiixX6lTHOS4A3VfXB8otkGIZhNBeWL1/Oiy++yDPPPMMPf/jDGgU+atQoli9fztChQzn44IOZNGkSzz33HH/6059qNi/5+c9/zsKFC2nXrh033HAD22yzDSeccAJt2rTh7bffZsSIEVx22WU1zwo2RgEYMGAAK1asYNWqVSxevJilS5cyfPhwAI477jgmTpzIvvvum7jQTVJcrVu3LnseJZF1IZdtcCuxARwKfAJsJyK7q+ovKiWcYRiGsW7z4IMPMnLkSLbeemu6du3KlClTGDp0KJMmTaJDhw41O5V98sknHHDAARx22GEA7Lnnnlx33XX07duX1157jdNOO62mG3vu3Lm8/PLLVFVVJT73vvvuY8iQIbRu3Zp58+bRq1evmnu9evUqqjUdjqs+yaLABwIjVHUt1Cyt+gKwC/BeWkARGQlcAVQBN6rquBg/RwBjcau7vauqPyomAYZhGEbTZcKECZx11lkAjB49mgkTJjB06NDUMMuXL+fll1/m8MMPr3FbtWpVzfnhhx+eqrzff/99fvvb3zJ58uQ6Sl/euIoliwJfH+iA6zYHaA9s4Dc6WZUUyO9kdjWwFzAXeENEJqnq9JCfvsC5uArClyJSeH82wzAMY51g8eLFPP3007z33nuICGvXrkVEuOSSS1L3266urqZLly41rfMo4W1Eo8ydO5eDDz6Y22+/nS233BKAnj17Mnfu3Dw/PXv2LCh/XFz1SRYr9IuBd0TkFhG5FXgbuERE2gNPpoTbAZipqh+r6rfAXUB0/7WfAFer6pcAqlp7rzjDMAxjneTee+/l2GOPZfbs2cyaNYs5c+bQp08fXnjhhVp+O3bsyLJlywDo1KkT2ey6bwAAIABJREFUffr04Z573MiuqvLuu+8WfN5XX33F/vvvz7hx4xgxYkSNe48ePejUqROvvvoqqsrtt99ecLvQpLjqk4IKXFVvAnYGJgIPALuo6o2q+rWqnpMStCcwJ3Q917uF2RrYWkReEpFXfZe7YRiG0QyYMGECBx98cJ7boYceyoQJE2r5HT16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\n",
      "text/plain": [
       "<Figure size 504x432 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,ax = plt.subplots(nrows=2,figsize=(7,6))\n",
    "\n",
    "test.is_spreading([ax[0],ax[1]],pop_categories=35,year_lims=(2005,2018))\n",
    "\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.savefig(fig_path+'/paper_figures/figure_2_shares.pdf')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "DL is becoming more important in multiple disciplines. This includes disciplines that specialise in the development of AI technologies (eg `cs.NE` = neural networks, or `cs.AI` = AI) but also others such as Computer Vision, Computation and Language, or Information Retrieval or graphics. \n",
    "\n",
    "**TODO** What's the discipline with the 'bump' around 2014?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,ax = plt.subplots(figsize=(7,4))\n",
    "\n",
    "test.is_impactful(ax,year_thres=2012,pop_categories=35,q=0.75)\n",
    "\n",
    "ax.set_ylabel('Citation competitiveness index \\n $CC_i$')\n",
    "ax.set_title('')\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.savefig(fig_path+'/paper_figures/figure_3_impact.pdf')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "DL papers are overrepresented in the set of influential papers for most CS disciplines with only a few exceptions (software engineering and performance)\n",
    "\n",
    "Note that some of the most popular topics for DL (in chart above) are quite low in these rankings because DL papers represent the majority of papers in them already\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Conclusion of the descriptive GPT analysis:\n",
    "\n",
    "DL seems to fulfil all the properties of a GPT: rapid growth, diffusion in multiple areas and impact (which we proxy through citations). Now we need to analyse what this means for its geography."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## c. Geographical analysis\n",
    "\n",
    "Having studied the development and diffusion of DL, we want to analyse their geography. What are our hypotheses here?\n",
    "\n",
    "Our **hypothesis** is that there has been a disruption in the geography of DL: a change in the relative specialisations of countries.\n",
    "\n",
    "How do we analyse this? \n",
    "\n",
    "* First we do a descriptive analysis: line charts and pre/after 2012 comparison of country 'market shares' in DL.\n",
    "* Second, we do a geographical analysis using dbscan: how does the evolution of DL clustering compare with the evolution of clustering in other domains?\n",
    "\n",
    "As before, we will write a class to do this.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### i. Pre-processing: Bin into countries / regions\n",
    "\n",
    "\n",
    "NB see [here](https://medium.com/@bobhaffner/spatial-joins-in-geopandas-c5e916a763f3) for a quick tutorial on spatial joins"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Alas, we don't have countries in these data.\n",
    "import geopandas as gp\n",
    "from shapely.geometry import Point"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Read the shapefile\n",
    "admin_shape = gp.read_file(ext_data+'/admin_shapefile/ne_10m_admin_1_states_provinces.shp')\n",
    "\n",
    "admin_shape['country_reg'] = [x+'_'+y for x,y in zip(admin_shape.iso_a2,admin_shape.name_en)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "#We will use a spatial join. To do this we need to create a geopandas df with the spatial coordinates\n",
    "#for each paper. We will create an individual paper id for each paper-institution pair so it's straightforward to\n",
    "#merge things later\n",
    "\n",
    "papers['paper_id'] = ['id_'+str(num) for num in np.arange(0,len(papers))]\n",
    "\n",
    "#We create a geo papers df with the lat lon\n",
    "geo_paper = papers.set_index('paper_id')[['grid_lat','grid_lon']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Some of the papers here have multiple lat lons - they are from institutions with multiple locations.\n",
    "#We will drop them from now.\n",
    "geo_paper = geo_paper.loc[[len(x)==1 for x in geo_paper['grid_lat']]]\n",
    "\n",
    "#Also drop papers with 'none' l\n",
    "geo_paper = geo_paper.loc[[x[0]!=None for x in geo_paper['grid_lat']]]\n",
    "geo_paper = geo_paper.dropna(subset=['grid_lat'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-24097"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(geo_paper)-len(papers)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We lose 24,000 observations. Check with Joel what to do with these"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Now we turn the lat and lon into coordinates\n",
    "paper_points = geo_paper.apply(lambda x: Point([x['grid_lon'][0],x['grid_lat'][0]]),axis=1)\n",
    "\n",
    "#And create the geodataframe\n",
    "papers_geodf = gp.GeoDataFrame(geo_paper,geometry=paper_points)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Make sure we have the same coordinates\n",
    "papers_geodf.crs= admin_shape.crs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "#And do the spatial join - the operation indicates that we are doing a point in polygon.\n",
    "papers_geographies = gp.sjoin(papers_geodf,admin_shape,op='within')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Focus on the variables we are interested in (country and region)\n",
    "papers_geo_short = pd.DataFrame(papers_geographies[['admin','name_en','country_reg']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Merge with the papers df\n",
    "papers_all= papers.set_index('paper_id').join(papers_geo_short,how='left')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Create the papers df for spatial analysis\n",
    "#Variables of interest\n",
    "\n",
    "my_vars = ['arxiv_id','title','arxiv_raw_summary','arxiv_categories',\n",
    "           'journal','citations','institutes',\n",
    "    'grid_lat','grid_lon','admin','name_en','country_reg','year']\n",
    "\n",
    "papers_spat = papers_all[my_vars].dropna(subset=['name_en'])\n",
    "\n",
    "#Remove all observations with empty geocodes\n",
    "papers_spat = papers_spat.loc[[len(x)>0 for x in papers_spat['admin']]]\n",
    "\n",
    "papers_spat['grid_lat'],papers_spat['grid_lon'] = [[x[0] for x in papers_spat[variable]] for variable in ['grid_lat','grid_lon']]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "papers_spat.rename(columns={'name_en':'region','admin':'country'},inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-26890"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(papers_spat)-len(papers)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We have lost a few more (2k) observations that had missing country information"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### iii. Geographical change analysis\n",
    "\n",
    "Now we write a class that will address our spatial questions:\n",
    "\n",
    "* What is the geographical concentration of DL research compared with other research? \n",
    "  * **TODO**: This will include Herfindahl indices and their changes, and curves of concentration\n",
    "* How has the geography of DL research changed compared to other fields?\n",
    "* How have the clusters evolved over time?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_high_cited_year(data,q,year_lims):\n",
    "    '''\n",
    "    This function extracts high cited papers by year (to control for citation times).\n",
    "    TODO - put this function in all classes above\n",
    "    \n",
    "    '''\n",
    "    #This loops over the years and extracts papers in the top quantile of activity.\n",
    "    \n",
    "    out = pd.concat([get_cited_papers(data.loc[data.year==x,:],'citations',\n",
    "                                      q) for x in np.arange(year_lims[0],year_lims[1])])\n",
    "    \n",
    "    return(out)\n",
    "\n",
    "def calculate_herfindahl(series):\n",
    "    '''\n",
    "    This function takes a series and returns its herfindahl index (the sum squared of the share of each observation in the total)\n",
    "    \n",
    "    '''\n",
    "    \n",
    "    herf = np.sum([(x/np.sum(series))**2 for x in series])\n",
    "    return(herf)\n",
    "\n",
    "def sort_shares_for_concentration_plot(df,cols):\n",
    "    '''\n",
    "    This function takes a df with shares of activity by area and returns a df ready for plotting to analyse concentration\n",
    "    focusing on the columns of interest\n",
    "    \n",
    "    '''\n",
    "    \n",
    "    totals_sorted = pd.concat([\n",
    "            df.sort_values(col,ascending=False)[col].reset_index(drop=True) for col in cols],axis=1)\n",
    "        \n",
    "    shares_sorted = totals_sorted.apply(lambda x: x/x.sum()).cumsum()\n",
    "        \n",
    "    return(shares_sorted)\n",
    "\n",
    "def concentration_analysis(papers_df,level):\n",
    "    '''\n",
    "    This function takes a papers df and a level of analysis performs a concentration analysis which returns\n",
    "    a herfindahl index which returns a concentration index for the level of activity, and a df with cumulative shares\n",
    "    of activity to visualise in a plot.\n",
    "    \n",
    "    '''\n",
    "    \n",
    "    #Calculate totals by category (DL and not DL)\n",
    "    totals_by_cat = pd.pivot_table(papers_df.groupby([level,'is_dl']).size().reset_index(),\n",
    "                                   index=level,columns='is_dl',values=0).fillna(0)\n",
    "        \n",
    "    #And categories for the totals\n",
    "    totals_by_cat['total'] = totals_by_cat.sum(axis=1)\n",
    "        \n",
    "    #Calculate Herfindahl with a function we defined before. We are only interested in DL and the total benchmark\n",
    "    herf = totals_by_cat.apply(lambda x: calculate_herfindahl(x))[['dl','total']]\n",
    "        \n",
    "    #Store the herfindahl indices\n",
    "    \n",
    "        \n",
    "    #To visualise these columns we creata\n",
    "        \n",
    "    shares_sorted = sort_shares_for_concentration_plot(totals_by_cat,['dl','total'])\n",
    "    \n",
    "    return([herf,shares_sorted])\n",
    "        \n",
    "            \n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "class DlPaperAnalysis_Spatial():\n",
    "    '''\n",
    "    This class implements the following methods:\n",
    "    \n",
    "    \n",
    "    .shares compares dl shares with wider shares (a way of visualising LQs). This works with regions and countries\n",
    "    .concentration compares dl geographical concentration with all papers\n",
    "    .concentration_change plots changes of concentration before and after a threshold period\n",
    "    .spec_change compares changes in specialisation before/after a threshold. We could also compare it with a reference field?\n",
    "    .clustering performs the dbscan analysis\n",
    "    \n",
    "    '''\n",
    "    \n",
    "    def __init__(self,papers,dl_ids):\n",
    "        ''''\n",
    "        This class is initialised with the full set of papers and the ids of DL papers\n",
    "        \n",
    "        '''\n",
    "        \n",
    "        #We label the data with the ids\n",
    "        papers['is_dl'] = ['dl' if x in dl_ids else 'not_dl' for x in papers.arxiv_id]\n",
    "        \n",
    "        #Store the information\n",
    "        self.papers = papers\n",
    "        \n",
    "        #Also store the DL ids although I doubt we will do much with them\n",
    "        self.dl_ids = dl_ids\n",
    "        \n",
    "        #Extract categories (we are only interested in computer science or statistics / ML)\n",
    "        categories = [x for x in set(flatten_list(papers.arxiv_categories)) if (x[:2]=='cs') | (x=='stat.ML')]\n",
    "        self.categories=categories\n",
    "        \n",
    "        \n",
    "    def shares(self,ax,unit='country',high_cited=False,top_ranking=10,year_lims=[2007,2018]):\n",
    "        '''\n",
    "        This function plots shares of total papers and share of DL papers by location. As in previous\n",
    "        classes, we can focus it on highly cited and only plot high activity locations.\n",
    "        \n",
    "        '''\n",
    "        \n",
    "        #Load papers\n",
    "        papers = self.papers\n",
    "        \n",
    "        #If we want to focus on high cited, apply the high cited function\n",
    "        if high_cited!=False:\n",
    "            papers = get_high_cited_year(papers,high_cited,year_lims)\n",
    "        \n",
    "        #Now we create a df with total shares\n",
    "        total_shares = papers[unit].value_counts(normalize=True)\n",
    "        \n",
    "        #And nother with DL shares\n",
    "        dl_shares = pd.crosstab(papers[unit],papers['is_dl'],normalize=1)['dl']\n",
    "        \n",
    "        #Concatenate them\n",
    "        all_shares = pd.concat([total_shares,dl_shares],axis=1).sort_values(unit,ascending=True)\n",
    "        \n",
    "        #Name columns\n",
    "        all_shares.columns = ['all_papers_share','dl_papers_share']\n",
    "        \n",
    "        #store results\n",
    "        self.shares_activity = all_shares\n",
    "        \n",
    "        #Plot\n",
    "        all_shares[-top_ranking:].plot.barh(ax=ax)\n",
    "        \n",
    "        if high_cited==False:\n",
    "            title = 'Share of total and DL papers by {unit}, \\n {y0}-{y1}'.format(y0=str(year_lims[0]),y1=str(year_lims[1]),\n",
    "                                                                                unit=unit)\n",
    "        else:\n",
    "            title = 'Share of total and DL papers by {unit}, \\n {y0}-{y1} (top {q} citations in year)'.format(\n",
    "                y0=str(year_lims[0]),y1=str(year_lims[1]),q=str(100*high_cited)+'%',unit=unit)\n",
    "            \n",
    "        \n",
    "        return(self)\n",
    "    \n",
    "    \n",
    "    def concentration(self,ax,unit='country',high_cited=False):\n",
    "        '''\n",
    "        \n",
    "        This method estimates three things for the selected unit of analysis:\n",
    "            -Herfindahl for the whole interval and before/after the 2012 threshold\n",
    "            -Shares of activity by location in a table and a curve.\n",
    "            -Shares of activity by location (change)\n",
    "        \n",
    "        '''\n",
    "        \n",
    "        #This is copied and pasted from the above. TODO: refactor\n",
    "        \n",
    "        #Load papers\n",
    "        papers = self.papers\n",
    "        \n",
    "        #If we want to focus on high cited, apply the high cited function\n",
    "        if high_cited!=False:\n",
    "            papers = get_high_cited_year(papers,high_cited,[np.min(papers.year),np.max(papers.year)])\n",
    "        \n",
    "        \n",
    "        #We run the previously defined function, \n",
    "        #which turns a df of totals into a df ready to be plotted for a concentration analysis\n",
    "        conc = concentration_analysis(papers,level=unit)\n",
    "        \n",
    "        #The concentration_analysis function returns a list with two elements: herfindahl indices and shares_df for plotting\n",
    "        self.herf = conc[0]\n",
    "        \n",
    "        shares_sorted = conc[1]\n",
    "        \n",
    "        ax.plot(shares_sorted)\n",
    "        ax.legend(['dl','total'])\n",
    "        \n",
    "        #And (ugly) title\n",
    "        if high_cited==False:\n",
    "            title = 'Concentration of total and DL papers by {unit}'.format(unit=unit)\n",
    "        else:\n",
    "            title = 'Concentration of total and DL papers by {unit}, \\n (top {q} citations in year)'.format(\n",
    "                q=str(100*high_cited)+'%',unit=unit)\n",
    "        \n",
    "        ax.set_title(title,size=14)\n",
    "        \n",
    "        #Add labels\n",
    "        ax.set_xlabel('Rank')\n",
    "        ax.set_ylabel('Cumulative share of \\n activity')\n",
    "        \n",
    "    \n",
    "    def concentration_change(self,ax,unit='country',high_cited=False,threshold=2012,hline=0.75):\n",
    "        '''\n",
    "        This is a quite similar to the analysis above but splitting the papers into two groups (before and after the threshold)\n",
    "        \n",
    "        '''\n",
    "        \n",
    "        #Load papers\n",
    "        papers = self.papers\n",
    "        \n",
    "        #If we want to focus on high cited, apply the high cited function\n",
    "        if high_cited!=False:\n",
    "            papers = get_high_cited_year(papers,high_cited,[np.min(papers.year),np.max(papers.year)])\n",
    "        \n",
    "        \n",
    "        #We run the previously defined function, \n",
    "        #which turns a df of totals into a df ready to be plotted for a concentration analysis\n",
    "        #But in this case we run it twice on different subsets of the data\n",
    "        conc_t0 = concentration_analysis(papers.loc[papers['year']<threshold,:],level=unit)\n",
    "        conc_t1 = concentration_analysis(papers.loc[papers['year']>threshold,:],level=unit)\n",
    "        \n",
    "        #Store the two sets of concentration indices\n",
    "        self.herf = [conc_t0[0],conc_t1[0]]\n",
    "        \n",
    "        self.shares_shorted = [conc_t0[1],conc_t1[1]]\n",
    "        \n",
    "        shares_sorted_t0, shares_sorted_t1 = conc_t0[1],conc_t1[1]\n",
    "        \n",
    "        ax[0].plot(shares_sorted_t0)\n",
    "        ax[1].plot(shares_sorted_t1)\n",
    "        \n",
    "        #Add the legend\n",
    "        ax[0].legend(['dl','total'],loc='lower right')\n",
    "        \n",
    "        #Add titles and labels\n",
    "        ax[0].set_title('Before {t}'.format(t=threshold),size=14)\n",
    "        ax[1].set_title('After {t}'.format(t=threshold),size=14)\n",
    "        \n",
    "        ax[1].set_xlabel('Rank')\n",
    "        ax[0].set_ylabel('Cumulative share of \\n activity')\n",
    "        ax[1].set_ylabel('Cumulative share of \\n activity')\n",
    "        \n",
    "        #Add a hline indicating at what rank do we go over 50% of the observations\n",
    "        #Find the right x values\n",
    "        x_0,x_1 = [df[df['dl']>hline].index[0] for df in [shares_sorted_t0,shares_sorted_t1]]\n",
    "        \n",
    "        ax[0].hlines(y=hline,xmin=0,xmax=len(shares_sorted_t0),linestyle=':')\n",
    "        ax[0].vlines(x=x_0,ymin=0,ymax=1,linestyle=':')\n",
    "        \n",
    "        ax[1].hlines(y=hline,xmin=0,xmax=len(shares_sorted_t1),linestyle=':')\n",
    "        ax[1].vlines(x=x_1,ymin=0,ymax=1,linestyle=':')\n",
    "        \n",
    "    \n",
    "    \n",
    "    def spec_changes(self,ax,unit='country',high_cited=False,top_ranking=10,year_lims=[2007,2018],window=4):\n",
    "        '''\n",
    "        Here we compare the evolution of specialisation (relative overrepresentation of papers by country).\n",
    "        It is a linechart.\n",
    "        We add a 'window' parameter to the previous, to smooth the lines.\n",
    "        \n",
    "        '''\n",
    "        \n",
    "        #Load papers\n",
    "        papers = self.papers\n",
    "        #Focus on years of interest\n",
    "        papers = papers.loc[(papers.year > year_lims[0]) & (papers.year < year_lims[1]),:]\n",
    "        \n",
    "        #If we want to focus on high cited, apply the high cited function\n",
    "        if high_cited!=False:\n",
    "            papers = get_high_cited_year(papers,high_cited,year_lims)\n",
    "        \n",
    "        #Identify top locations\n",
    "        locations = papers[unit].value_counts()[:top_ranking].index\n",
    "        \n",
    "        #Now we estimate LQs by year and paper\n",
    "        #This estimates the LQ\n",
    "        papers_year = papers.groupby('year').apply(lambda x: create_lq_df(pd.crosstab(x[unit],\n",
    "                                                                        x['is_dl'])))\n",
    "        #Now we pivot the data\n",
    "        spec_wide = pd.pivot_table(papers_year, index='year',columns=unit,values='dl')[locations]\n",
    "        \n",
    "        #Store it\n",
    "        self.spec_place = spec_wide\n",
    "        \n",
    "        spec_wide.rolling(window=window).mean().plot(ax=ax,linewidth=3)\n",
    "        ax.legend(bbox_to_anchor=(1,1),title=unit)\n",
    "        \n",
    "        ax.hlines(y=1,xmin=year_lims[0]+4,xmax=year_lims[1]-1,linestyle=':')\n",
    "        \n",
    "        #Add titles as before. Quite convoluted\n",
    "        if high_cited==False:\n",
    "            title = 'Comparative advantage in DL by {unit}, \\n {y0}-{y1}, \\n {w}-year moving averages'.format(\n",
    "                y0=str(year_lims[0]),y1=str(year_lims[1]),unit=unit,w=window)\n",
    "        else:\n",
    "            title = 'Comparative advantage in DL by {unit}, \\n {y0}-{y1} (top {q} citations in year), \\n {w}-year moving averages'.format(\n",
    "                y0=str(year_lims[0]),y1=str(year_lims[1]),q=str(100*high_cited)+'%',unit=unit,w=window)\n",
    "        \n",
    "        \n",
    "        #Set title\n",
    "        ax.set_title(title,size=14)\n",
    "    \n",
    "        \n",
    "    def spec_thres(self,ax,unit='country',high_cited=False,top_ranking=20,year_threshold=2012):\n",
    "        \"\"\"\n",
    "        This creates a barchart comparing comparative advantages before / after a threshold year\n",
    "        \n",
    "        \"\"\"\n",
    "        \n",
    "        #Load papers\n",
    "        papers = self.papers\n",
    "        \n",
    "        #Add variable for subsetting\n",
    "        papers['threshold_year'] = ['pre_'+str(year_threshold) if y<year_threshold else 'post_'+str(year_threshold) for\n",
    "                                   y in papers['year']]\n",
    "        \n",
    "        \n",
    "        locations = papers[unit].value_counts()[:top_ranking].index\n",
    "        \n",
    "        #If we are working with highly cited papers\n",
    "        #Split into two years, apply the get_cited_papers and combine\n",
    "        if high_cited != False:\n",
    "            papers =papers.groupby('threshold_year').apply(lambda x: get_cited_papers(\n",
    "                x,'citations',high_cited)).reset_index(drop=True)\n",
    "        \n",
    "        #Now we calculate the LQs for both years.\n",
    "        lqs = papers.groupby(\n",
    "            'threshold_year').apply(lambda x: create_lq_df(pd.crosstab(x[unit],x['is_dl']))).reset_index(drop=False)\n",
    "        \n",
    "        \n",
    "        #This creates the table for plotting\n",
    "        specs_wide = pd.pivot_table(lqs,\n",
    "               index='threshold_year',columns=unit,values='dl')[locations].T.sort_values(\n",
    "            'post_'+str(year_threshold),ascending=False).plot.bar(ax=ax)\n",
    "        \n",
    "        \n",
    "        self.spec_wide = lqs\n",
    "        \n",
    "        #And the labe;s\n",
    "        ax.legend(bbox_to_anchor=(1,1),title='Period')\n",
    "        \n",
    "        ax.hlines(y=1,xmin=0,xmax=top_ranking,linestyle=':')\n",
    "        \n",
    "        #Add titles as before. Quite convoluted\n",
    "        if high_cited==False:\n",
    "            title = 'Comparative advantage in DL by {unit}, \\n before and after {y}'.format(y=str(year_threshold),\n",
    "                                                                                            unit=unit)\n",
    "        else:\n",
    "            title = 'Comparative advantage in DL by {unit}, \\n before and after {y} (top {q} citations in year)'.format(\n",
    "               y=str(year_threshold),unit=unit,q=str(100*high_cited)+'%')\n",
    "        \n",
    "        \n",
    "        #Set title\n",
    "        ax.set_title(title,size=14)        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Initialise class\n",
    "test_2 = DlPaperAnalysis_Spatial(papers_spat,papers_expansive)\n",
    "\n",
    "#Plot concentratioj\n",
    "fig,ax =plt.subplots()\n",
    "test_2.concentration(ax,unit='country',high_cited=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There is more concentration in DL than in the CS population overall"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The evolution of concentration is interesting: there has been an increase of concentration at the top (the top locations have gained importance but also an 'stretching' of the middle (a decrease in concentration lower in the distribution, consistent with the idea of a broadening of activity / increase in volatility) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Now we want to focus on changes in concentration**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/Cellar/python3/3.5.2_3/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/ipykernel_launcher.py:55: FutureWarning: Sorting because non-concatenation axis is not aligned. A future version\n",
      "of pandas will change to not sort by default.\n",
      "\n",
      "To accept the future behavior, pass 'sort=False'.\n",
      "\n",
      "To retain the current behavior and silence the warning, pass 'sort=True'.\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<__main__.DlPaperAnalysis_Spatial at 0x118a794a8>"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Visualise shares of activity by country\n",
    "fig,ax = plt.subplots(figsize=(7,5))\n",
    "\n",
    "test_2.shares(ax,unit='country',top_ranking=20,high_cited=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This chart shows that some countries such as US, China, Canada and Switzerland are overrepresented in DL while others such as France. Germany and Italy are underrepresented"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,ax = plt.subplots(figsize=(7,5))\n",
    "\n",
    "test_2.spec_changes(ax,high_cited=False,year_lims=(2006,2018))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Year on year figures are quite noisy. They suggest quite a lot of volatility in DL activity although we would need to compare to another field in order to establish this for sure. This is to be done.\n",
    "\n",
    "It would be interesting to understand what happened with Australia and China at the beginning of the period\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjgAAAFgCAYAAAC2QAPxAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMi4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvhp/UCwAAIABJREFUeJzs3Xl4XVW5x/Hvj1KoyCyDXFpsZSwySplRgwJShaICUgYFRKtSFPQCgiijXhG4KMogZZ7BKkhBLJNSUEDaQimTVagMrXIZhUIRaXnvH2uf5DRN0mQPzcnJ7/M8eZK9zzlvVpKTc9Ze613vUkRgZmZm1kyW6O0GmJmZmZXNHRwzMzNrOu7gmJmZWdNxB8fMzMyajjs4ZmZm1nTcwTEzM7Om4w6OmZmZNR13cMzMzKzpuINjZmZmTWfJqgJLGgJcDqwOBDAuIs5qdx8BZwGfAuYCB0XEg9ltBwLfy+76g4i4bFHfc5VVVomhQ4eW9jOYmZlZY5k6depLEbHqou5XWQcHmAf8d0Q8KGk5YKqk2yPi8br7jATWzT62Bs4Dtpa0MnACMILUOZoqaUJEvNrVNxw6dChTpkyp4mcxMzOzBiDpme7cr7Ipqoj4Z200JiLmAE8Aa7a72x7A5ZHcD6woaQ3gk8DtEfFK1qm5Hdi1qraamZlZc1ksOTiShgKbA39ud9OawHN1x7Oyc52dNzMzM1ukyjs4kpYFfg0cERGvVxB/jKQpkqa8+OKLZYc3MzOzPqjKHBwkDSR1bq6KiOs7uMtsYEjd8eDs3Gygpd35uzr6HhExDhgHMGLEiCjcaDMzs2565513mDVrFv/+9797uylNZ9CgQQwePJiBAwfmenyVq6gEXAQ8ERFndnK3CcBhkq4lJRm/FhH/lHQr8D+SVsrutwtwbFVtNTMzy2PWrFkst9xyDB06lPS2Z2WICF5++WVmzZrFsGHDcsWocgRne+ALwCOSpmXnvgusBRARvwBuIS0Rf5K0TPzg7LZXJJ0CTM4ed3JEvFJhW83MzHrs3//+tzs3FZDE+973PoqknlTWwYmIPwJd/sUjIoCxndx2MXBxBU0zMzMrjTs31Sj6e3UlYzMzM2s6lSYZm5n1eyeu0MG51xZ/O2yxGHrMb0uN9/Spny41Xn/iERwzM7N+7je/+Q2PP/54l/c56qij2GCDDdhkk0347Gc/y7/+9a/W2370ox+xzjrrsP7663Prrbe2nv/Sl77EaqutxkYbbdTtWGVxB8fMzKyf604HZ+edd+bRRx9l+vTprLfeevzoRz8C4PHHH+faa6/lscceY+LEiRx66KHMnz8fgIMOOoiJEyd2O1aZ3MExMzPrw55++mk22GAD9t9/f4YPH85ee+3F3LlzufPOO9l8883ZeOON+dKXvsTbb78NwDHHHMOGG27IJptswpFHHsm9997LhAkTOOqoo9hss8146qmnOvw+u+yyC0sumTJbttlmG2bNmgXAjTfeyOjRo1l66aUZNmwY66yzDg888AAAH/3oR1l55ZW7HatM7uCYmZn1cTNmzODQQw/liSeeYPnll+fMM8/koIMO4rrrruORRx5h3rx5nHfeebz88svccMMNPPbYY0yfPp3vfe97bLfddowaNYrTTz+dadOmsfbaay/y+1188cWMHDkSgNmzZzNkSFvN3sGDBzN79uxut70+VpncwTEzM+vjhgwZwvbbbw/AAQccwJ133smwYcNYb731ADjwwAO5++67WWGFFRg0aBCHHHII119/Pcsss0yPv9cPf/hDllxySfbff//C7S4zVnvu4JiZmfVx7WvGrLjiih3eb8kll+SBBx5gr7324uabb2bXXXft0fe59NJLufnmm7nqqqtav+eaa67Jc8+17Y89a9Ys1lxz0ftjdxSrTF4mbmZmVpLeWtb97LPPct9997Htttty9dVXM2LECM4//3yefPJJ1llnHa644go+9rGP8cYbbzB37lw+9alPsf322/PBD34QgOWWW445c+Z0+T0mTpzIaaedxqRJkxYY+Rk1ahT77bcf3/72t/nHP/7B3/72N7baaqtcscrkERwzM7M+bv311+ecc85h+PDhvPrqq3zrW9/ikksuYe+992bjjTdmiSWW4Gtf+xpz5sxht912Y5NNNmGHHXbgzDPTVpGjR4/m9NNPZ/PNN+80yfiwww5jzpw57Lzzzmy22WZ87WtfA+BDH/oQn//859lwww3ZddddOeeccxgwYAAA++67L9tuuy0zZsxg8ODBXHTRRV3GKpPSbgnNYcSIETFlypTeboaZWRsX+mtqTzzxBMOHD+/VNjz99NPstttuPProo73ajip09PuVNDUiRizqsR7BMTMzs6bjHBwzM7M+bOjQoaWO3owdO5Y//elPC5w7/PDDOfjgg0v7HouDOzhmZmbW6pxzzuntJpTCU1RmZmbWdNzBMTMzs6ZT2RSVpIuB3YAXImKjDm4/CqiVLlwSGA6sGhGvSHoamAPMB+Z1J1vazMzMrKbKHJxLgbOByzu6MSJOB04HkLQ78K2IeKXuLjtGxEsVts/MzKxcHZUFKBTPJQXyqmyKKiLuBl5Z5B2TfYFrqmqLmZmZdd+ZZ57ZuuP4Jz7xCZ555pnW2y677DLWXXdd1l13XS677LLW88cddxxDhgxh2WWX7XasKvV6Do6kZYBdgV/XnQ7gNklTJY3pnZaZmZk1h/nz5/fo/ptvvjlTpkxh+vTp7LXXXhx99NEAvPLKK5x00kn8+c9/5oEHHuCkk07i1VdfBWD33XfngQce6HasqvV6BwfYHfhTu+mpHSLiw8BIYKykj3b2YEljJE2RNOXFF1+suq1mZmYN5emnn2aDDTZg//33Z/jw4ey1117MnTuXoUOH8p3vfIcPf/jDjB8/nqeeeopdd92VLbbYgo985CP85S9/6TTmjjvu2LpH1DbbbMOsWbMAuPXWW9l5551ZeeWVWWmlldh5552ZOHFi6/3WWGONbseqWiN0cEbTbnoqImZnn18AbgA63bUrIsZFxIiIGLHqqqtW2lAzM7NGNGPGDA499FCeeOIJll9+ec4991wA3ve+9/Hggw8yevRoxowZw89//nOmTp3KGWecwaGHHtqt2BdddBEjR44EYPbs2QwZMqT1tsGDBzN79uxut7M+VtV6tdCfpBWAjwEH1J17L7BERMzJvt4FOLmXmmhmZtbwhgwZwvbbbw/AAQccwM9+9jMA9tlnHwDeeOMN7r33Xvbee+/Wx7z99tuLjHvllVcyZcoUJk2aVLiNZcbqjiqXiV8DtACrSJoFnAAMBIiIX2R3+yxwW0S8WffQ1YEbJNXad3VETKyqnWZmZn1d9p650PF73/teAN59911WXHFFpk2b1u2Yd9xxBz/84Q+ZNGkSSy+9NABrrrkmd911V+t9Zs2aRUtLS65YVausgxMR+3bjPpeSlpPXn5sJbFpNq8zMzCrUS8u6n332We677z623XZbrr76anbYYQceeuih1tuXX355hg0bxvjx49l7772JCKZPn86mm3b8dvvQQw/x1a9+lYkTJ7Laaqu1nv/kJz/Jd7/73dbE4ttuu40f/ehHXbats1hVa4QcHDMzMytg/fXX55xzzmH48OG8+uqrfP3rX1/oPldddRUXXXQRm266KR/60Ie48cYbO4131FFH8cYbb7D33nuz2WabMWrUKABWXnllvv/977Pllluy5ZZbcvzxx7PyyisDcPTRRzN48GDmzp3L4MGDOfHEE7uMVTVFxGL5RovDiBEjYsqUKb3dDDOzNh0VfnPxtqbxxBNPMHz48F5tw9NPP81uu+1W6o7ijaKj36+kqd3Z4cAjOGZmZtZ0enUVlZmZmRUzdOjQ3KM3P/zhDxk/fvwC5/bee2+OO+64MprWq9zBMTMzKyAiFlrF1Fccd9xxDduZKZpC4ykqMzOznAYNGsTLL79c+M3YFhQRvPzyywwaNCh3DI/g9BdOdDQzK93gwYOZNWsW3iqofIMGDWLw4MG5H+8OjpmZWU4DBw5k2LBhvd0M64CnqMzMzKzpuINjZmZmTccdHDMzM2s67uCYmZlZ03EHx8zMzJqOOzhmZmbWdNzBMTMzs6bjDo6ZmZk1nco6OJIulvSCpA53AJPUIuk1SdOyj+PrbttV0gxJT0o6pqo2mpmZWXOqcgTnUmDXRdznnojYLPs4GUDSAOAcYCSwIbCvpA0rbKeZmZk1mcq2aoiIuyUNzfHQrYAnI2ImgKRrgT2Ax8trnZmZWT/SD/cj7O0cnG0lPSzpd5I+lJ1bE3iu7j6zsnMdkjRG0hRJU7zZmZmZmUHvdnAeBD4QEZsCPwd+kydIRIyLiBERMWLVVVcttYFmZmbWN/VaByciXo+IN7KvbwEGSloFmA0Mqbvr4OycmZmZWbf0WgdH0vslKft6q6wtLwOTgXUlDZO0FDAamNBb7TQzM7O+p7IkY0nXAC3AKpJmAScAAwEi4hfAXsDXJc0D3gJGR0QA8yQdBtwKDAAujojHqmqnmfVh/TBx0sy6p8pVVPsu4vazgbM7ue0W4JYq2mVmZmbNr7dXUZmZmZmVrrIRnEYx9JjfLnTu6VM/3QstMTMzs8XFIzhmZmbWdNzBMTMzs6bjDo6ZmZk1HXdwzMzMrOk0fZKxmZktZq5PZA3AIzhmZmbWdNzBMTMzs6bjDo6ZmZk1HXdwzMzMrOm4g2NmZmZNxx0cMzMzazpeJt5D3tvKzMys8bmDY82rv9Xi6Ojnheb+mc3MOuEpKjMzM2s6lXVwJF0s6QVJj3Zy+/6Spkt6RNK9kjatu+3p7Pw0SVOqaqOZmZk1pypHcC4Fdu3i9r8DH4uIjYFTgHHtbt8xIjaLiBEVtc/MzMyaVGU5OBFxt6ShXdx+b93h/cDgqtpiZmZm/csiOziSrgAOi4jXsuMPABdHxCdKbMchwO/qjgO4TVIA50dE+9Gd+vaNAcYArLXWWiU2yayd/pa0bGbWh3VnBOePwJ8lfRtYEzgK+O+yGiBpR1IHZ4e60ztExGxJqwG3S/pLRNzd0eOzzs84gBEjRkRZ7TIzM7O+a5EdnIg4X9JjwB+Al4DNI+L5Mr65pE2AC4GREfFy3fecnX1+QdINwFZAhx2cvs51dczMzMrXnSmqLwDfB74IbALcIungiHi4yDeWtBZwPfCFiPhr3fn3AktExJzs612Ak4t8r/6mw07ToF5oiJmZWS/pzhTVnqQpoxeAa7IRlcuAzbp6kKRrgBZgFUmzgBOAgQAR8QvgeOB9wLmSAOZlK6ZWB27Izi0JXB0RE3v+o1lZPMpkZmZ9TXemqD7T7vgBSVt143H7LuL2LwNf7uD8TGDThR9hZmZm1j2LrIMjaT1Jd9YK9mV5M0dX3jIzMzOznLpT6O8C4FjgHYCImA6MrrJRZmZmZkV0p4OzTEQ80O7cvCoaY2ZmZlaG7iQZvyRpbVLxPSTtBfyz0lZZU3PSspmZVa07HZyxpEJ6G0iaTdpD6oBKW2VmZmZWQHdWUc0EdqqvT1N9s8zMzMzy67SDk23N0NF5ACLizIraZGZmZlZIVyM4y2Wf1we2BCZkx7sD7ZOOzczMzBpGpx2ciDgJQNLdwIdrU1OSTgQWzhI1MzMzaxDdWSa+OvCfuuP/ZOfMzMzMGlJ3VlFdDjyQ7UEF8BnSXlRmZmZmDak7q6h+KGkisEN26uCIeKjaZpmZmZnl150RHIBppOJ+SwJIWisinq2sVWZmZmYFLLKDI+kbwAnA/wHzAZGqGm9SbdPMzMzM8unOCM7hwPoR8XLVjTHLo6OtHwCeHrSYG2JmZg2jOx2c54DXqm7IYnXiCh2ca64f0czMrD/rTgdnJnCXpN8Cb9dOdqeSsaSLgd2AFyJiow5uF3AW8ClgLnBQRDyY3XYg8L3srj+ICK/camYN1unscENQjwiZmfUZ3amD8yxwO7AUqbpx7aM7LgV27eL2kcC62ccY4DwASSuT8n62BrYCTpC0Uje/p5mZmfVzi+zgRMRJHX10J3hE3A280sVd9gAuj+R+YEVJawCfBG6PiFci4lVSB6urjlKPtFz6JpdOS7UL35kftFz6JldeeSUAc+fOpaWlheuuuw6A1157jZaWFq6//noA5s99jeevPoa5T/45Hb/xKi0tLUycOBGA5557jpaWFu644w4AZs6cSUtLC5MmTQJgxowZtLS0cO+99wLwnxef5vmrj+Htf/41Hf9fuv+0adMAmDx5Mi0tLTz66KMA3HvvvbS0tDBjxgwAJk2aREtLCzNnzgTgjjvu4Pmrj2He6y8C8NbMqTx/9TE8/8a7ANw04x1aLn2Tl+am4+uvv56WlhZeey2Nllx33XW0tLQwd+5cAK688kqev/oYYv48AN54JMWvueCCC9hpp51aj88991xGjhzZenzWWWcxatSo1uMzzjiDF2/4n9bj1+4fz4s3/rj1+JRJb3PA9W+1Hh9//PEcfPDBrcfHHnssY8aMaT0+8sgjefm281qPX7ljHK/cMa71eOxv3+LI2/7dejxmzBiOPfbY1uODDz6Y448/vvX4gAMO4JRTTmk9fvHGH/Pa/eNbj/f85VzOuLd1IJNRo0Zx1llntR6PHDmSc889t/V4p5124oILLmg9bmlp4dJLLwXgnXfeoaWlpdvPvZdeeomWlhZuuukmAJ5//vkFn3uvvUvLpW9yx8z0t5r5ajru7Ln36KOP0tLSwuTJkwGYNm1a4edeS0sLzz33HAATJ06kpaWF559/HoCbbrqJlpYWXnrpJaB7z72WlhbeeecdAC699FJaWlpaf5cXXHABO13+ZuvxuZP/w8ir2o47eu7tueeercennnoqo0ePbj0+5ZRTOOCAA1qPu/PcGzt2bOvxEUccwRFHHNF6PHbsWI488sjW4zE3vcWxd7Q9Fxf13Bs9ejSnnnpq6/Gee+7JGWec0XrcUM+99q97tefe0+m5OOOl+c333Ovh616vPvfGjFnwuXfjWxz/h7bjvvbc666uNtv8aUQcIekm0qqpBUTEqA4e1lNrknJ8amZl5zo731E7x5BGf1hrrbVKaJKZmZn1dYpYqO+SbpC2iIipkj7W0e0RMalb30AaCtzcSQ7OzcCpEfHH7PhO4DtACzAoIn6Qnf8+8FZEnNE+Rr0RI0bElClTFjjXcS7Ffgs/uJv5Hh3GO/XT3Xrs4ojXacxG/5lLbl8VMYvEWyw6ymOCxmpj2Rosd6tDfaGNZeuPP3Oja6K/iaSpETFiUffrarPNqdnnbnVkcpoNDKk7Hpydm03q5NSfv6vCdpiZmVkT6U6ScZUmAF9Usg3wWkT8E7gV2EXSSlly8S7ZOTMzM7NF6u5WDblIuoY0ErOKpFmklVEDASLiF8AtpCXiT5KWiR+c3faKpFOAyVmokyOiq2RlMzMzs1Y97uBIGgTsHhHjF3XfiNh3EbcHMLaT2y4GLu5p+8zMzMy6NUUlaYCkT0m6AngG2KfaZpmZmZnl1+UITraCaj/SNNIDwPbAsIiYuxjaZmZmZpZLV3VwZpGqGJ8HHBkRcyT93Z0bMzMza3RdjeD8CvgMaTpqvqQb6aDgn5ktWhX1jszMrHOd5uBExBHAMOB/SSuhZgCrSvq8pGUXT/PMzMzMeq7LHJxsldMfgD9IGkjaI2pf4Fxgleqb1081UcVJMzOz3tDpCI6kVSVtWDuOiHci4mbgf4APL47GmZmZmeXR1QjOz0kjNe2tDBxHWl1lZr2g472yKojpPCEz66O66uCsExF3tz8ZEfdIOq/CNplZo/B0qZn1UV11cJbr4raBZTfEzMzMMr64KKyrDs6Tkj4VEbfUn5Q0EphZbbOs4fmfz8zMGlhXHZwjgN9K+jwwNTs3AtgW2K3qhplZ31Z2Tk8VeUdm1ry6qoPzN2BjYBIwNPuYBGwSEX9dHI0zMzMzy2NRdXDeBi6pPydpCUn7R8RVlbbMzMzMLKeu9qJaHhgLrAncCNyRHR8JPAy4g2NmfZqXxps1r65GcK4AXgXuA75Cqn0j4DMRMW0xtM3MrE9xnpBZ4+iqg/PBiNgYQNKFwD+BtSLi390NLmlX4CxgAHBhRJza7vafADtmh8sAq0XEitlt84FHstuejYhR3f2+Zn2CV6LZIniEySy/rjo479S+iIj5kmb1sHMzADgH2BmYBUyWNCEiHq+L+626+38D2LwuxFsRsVl3v5+ZWSnc8TRrCl11cDaV9Hr2tYD3ZMci7cO5/CJibwU8GREzASRdC+wBPN7J/fcFTuh2y83MrEc6GhGCfjgq1FEnFtyRbTKddnAiYkDB2GsCz9UdzwK27uiOkj4ADAN+X3d6kKQpwDzg1Ij4TSePHQOMAVhrrbUKNtnMzHrCeUf9WIOPdnZaB2cxGw38KiLm1537QESMIG3q+VNJa3f0wIgYFxEjImLEqquuujjaamZmZg2uyzo4Bc0GhtQdD87OdWQ0aQl6q4iYnX2eKekuUn7OU+U308zMGoUTq60sVY7gTAbWlTRM0lKkTsyE9neStAGwEmk5eu3cSpKWzr5eBdieznN3zMzMzBZQ2QhORMyTdBhwK2mZ+MUR8Zikk4EpEVHr7IwGro2IqHv4cOB8Se+SOmGn1q++MjMz6w7nCPVfVU5Rke1Efku7c8e3Oz6xg8fdS9oHy8yaSYMnJfZb/rtYE2qUJGMzMzOz0lQ6gmNmZtZsnAjdN3gEx8zMzJqOR3DMzMx6kROhq+ERHDMzM2s67uCYmZlZ0/EUlZmZWRPxlFfiERwzMzNrOu7gmJmZWdNxB8fMzMyajjs4ZmZm1nScZGxmZlaU9/NqOB7BMTMzs6bjEZwyuOduZouLX2/MusUjOGZmZtZ03MExMzOzplNpB0fSrpJmSHpS0jEd3H6QpBclTcs+vlx324GS/pZ9HFhlO83MzKy5VJaDI2kAcA6wMzALmCxpQkQ83u6u10XEYe0euzJwAjACCGBq9thXq2qvmZmZdawvbv9QZZLxVsCTETETQNK1wB5A+w5ORz4J3B4Rr2SPvR3YFbimoraamZnZYtJhh+nUT5f6PaqcoloTeK7ueFZ2rr09JU2X9CtJQ3r4WCSNkTRF0pQXX3yxjHabmZlZH9fbScY3AUMjYhPgduCyngaIiHERMSIiRqy66qqlN9DMzMz6nio7OLOBIXXHg7NzrSLi5Yh4Ozu8ENiiu481MzMz60yVHZzJwLqShklaChgNTKi/g6Q16g5HAU9kX98K7CJpJUkrAbtk58zMzMwWqbIk44iYJ+kwUsdkAHBxRDwm6WRgSkRMAL4paRQwD3gFOCh77CuSTiF1kgBOriUcm5mZmS1KpVs1RMQtwC3tzh1f9/WxwLGdPPZi4OIq22dmZn2At6ewHHo7ydjMzMysdO7gmJmZWdNxB8fMzMyajjs4ZmZm1nTcwTEzM7Om4w6OmZmZNR13cMzMzKzpuINjZmZmTccdHDMzM2s67uCYmZlZ03EHx8zMzJqOOzhmZmbWdNzBMTMzs6bjDo6ZmZk1HXdwzMzMrOm4g2NmZmZNZ8kqg0vaFTgLGABcGBGntrv928CXgXnAi8CXIuKZ7Lb5wCPZXZ+NiFFVttXMzMx60YkrdHDutdzhKuvgSBoAnAPsDMwCJkuaEBGP193tIWBERMyV9HXgNGCf7La3ImKzqtpnZmZmzavKKaqtgCcjYmZE/Ae4Ftij/g4R8YeImJsd3g8MrrA9ZmZm1k9U2cFZE3iu7nhWdq4zhwC/qzseJGmKpPslfaazB0kak91vyosvvlisxWZmZtYUKs3B6S5JBwAjgI/Vnf5ARMyW9EHg95IeiYin2j82IsYB4wBGjBgRi6XBZmZm1tCqHMGZDQypOx6cnVuApJ2A44BREfF27XxEzM4+zwTuAjavsK1mZmbWRKrs4EwG1pU0TNJSwGhgQv0dJG0OnE/q3LxQd34lSUtnX68CbA/UJyebmZmZdaqyKaqImCfpMOBW0jLxiyPiMUknA1MiYgJwOrAsMF4StC0HHw6cL+ldUifs1Harr8zMzMw6VWkOTkTcAtzS7tzxdV/v1Mnj7gU2rrJtZmZm1rxcydjMzMyajjs4ZmZm1nTcwTEzM7Om4w6OmZmZNR13cMzMzKzpuINjZmZmTccdHDMzM2s67uCYmZlZ03EHx8zMzJqOOzhmZmbWdNzBMTMzs6bjDo6ZmZk1HXdwzMzMrOm4g2NmZmZNxx0cMzMzazru4JiZmVnTqbSDI2lXSTMkPSnpmA5uX1rSddntf5Y0tO62Y7PzMyR9ssp2mpmZWXOprIMjaQBwDjAS2BDYV9KG7e52CPBqRKwD/AT4cfbYDYHRwIeAXYFzs3hmZmZmi1TlCM5WwJMRMTMi/gNcC+zR7j57AJdlX/8K+IQkZeevjYi3I+LvwJNZPDMzM7NFUkRUE1jaC9g1Ir6cHX8B2DoiDqu7z6PZfWZlx08BWwMnAvdHxJXZ+YuA30XErzr4PmOAMdnh+sCMbjRvFeClnD9aX4xXRcxGj1dFzP4Wr4qYjR6vipiNHq+KmP0tXhUxGz1eFTG7G+8DEbHqou60ZPH29K6IGAeM68ljJE2JiBFltaHR41URs9HjVRGzv8WrImajx6siZqPHqyJmf4tXRcxGj1dFzLLjVTlFNRsYUnc8ODvX4X0kLQmsALzczceamZmZdajKDs5kYF1JwyQtRUoantDuPhOAA7Ov9wJ+H2nObAIwOltlNQxYF3igwraamZlZE6lsiioi5kk6DLgVGABcHBGPSToZmBIRE4CLgCskPQm8QuoEkd3vl8DjwDxgbETML7F5PZrSaoJ4VcRs9HhVxOxv8aqI2ejxqojZ6PGqiNnf4lURs9HjVRGz1HiVJRmbmZmZ9RZXMjYzM7Om4w6OmZmZNR13cMzMzKzp9Pk6OI1C0m4RcXNvt8PKk20P8mlgKHX/KxFxZm+1yay/kLRxRDzS2+2wvqtfdHAkrQp8h7Qn1qDa+Yj4eInfZksgdwdH0nrAecDqEbGRpE2AURHxgx7G+VxXt0fE9XnbmMVfjQV/h8/mjLMu8CMW/pt8sEDbBpH2N/tQu5hfyhnyJuDfwCPAu3nblbVt5a5uj4hXcsbdHpgWEW9KOgD4MHBWRDyTI9a3F9HGXB07Sf9Ltooyz+PbxdqeVOn8A6SbAt2SAAAgAElEQVTXL6Wm5X/eZHFXBb7Cwp3ZvM8dsv/h9vF6/P9XwfO6PvYOwLoRcUn2O1g22x6nEZwraWngUuCqiHitl9vToawMynrZ4YyIeKdArNLfqyS9B1grIrpT5X9RsZYG9mTh5/XJRWNXoV90cICrgOtIV+NfI9XeebHMbxARJxQMcQFwFHB+Fm+6pKuBHnVwgN2zz6sB2wG/z453BO4FcnVwJI0C/hf4L+AF0hvME6QX3TwuAU4gbbK6I3AwxadMrwD+AnwSOBnYP2tjXoMjYpOCbaqZCgTpDbm9APK+QZ8HbCppU+C/gQuBy4GP5Yi1XM42LMoTwLismOclwDUF3qwuAr5F+n2WWTriRuAe4I4y4kq6GNgEeIy2znGQ7/+v7Od1rY0nACNIW9xcAgwErgS2zxHrc6TNklcjPcdrHc/l87YvIj6SXQh9CZgq6QHgkoi4PU+8ii6qWkj7KT5N+pmHSDowIu7OGbLU9ypJuwNnAEsBwyRtBpwcEaNyhrwReI30//d23nZlbXuE9D/RoVJeeyOi6T+Aqdnn6XXnJpcYf2fg9oIxJmefH6o7N61AvNuANeqO1wBuLRDvYeB9tfaROiUXlfA3eaT9uQIxa22bnn0eSNrTLG+8HwO7lPU8qeIDeDD7fDxwSP25RvsgvZGeCjwDXA3smCPGnytqW+7/tU7iPV5irFKf1/U/M+lNuf41Z3rOWE8Cwyv62wwgjRrMJnXs/gJ8LkecPwKfAKaTLtBOJL3ZF2nbVGD9uuP1iryOlf1elbVvhXZ/40cKxHu0xL/rB7KP07KPjbOPU4FTy/ge/SXJuDZk+E9Jn5a0OdDllEFHJH1c0l8lvSHpSkkbS5pC+oOcV7CNL0lam6xHm21W+s8C8YZERP3j/w9Yq0C8dyLiZWAJSUtExB9IV395vS1pCeBvkg6T9Flg2QLxoO3v/C9JG5H+sVcrEO9+4AZJb0l6XdIcSa/nCSRpg+zzhzv6KNDGOZKOBQ4Afpv9TgcWiIek9STdmW2Gi6RNJH2vYMwBwAbZx0ukDvO3JV3bw1B/kHS6pG1L+v3V3CzpUyXEqblP0oYlxSr7eV3zn0jvNLXXnPcWiPV/EVF4VKle9rz7CalT83Fg94gYnn39kxwh3xMRd5Lqvz0TESeSRkqKGBh1Uz8R8VeK/f+V8l5VHy8WHi0tUvzuXkkbF3h8WyPS3+AZYOeIODoiHsk+jgF2KeN79Jcpqh9IWoE0hP9zYHnSMHdP/S9p5/L7gJHZ52Mi4uwS2jiWVMVxA0mzgb+ThqLzulPSrcA12fE+pOH3vP4laVngbuAqSS8AbxaIdziwDPBN4BTSiNCBXT5i0cZJWgn4Pmm7j2VJIxt5nQlsS7riKVoR89uk587/dnBbkF6089gH2I80evO8pLWA03PGqilruhSA7E1qd+BO4H8iorbtyo8l9TQvYOvsc33nusjvr+Zw4LuS3ia9yRSdYrmc1Ml5njSUX4uXZ9i97Od1zS8lnQ+sKOkrpKmgC3LGmiLpOuA31E1dRLGcv5+TpiS/GxFv1cX8R84O9wIXVaQRoaIXVVMkXUia2oP0mj2lQLyy3qtqHpO0HzAgm6L7JilVIa8dgIMk/Z3iz+saSdo+Iv6UHWxHSSu8Xcm4ByQ9GBEfrjueERHrlxB3CWCviPhldhW1RETMKSHu54CPZId3R8QNBWK9l5RwK9I/8QqkxL+Xi7azUUm6G2iJiEIJxn2NpMkRsaWkhyJi8+zctIjYLGe8g4FfRsRCHWJJK3RwhdnnKW0/823aJahHjuTvKknamXS1LNIUdt78lks6OB1RQiJ0WSRtSRoNWpF0UbUCcFpE3F8g5tKki9MdslP3AOdGRKH8lLJIWgY4jrYRkVuBH0TEv3PG+0BH54s8ryVtAVxM+nsIeBX4UkQ8mDdma+z+0MEpa4WEpJnAkXWnTidd6dbi5b5aUQVb2TcySbcDe0fEv7LjlYBrI+KTOWIdEBFXqpNVQJF/9c+lpOTf37HgVWnuZeKSngJOj4hf1J27OSJ262GcOXSdoJc7uVPS74DDgPER8eFsuvSQiBhZIOaatK18qrUxVyKmpE+z8Iqiwqs4sufguu3i5m3jfRGxbcH2VPK8ros/DPhn7c1OabXN6hHxdJG4RXWRfFrGaEGpahd+ke2VmE3FLh0Rc3sY5+iIOE3Sz+ngZ4+Ib5bS4BKoopV32cgVZV7w9JcpqrJWSEyibZUSpOma2nHeFRI1d0g6kpRB33qlG/mXD5eyqqHCN9JVap2bLM6rSkvQ86jlDpS9Cujv2cdS2UcZ3gF2lLQ18NWI+A+wZk+DRMRyAJJOIeVqXUHb6NoaBdvY0XTpAXmDSTqVtJHu47T9/wXp/6ensX5BmtrckbRibC/ggS4f1L24XyZNUw0mJd9uQ5qCzjv19VA2rXcT+adsqnpe14wnrbSsmZ+d27K7ASp6Y+5RZ39RJP00Io6QdBMdtzHviiJI0647AW9kx+8hLfDYrtNHdKyWv1RkemshZV5IZo8vbeVdXcwFlp5LaaFpGRct/aWDs0xEfKdokIg4uIzGdGKf7PPY+m9J/uXDp5GS8gol/lX4RvqupLUiq6OTDX3mGk6MiFquyEkF2tNR3JMAstwjIuKNrh/RLXMjYh9JRwP3SNqbYkl/oyJi07rj8yQ9TIEcjYiYCexU4nTpZ0krTcoYtt8uIjaRND0iTlKqsfO7EuIeTnpjvz8idlRKCv+fAvHeQ+rY1CdL9ugiKCLOz0YEXo+IPEm1i7Jk1sGufb//KNV06YnS35grmMa7Ivt8RslxAQbVvy5ExBvZtFCPRMRN2efLymwc5V5IQvpf3hx4MIv3D0lFO+ClLT1vr790cG6W9KmIuKWqbyDpw0XmDCNiWJntofxVDWW/kR4H/FHSJFKH6SOkJNwek/Szrm7PO7ybrVi5gmwVg6SXgC9GsYJ1ytp0mqQHSVd7RVZJvClpf+Ba0hvovhRL/k6NrJsGKuGKaibpSq+MF69asulcSf8FvEzxEStI0wz/loSkpSPiL5Jy59eVdTEUEfMl7Uu+VUOL8qKkURExAUDSHqQVbj1pX1VvzEjahpRoO5w0gjoAeLOno8YRMTX7PKku9kqklabTCzbzzfrX/iyf5K1FPGYhnY0u1RQYZSrtQjLzn4gISWWsvKsZHBG7lhBnIf2lg1P2ComOfJ2U55OLpIFZjI9mp+4Czo/8VTHLXtVQ6htpRExUWt67TXbqiIjo0Ytrnal527EI44BvR1oSXyvqdQE9H36u19ohjIg7JO0CHFQg3n7AWdlHAH/KzuVWwTTQXGCapDtZ8LmYp+N5s6QVSflvD5J+5rwrf+rNyuL+Brhd0qukej25ZEm3HU2H5Em6/ZOks1l4+rpoEubXSCsizya9Jj4HfDFPIFVTLf5s0tTmeNK0yBdpqxicp413AaNI73tTgRck/SkiuqzgvQhHAOMl/YP0O3w/baPxPVEbXfpcFqO2KmtfUomPvEq7kMyUufKu5l5VtC1Hv0gy7guUlhoOJFXFBPgCMD8ivpwzXqmrGiQNJb2Jbk/bG+kRPU1IlLRBdnXcYe2SMjLnyyLp4XajVh2eyxG3tGTWKmTTP5vUfV4W+F1EfGSRD+44XofL/4te9Wdz94PKTErM4n6MtKJjYv0UTg9j7Fl3OIg0tP+PPJ06SX/o4HQU7DzUxy88BSvpNlIH7EjqKvAWSQ1QtvCi9jzMzrWu7MsR76GI2DzLtxoSESfUxy7QzoGknBQovlXDQotNOjrXw5ir0HYheX+BC8lavFJW3tXFexxYh5TrV9bSc6DJR3AWx5upUnG+/YDREZF32wKALdu9cf4+mwLKpex8oawjs0cJoaqqB1PFVeRMSd+nbQ7/ANJ0S25lJ7Oqgj2USOUAoKRpoDKnL5T2ZTqUtCw3SFen50XOZa9ZzAHAYxGxASw4lZFXRPy63fe4hlRJN49Dsryo+niF9t7KYpSZ3Pm+iLhI0uHZ72+SpMkFmzg3ywmaJuk0Ug5gkfooS0paA/g8aWSjMEljSeUyakUxV5K0b0ScmzPkeyV9sPb3VlrplnsaSOmPuivwwYg4WdJakraKtlpUPZZ1aAp1atrJvTpzUZq6g0NFb6bZi36twNrGpP1NRudsY818SWtHxFPZ9/ggBVZ8qeQN+sqKFxFjlOr+fC+ywk4lKnvPsS8BJ9GWGHpPdq6IspNZS91DKXNTmdNAKncPoMuBOaTcDEj/g1cAe+dtX5bnMqM+V6EC65K/+vCvSJuo1hsPbFGoReUmdy5QgRf4B8VyyyCNYi9BKlnwLWAIaQonr5NJdWD+GBGTs9fYvxVs41ci4pzaQZbE+xUgbwfnW8BdSiVJRCqt8NUC7TuXVIfp46Sffw7wa3qwUg6qLUtRSypXu42cSxEl7SvRHz5InaU/AH8lVXXdBPh7SbE/ATxLyr2ZRNq8rcd79dTFG08qZvUU6Y3+NtIu040S76G8j+0iZqV7jpXUxtqeY9NI9TIgjR7kjVf2HkpLkFYq1Y6XBlYoGLO0PYDoYI+njs7liHs36cX/TlK14AnAhALx5gCv133+K7BnD2NsQBpheYr0xl77OKjIc6Yufpn7Cu1GmtbbKHuNnEpamFAk5uHdOdebH6RCjqo7HlD0b5P9z22afSxdMFZtr7r6vageLhDvFNII6nKkKstfz/u/XBdzFKmj+SZpmurdMp7fEdH0IzitlMo/D2XBYfzLexjmbNJ0wn4RMSWLW0oSU0TcmV3p1s/lFrmqWici9pa0R0RcplST454GindnlqdwfWTP8hKUchVZ4YoGKDmZlZJXCEbEu5LOIS0FJXsOFr26f0/2/Fakq7UTJU0l3wq8ByVtE1n1WaV6QmUsUf5+CTFaRVZeoaD1SR2HFVmw/tYcCixoqFNacmdE3Jx9+RopOb0MB5Ly/uod1MG5bsmmuX5AWuU0kXSB+q2IuLLLB3ZtInBdlngLabRlYoF4kEbmhpLeqzaVlOe9quadbAq2tuppVeoqa+dQelkKUqdpG+COSDlSO1Kg7la9ftHBkXQFsDbpqrm+0FhPnzRrkIbC/1fS+4FfUnBjw7o2ts8tuEfSLyJ/bkH7Dfqep9gGfWXH+yppCnG+pLcoZ2VbWfu4VLWigYj4bPbliVny6AoUe0GsYoVg2Z3PMvcA2oL0xlybSloLmKGs+m3kTEyMEvJuoNy8v4i4EbhR0rYRcV8Z7WuntH2Fsumes0h7t71LuhD8VrTLHepmrH1JU4/DJE2ou2k5IFfh08wuEXG00sa+T5P+v++m7f87j++QXsu+nh3fTlp5mEuJ71U1PwNuAFaX9EPSisgiG+dWUZbinYh4WVLrRs6SflowJtBPVlFJegLYsMSRAiQNJuXh7EtKArshIr5bIN4vSVdmtX+2/YAVIyJXbkGWzPpr0lXKJWQb9EXdFgG9Ga9s2VXKN6PEgmhlr2hon8zaqLL59vcC82jbfyx3p0kl7gGkTvbCqYkeFonrIrcgb+XvcZHyzEpb+VTRyEOnv8ue/g6zWPcD59C2ue9o4BsRsXXnj+qyXcNIeVvH1N00hzT9PK+nMbO4j0bERkorVn8VqVRFGasilyKNtgXFV1FV8V61AWmKWMCdUaA+mkpaTdsu5h3AZ0h/71WAF0iLboqU40ix+0kHZzzpze+fFcVfj7SKKndpaUmPR8SGizrXLLLs/v2BYRFxiqQhwBpRILtf0gMRsVWJbXwC+HQsuKLhlogYXiDmjaQX/tKSWdXgy86r0D4hsczfZ6NRttFpNvKwG2nk8+6ib8x18Qv/LtXBcusyOg9lUtoy5DOkjuJWpA73zXk6YXUxW0ilPZ4mdSCGAAfm/f+r4r1KFe0dVRZVuJFzU3dw6nIplgM2IxUrqy80ViSXov33en9EPF/g8VcCZ7fLLRgbET0qvKVONuarifwbTy6wpLQuXq5OnaTzyLL7I2J49iZ9W0T0KLu/XcyfkKYMSymIJmlXUrG/BVY0RMStBdp4Nym/5YF2bcz1XFQny87zjBTUxdyelLz8pqQDSCt4fpq3EyFpBGlZbvvNNvNMhYwirYr8L9KV3geAJ6JYiYbSKe0F195rwCMR8UIPYz0WER+qYOShtN+lpB+TdoGuTV3sA6xEWolH9GBPvbJH1drFXhl4LdLKuWWA5Qu+bk8l5WTOyI7XA66JiFwr3LKRv9Leq1S3d1RErKe0Anh8ROTaOyr7+c4jbcq6kaRNSHk5P8gTr2rNnoMzAVidhZNhP0KqqVCmCym2SVxZuQVVbcxX9n4hW0faqfohaF1eWXRDy82yz/WdrtzlALI3knVJq1kA/hLF91MqNZmV8pedQ3oB21TSpqR8pgtJS7E/ljPeVcBRpBUnRRIcocKExJIdQspHqU1VtZD+d4ZJOjkirujsgR24SdJfSCMPX8+uwnPX/alT5u/y89nnWpVcZZ9H08M99aKcBO2FSPpi3df1N+XNbwEYWOvcAETEX5UK/+V1YoHHdqTsvaMuIP0v1/b/m6604KTHHZwOOrLKjkvbaaDZOzh7AMdGu1UCkl4hvQlcVNY3ioiiO+CWshdHpA0IS89Hofz9QsrO7oeSC6J1cBW+tqRcV+E1seB+OKsALxecby91D6XMvIgIpb2Jzo5UwO2QAvFejGy/oxJUlpBYsiWB4RHxfwCSVie9kW5NSmztdgcnIo7J8nBqIw9vUk7RzcK/yyy/6rnI9tJTqlq9J2nK5sSejNwsBvWjw4NIeSkPUqyDMyUbWavlQ+1PgVV9UVKye52y945aJiIeaNdBzJUTVVVHtl6zd3BWb9+5AYiIR7JkqR7JhjTfqSWRZW8knwKeifx7PNXa1GGxozzTAlHNBn1l7xdSy+5fTeVk90P5BdFqV+G/J11VtJDzKlxp48BTSatATiG9wa0CLCHpixGRdyVV2cvOAeZIOpZ0Nf9RpRVQRa5KT8jeBNrvRZXnf+ZfSlsL3EPaR+kFSthctAJDap2bzAvZuVck9SgJtaKRB2j7Xd5N/t/l+cBOWds+SkoU/QZpNHUc6f+6IUTEN+qPs/+bawuG/TowFqhtwXEPOYr8VTgtV/beUS8pVe+vdZj2ooTZkGy0uLYVzN1RfBPUFLfJc3D+FhHrdnLbkxGxTg/j3U0aJfibpHVI86RXkSq0To6IY7oM0HXsUnMLKshHKX2/EJWU3Z/F+RBwGmn4tGZ54KgCv8NbSbuHt78K35f0T7hRD2JNAb5LSqAbB4yMiPuztl8TOffXafc9Cu+hlMV5P2kV3+SIuEfSWkBL5KzFkeWXbQA8RtsoXUSOqtrZRUYtIfEA0t/4qgYbKUDSuaRp5vHZqT2BWaTn580R0e1aMZJ+XnfYOvIQEYU6D9nV/Fuk4o65kjvrc4GU6ie9GBEnZsfTImKzrh7fm7KppEcjIteIZzYCfXlE7F9uy8qlEveOykbEx5E2HH6V9H6wf+RYeVcX83BSXafaBc9ngXER8fPOH9XN2E3ewbkG+H1EXNDu/JeBnSOiR7u+SnokIjbOvj4FWDkixma5I1Nrt+Vs68OkXJEF5sMjItfUgEreoE8lLimti7kSadVBfeJpjztg2VTKZ0gVMeunQuYA10bEvTnbt8AqNqXL58ciYkP1cNO/+hd7SU9E3UqsnsbKHtNlAcNGesOXNCPvm0hdjI6ucGvDGf8mVfs9LiLuLPJ9ypI9V/YkLaeFtJz21wWnI2uxVyQ9r3NPGWdvznf0pKPVSZxHgc0iYl6WJzQmshVEypZlF4lfJi1YwHMJ0oXp+Ci2IegfSQslcl9QVKWsv3Ensd8LLBERc0qINR3YNiLerIt9X5GL55pmn6I6ArhBqTDR1OzcCGApUi+xp+pfnD5O2wqB/0gqmj9Sam5B2U/qzqbQ8so6iAeR3phqv9dcCcFRXUG0uyTdzIJX4Xdl/4D/6mGs+ufHW+1uy/OmN5W2hLz6OLVEvR7nHlU4TH6vpA0j4vGcj+9yvj57Id+INJraEG+oWUfmV9lH2d4kx9+3XjaN/a6kFaLYbuzXkDbWfIn0vL4HIBvhLnWX9xKcUff1PFJqwayCMWcCf1IqSFg/Up5rtWqZSvwbt5L0FHA/6e98D2lUtnBYFtxHbz4Lvq7l1tQdnGxqYbtsNKT2wvfbiPh9zpDTJZ1BqsS6Dmk/ptoVVVFlzIe3yqZT/gf4r4gYKWlDUi85V2J1Z1NopKmhPD4PrF3ylc9nJT1GeQXRxrLgVfjltF2F97QDuamk10n/uO/JviY77nGHMSKGZaMEQ/LkaXUSs6qkv21IO0KXNr1ZLyLmAw+3m8rpFVV0EtuNPAwAhpOqqBf1BvCIpNtZ8M35m50/ZEER8UNJd5KqvN9WN0K1BCkXp2G0T+DNLib3j4irCoR9KvtYgupWsBZR+G/czoakRPmPAKcr5aFOj7YK7XlcAvxZ0g3Z8WcoaQFQU09RlU3Se0jLctcALo6Ih7Pz25HerHuy9LN97FKLHUn6HemJc1xEbCppSdKGa7mm0SqYQvs18PXIuRqpk5iVFkRrRPXTpo2qiunN/iTLraqZR+rk7BMRYwvGPbCj8xFxWZG4jUbS8qSLlTVJU9i3Z8dHkjaeLLwiLbs4JSLeKBqrTO3+xrU3e+X9G2fvI1uSSkbsALyP1MEpsuM5Slub7JAd3hMRDxWJ1xrXHZzmJGlyRGxZn99RJOlP2RYFWUdn80ibMuYuNqZU/O1G4FFKKr6okguiKS0T/zFpzy1RfKqmdJIuIy3lntzbbemI+sj2FFXQghVkVwGWi5wVZCVtTkr83puU2PnriDg7Z6y1yhr16wuUqoe/Stof6xO0/T8fHhHTCsbeiLQispYT9xJpYUIZUze5ZXmJgyPinOz4AWBVUifnOxExvqvHdxF3Lqme1Zmki93c1YaV9l/8Gmk25BHgosi5DUdnmnqKqi/pZGj7NVJNhf+Onm9a96ak99ViKi1TLjIPW+oUGqm8+Y8pp/hbTdkF0U4Ddo8Ce7csBlsD+0t6hvT3KHX6p6gsD2BGP3xTba0gSxpJXYpUK6XbFWSVqsbum328RFoRqRLy635DVk5B0q8jYs+C8RrdB+sWh1xIWta8VuTfyLjeOODbEfGHLH4LaRl24X2UCjqaVGSxZilSuYxlSc/HXB0c0nNxB9LG0F+WdC9plDxPcv9lpA2C7wFGkqZej8jZrg65g9M4fkpaRno16U1qNGlX2QeBi0k1WHriv0nDsWtL+hOp997jjTuzZMHVSYXF3iLtzr0/KQenyBz73Ij4WYHHLyTKL4j2fw3euQH4ZG83oBtWAh7LriILb0/RR5RRQfYvpBf/3SLiSQBJ3yqhbfUJnIWSlfuI1rpD2evCrJI6NwDvrXVusvi1RQi9bamIeK7u+I/ZyspXirSvbkHHBqROyRGkztR7coTbsK7jeRGp7Eqp3MFpHKPaTaWMy6aUviOpx7uUR8TUbO5+fdILWt5dbn9KqgZde2N6F7hM0sakJObdc8QEuEfSj0idsPopqlx1eoAqCqJNkXQd6Yq3aIG6SkTEM+pgM73eblc7ZW9P0ReUUUH2c6QLnT9ImkgqSlfG6pLo5OtmVUvwhwWT/MuYcp4p6fu0VaY+gLSyqretVH8QEYfVHa6aN2iWO7kpKbH6buAL5O+Y1Hc857V7zS6FOzg5tFvVUFObTjo/59XBXEmfp21Z6V60Ta/0+EUoW853ekT8ou7czdHzLSVKrQZdp1b3ZZv6sOTcNypTdin25YG5pCJZNUFbQape18FUyEB6OBVStYiYlCUarxsRdygV6xvQ2+2qWOEKshHxG+A3WedoD9LV8mpKG9XeEBG35WxbVyv6GirHrAwRUeVz7UvASbS9JtyTnettf5b0lVi4BtxXydEhUbYlB6lS9UOkjtyepNH9R8mXClBlxzMFdZJxz0k6i9QLviY7tQ/wOunNb/mI+EKOmB8EziJtDRCkWgPfIi1J3yIi/tjDeH8BHia9QX81Uq2ePAXlSq0GvYjvtXosWN6+aLzCBdEanaRpZFMhdcnk0xslBwcge4MfQyqMubbSBqa/iIhP9HLTKqUSK8jWxVyJNNW8T7P//iw/pXpltZHn2qj4FsDSwGd6+jor6UFgp0hbjXyUNJpY25JjeBSsql0Vj+Dks11E1I8W3FS3ailX9nyWRNzZdE+POjeZuRGxj6SjSdNBe5NvOHpKJ1cCX6ateGJuWSdkT9IKkeGkOjtlyVUQTdLREXGaUl2VhX5nBWpIVKHszfSqMBbYCvgzQKStTlbr3SZVL+vQ3J6toMq92qRdzFdJia3jyohn+SgV9utUb+eXZeU3tpP0cdpqlRWpATcg2qqj70PaSuHXwK+zi6yG5A5OPsvWrwpR2qunlveQq3BdljvxFWAoC25dkHe4U9njT8t637fRtpSxJ8quBl2rJ7QHqVOzOalA1mdIc7q5qbyCaLXE4ty7Ai9GZW+mV4W3sxFEoLWWRlMOHau6TVWtsWxLmrK5htRxLz+BpARZhyZvp6beAElLZsu4P0Eaka1p2H5Ewzaswf038Mcsz0XAMODQ7Oo5b5GsG0nzt3ewYNnqvI6vfZHlPXwS6LCwV1ei5GrQkq4mVcG8Dfg56Z/vyYi4K0+8dtqXYh9AutroqWeh44Jnkr6er2nViIgzsqmQ10l5OMeXMRVSsklZovx7srYeCtzUy22qytm0bar6e9ptqkqqsG193/uBnUnLpvcDfkvaNLdX699UqC9tydHKOTg5SVqatEMypBVKhZYdquSddyXd2X6OvqNzi1s2nLkEKfH32oiYJWlmRJSyXFUlFESTNBPYOyKmtjt/EqkuzofLaGt/IWkJ4BDakrVvjYgLe7FJlVHJm6pa48veC/Yl7U14Uk9fb/qKbHSytiVHbWPM9YBli6x+rZJHcPLbgrbppE0lERF5V+sA3CzpUxFxS5FGKVWHXAZYJUtIrA2dLk7TiJQAAA37SURBVE8qVd6rIm2lsAHpBeGO7IpguSIJxiq/INrewHilfWruU5pbOY80QtKSM2Yl1MDVlrVgNdULsim0VYEtJP0rIqrYiLK3lb2pqjWorGPzadLrzlDgZ8ANXT2mL4uI+zs499feaEt3eQQnB0lXkIrwTaNtOimKJJ8qVTJ+Lynr/R1yvlFJOpyUN/NfwD/qbnoduKDRri4kbUF6gfg8MCsielwBVGkn93uAQ+oKohUaFZK0CenFaiwpNwpgv4h4u/NHLX6SnqRBqy0rFZgcXSs4lo3efZysmmpvjyZWQdJ82ipKv4e0ipHseFBEDOyttll5JF1OmrK/hTQS/WgvN8k64A5ODpKeIFVhbNhfnqRvRESv767cXdkoyUcioseJxpI+QyqItj0px+Fa4MKIGJazLbVk7A1JSy3vAA4juzqvW03Q6yT9KSIapuZNvdrKwrrjs2sFxyTdHxHbdP5os8aVXVTVip/Wvw80zAiquYOTi6TxwDcj4p8lxNogIv6itJvqQno6tynp4xHx+2zqoqN4DVOkrmxqK4i2L2mk4HJyFEST9Hfqdt7NPgdtL169Xt6+7u/7MVLCY8NVW+6qTpKkpyJi7cXdJjPrP9zByUHSH0gFjh6g4E7YksZFxJgsZmuoupg9quwr6aSIOEHSJR3cHAWWnfcpzV4QrZO/b01D/J0lXQXc1UENpa8CLRGxb++0zMz6A3dwclDa42khETEpR6ytgGcj4vns+EBS4bungRMbaTqkDJIOj4izJG0fEX/q7fb0dR39Hhvld1t2NVUzs55wBycnSavTtvfRA1nlyDxxKimBndXouZ+UfHtPo9RnqC2jlfSgl1sX19HvsdF+t+2qqT5WoJqqmVm3eZl4DkqbYp4O3EXKy/i5pKNyLnutqgT2hsDWpKJ6p0taH5geEbmqD5foCUl/A/5L0vS687X8lobZQ6mRSdoW2A5YVdK3625angbbyLLEaqpmZt3mDk4+xwFb1kZtsm0W7qBtJ/CeqKoE9nzScvP5pNU/L2QfvSoi9pX0fuBWoFf3a+lM3SqqDjXItOFSpOXWS5K2uqh5nbQTvZlZv+YOTj5LtJuSeplUnTePqkpgvw48ApxJqn9TymZ/ZcjyjTaVtBSwXnZ6RkS804vNqjeVtlVTawGvZl+vSNrGIdfy8zJl+V6TJF0aEc9IWiYi5i7ygWZm/YRzcHKQdDqwCalzAmlq6ZGIODpnvNJLYGdVZHcg7eL8H+Be4O6IuDNPvLJlidqXk5KpBQwBDsxTB6cqki4gLTO/JTseSUqO/WrvtqxNNlV1Eem5spakTYGvRsShvdw0M7Ne5Q5OTlkdkh2yw3uA3zRi4b9sW4SRpOrGq0XEe3q5SQBImkqqDDwjO16PtFndFr3bsjaSHomIjRd1rjdJ+jNpSmpCbZ8jSY9GxEZdP9LMrLl5iqoHJB0Y2Q7TWSG167PzA4GrSQXmGoKkXwObAk8BdwNfINXtaRQDa50bSHuaZL/HRvIPSd8DrsyO92fB7S8aQkQ8lwpBtypjN3ozsz4tb95If3W4pPok4Fr13N/StudMr5K0ZZbE+yPS5pBXk1ZT7UXahLNRTJF0oaSW7OMCYEpvN6qdfUmbQ95A6syuSgN1YjPPSdoOCEkDJR0JNNy+VGZmi5unqHogW10zEbgyIn6WrZ66BbgzIo7p3dYlVdXVKVu2E+9YFpzmO7fRNrOE1Imt5UY1GkmrAGcBO5FymW4DDm+kpHIzs97gDk4PSVoe+B3pDXkP4BcRcVbvtqqNpIcjYtPs63OAFyPixOx4WkRs1pvt60uykZELcQKvmVmf4xycHqjb4HAcafn1naQpgs9BY2xwSHV1dfqjnwCfBCYARMTD2ahYr5N0fBc3R0ScstgaY2b2/+3da6ilZRnG8f+leEidQUZH81CDfpEsCwehdCjSColUIpMUB0n9EkXj4VsHygSjUMsTYh9EyzAs1DBhyAwzLAh1arLSIrBRMDTHyREt0bz78L57ZrlndM9eo+tZ6/X/g8Va61lsuNjszb73c7ifKeQfvMU5eeT1HfPGin7TcWNvVl+dt6Qp3sC7vSWzvYFzgf0ACxxJb2kWOItQVWe3zrCQqrokyS/Z2ldnbg1yF7q9OFMnyS50y0CbW2eZ51UbeIHzmJINvFV1+dzrJEvosp1Nt+fq8tf6Okl6q3APjppIcjPwOboZkfvp7lC6sqoubRpsxGts4F0zJVc1zG16v5Du+Pr36b5/m9qmkqTp4DFxtXJkP2PzSbpN24fR9eqZJkdU1ZlVdWBVHVBVq4F3tQ4FW7pp3w88BxxVVRdZ3EjSVs7gqIkkf6Y7un4zcE1V3Tt6AmwaJFlXVSsXGmshySvAi8DLdPu/tnxEt8l4aZNgkjQl3IMzhpHTVKOepbuPqvmN3TPie3T3UK0Hfp1kBd0Foc319zsdByxPcuHIR0uBXdukerWqcvZVkl6HBc54zgWOBe7p33+Y7gbqw5JcXFU3tQo2K6rqKuCqkaENSY5vlWee3YF96H4/loyMb6brCC1JmnIuUY0hyc+Bs6rqyf79gXQ3Y59Bd2O3Fx0uoP+efRM4uKo+nuRI4Niqur5xtC2SrKiqDa1zSJIWzxmc8bxjrrjpPdWPPZPkpVahZsyNwA3AV/r3fwNuAZoXOEmuqKrzgWuSbPMfQFWd0iCWJGkRLHDG86skdwI/6d+f2o/tDfy7XayZsn9V/TjJlwCq6uUk09JEb26J8bKmKSRJY7PAGc8X6IqaVf37HwC39k31pmUfybR7Psl+9CeAknyAKem0XFUP9s/3ts4iSRqPe3DURJKVwNXAe4A/AcuB06pqfdNgI5KsAi4CVtD9MzB3BPvwlrkkSQuzwBlDf0z828ABdH/07D2ySEn2oOtifATd9++vwC5V9WLTYCOSPAJcQHdCbsvyWVVtbBZKkrRDLHDGkOTvwMlVNRX3Es2iaW6iNyfJ76rq/a1zSJIWzz0443nS4mY8Sd4OHAK8LcnRdLM30DXR26tZsO27p78S4Ta6rsEAVNW6dpEkSTvCAmc8DyS5Bfgpr/7Dd1u7SDPjROCzwKHAd0bGnwO+3CLQ65ibvTlmZKyAExpkkSQtgktUY0hyw3aGq6rOmXiYGZXk1Kq6tXUOSdIwWeComSSfAN4N7Dk3VlUXt0vUmXf/FHSzNk8D91XVow0iSZIWyQv7xpDk0CS3J3mqf9ya5NDWuWZJkuuAzwBfpNuHcxrdcexpsGTeYyndMtXaJKe3DCZJ2jHO4IwhyS+Am9na8XY1cGZVfaxdqtmS5I9V9d6R532AtVX1wdbZXkuSZcDd03TSS5K0fc7gjGd5Vd1QVS/3jxvpGtVpx/2nf34hycHAS8BBDfMsqKqeYeupL0nSFLPAGc/GJKuT7No/VgM2f1ucO5PsC1wKrAP+AfyoaaIFJDke2NQ6hyRpYS5RjSHJCrprBo6l24D6W2BNVT3WNNgMSbLHXNfivqvxnsB/p6GTcZKH6O/IGrEMeAI4q6oemXwqSdJiWOCoiWnuZNwXsKMK2FhVz7fII0laPBv9LUKSq9n2P/stqmrNBOPMpFnoZFxVG1pnkCTtHAucxXlg5PU3gK+3CjLDRjsZX87WAmcaOxlLkmaUS1RjSvL7qjq6dY5ZZSdjSdKbyVNU47MyHEOSk5OsmCtuknwtyfokdyQ5rHU+SdIwWOBo0i4B/gWQ5CS6JonnAHcA1zXMJUkaEPfgLEKS59g6c7NXks1zH9Fdtrm0TbKZUlX1Qv/6U8D1VfUg8GCSzzfMJUkaEAucRaiqJa0zDED6axleAD4CXDvy2Z7b/xJJkhbHAkeTdgXwB2Az8HBVPQDQHxn/Z8tgkqTh8BSVJi7JIcABwPqqeqUfOwjYzW7QkqQ3ggWOJEkaHE9RSZKkwbHAkSRJg+MmY01UkmWv93lVPTOpLJKk4XIPjiYqyaN0vYQCvBPY1L/eF3isquxmLEnaaS5RaaKq6rCqOhy4Gzi5qvavqv2Ak4C72qaTJA2FMzhqIslDVXXUQmOSJI3DPThq5YkkXwV+2L8/E3iiYR5J0oC4RKVWzgCWA7cDt/Wvz2iaSJI0GC5Rqakke1fV861zSJKGxRkcNZHkuCR/AR7u378vybULfJkkSTvEAketfBc4EdgIUFXrgQ81TSRJGgwLHDVTVY/PG/pfkyCSpMHxFJVaeTzJcUAl2Q04j365SpKkneUmYzWRZH/gSuCjdJ2M7wLWeFWDJOmNYIGjJpKsqqrfLDQmSdI4LHDURJJ1VbVyoTFJksbhHhxNVJJjgeOA5UkuHPloKbBrm1SSpKGxwNGk7Q7sQ/ezt2RkfDPw6SaJJEmD4xKVmkiyoqo2tM4hSRomCxxNVJIrqur8JD8Dtvnhq6pTGsSSJA2MS1SatJv658uappAkDZozOJIkaXCcwVETSVYBFwEr6H4OA1RVHd4ylyRpGJzBURNJHgEuAB5k5A6qqtrYLJQkaTCcwVErz1bV2tYhJEnD5AyOmkjyLbrGfrcBL86NV9W6ZqEkSYNhgaMmktyzneGqqhMmHkaSNDgWOJIkaXDcg6OJmnf/FHTN/p4G7quqRxtEkiQN0C6tA+gtZ8m8x1LgGGBtktNbBpMkDYdLVJoKSZYBd1fVytZZJEmzzxkcTYWqeoau2Z8kSTvNAkdTIcnxwKbWOSRJw+AmY01UkofY9hbxZcATwFmTTyRJGiL34GiikqyYN1TAxqp6vkUeSdIwWeBIkqTBcQ+OJEkaHAscSZI0OBY4kiRpcCxwJEnS4Pwf5fshtYtbwzIAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,ax = plt.subplots(figsize=(8,5))\n",
    "\n",
    "test_2.spec_thres(ax,unit='country',high_cited=0.5,top_ranking=25)\n",
    "\n",
    "ax.set_xlabel('')\n",
    "ax.set_title('')\n",
    "ax.set_ylabel('RCA index')\n",
    "ax.legend(loc='upper right')\n",
    "\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.savefig(fig_path+'/paper_figures/figure_4_spec_change.pdf',bbox_to_inches='tight')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x396 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plot concentration changes\n",
    "\n",
    "fig,ax =plt.subplots(nrows=2,figsize=(8,5.5),sharey=True,sharex=True)\n",
    "test_2.concentration_change(ax,unit='country',high_cited=0.5,threshold=2012,hline=0.5)\n",
    "\n",
    "#fig.suptitle('Changes in concentration')\n",
    "\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.savefig(fig_path+'/paper_figures/figure_5_concentration_change.pdf',bbox_to_inches='tight')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dl</th>\n",
       "      <th>dl</th>\n",
       "      <th>conc_change</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.366631</td>\n",
       "      <td>0.366768</td>\n",
       "      <td>0.000137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.445937</td>\n",
       "      <td>0.463189</td>\n",
       "      <td>0.017252</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.500542</td>\n",
       "      <td>0.542881</td>\n",
       "      <td>0.042340</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.549296</td>\n",
       "      <td>0.595610</td>\n",
       "      <td>0.046314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.595016</td>\n",
       "      <td>0.644526</td>\n",
       "      <td>0.049510</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         dl        dl  conc_change\n",
       "0  0.366631  0.366768     0.000137\n",
       "1  0.445937  0.463189     0.017252\n",
       "2  0.500542  0.542881     0.042340\n",
       "3  0.549296  0.595610     0.046314\n",
       "4  0.595016  0.644526     0.049510"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Compare shares of the top countries before / after 2012 (for the paper)\n",
    "conc_change_dl = pd.concat([test_2.shares_shorted[0]['dl'],test_2.shares_shorted[1]['dl']],axis=1)\n",
    "\n",
    "conc_change_dl['conc_change'] = conc_change_dl.iloc[:,1]-conc_change_dl.iloc[:,0]\n",
    "conc_change_dl.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.14587916919720478"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_2.herf[1]['dl']/test_2.herf[0]['dl']-1\n",
    "test_2.herf[1]['total']/test_2.herf[0]['total']-1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,ax = plt.subplots(figsize=(10,5))\n",
    "\n",
    "test_2.spec_thres(ax,unit='region',high_cited=0.75,top_ranking=30)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see some evidence of churn when we compare before / after 2012. Some countries such as China, Hong Kong, Singapore and Canada gain a lot of visibility while others such as Switzerland, Netherlands, Japan and Spain see a relative decline. When we look at the regional picture we see some spectacular changes in some places such as Beijing, Baden-Wurttemberg, New York or Ontario."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### iii. Clustering analysis\n",
    "\n",
    "The analysis above is quite coarse and does not take into account spatial patterns of concentration. We will explore that question using the DBSCAN algorithm, which identifies clusters in a data-driven way by looking for high density groups of observations within a set radius. We are interested in quantifying geograpnical disruption: how does the geography of activity change between periods?\n",
    "\n",
    "Note that given the big changes in activity in Dl it is quite difficult to compare before/after clusters (the minimum cluster sizes and spans are likely to change). For that same reason, it is hard to compare dl with non dl.\n",
    "\n",
    "What we will do is compare clustering trends for a 'high dl' and 'low dl' category. These are identified based on the relative importance of DL papers in them.\n",
    "\n",
    "We will compare changes in activity between these two groups: do the clusters in high DL activity display more volatility than those in low DL activity?\n",
    "\n",
    "\n",
    "**Implementation**\n",
    "\n",
    "Create a class `DlPaperAnalysisCluster` which estimates the clusters with a set number of parameters and generates those statistics.\n",
    "We will then do grid search over different parameters and compare the results. \n",
    "\n",
    "We initialise the class with all the data.\n",
    "\n",
    "-We implement a `.segment` method to automatically identify, inside the top X ArXiv categories, those that are 'high DL' and those that are 'low DL'.\n",
    "-We implement a method called `.time_cluster_comp` which compares the clusters between two periods.\n",
    "-We implement a method called `.disc_cluster_comp` which compares clusters in disciplines\n",
    "\n",
    "All the results are stored so that we can map the results.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Some imports and changes\n",
    "from sklearn.cluster import DBSCAN\n",
    "from scipy.spatial import ConvexHull\n",
    "from shapely.geometry import Polygon\n",
    "\n",
    "pd.options.mode.chained_assignment = None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "#A bunch of functions we will need to use\n",
    "def dbscan(data,coords,epsilon,min_samples):\n",
    "    '''\n",
    "    the function dbscan calculates the clusters.\n",
    "    coords is a list with the lon and lat\n",
    "    \n",
    "    '''\n",
    "    #Create the matrix for estimation\n",
    "    #coords = data.as_matrix(columns=[coords[0],coords[1]])\n",
    "    coords = data[[coords[0],coords[1]]].values\n",
    "    \n",
    "    #Parameters\n",
    "    kms_per_radian = 6371.0088\n",
    "    \n",
    "    #Estimate epsilon as radians (we use the Haversine metric to measure distances in a sphere)\n",
    "    epsilon = 13 / kms_per_radian\n",
    "    \n",
    "    #Initialise cluster\n",
    "    db = DBSCAN(eps=epsilon, min_samples=min_samples, \n",
    "                algorithm='ball_tree', \n",
    "                metric='haversine').fit(np.radians(coords))\n",
    "    \n",
    "    return(db)\n",
    "    \n",
    "def cluster_report(data,cluster_fit):\n",
    "    '''\n",
    "    This function returns a report for the clusters\n",
    "    \n",
    "    '''\n",
    "    #Output container\n",
    "    output=[]\n",
    "    \n",
    "    #Number of clusters is the set of the labels -1 (removing the non-cluster label)\n",
    "    number_clusters = len(set(cluster_fit.labels_))-1\n",
    "    #And append to outputs\n",
    "    output.append(number_clusters)\n",
    "    \n",
    "    #Label the data with the cluster labels\n",
    "    data['cluster'] = cluster_fit.labels_\n",
    "    \n",
    "    #Remove the observations outside of clusters\n",
    "    data_in_cluster = data.loc[data['cluster']!=-1,:]\n",
    "    \n",
    "    #Generate the point coordinates in clusters for mapping\n",
    "    coords_in_cluster = data_in_cluster[['grid_lon','grid_lat']]\n",
    "    #And append to output\n",
    "    output.append(coords_in_cluster)\n",
    "    \n",
    "    \n",
    "    #Generate the convex hull for each cluster\n",
    "    #We need to get the points for each cluster\n",
    "    data_in_cluster['points'] = [(c1,c2) for c1,c2 in zip(data_in_cluster['grid_lon'],\n",
    "                                                          data_in_cluster['grid_lat'])]\n",
    "    \n",
    "    #Also create a geopoints df so we can do the point in polygon thing later\n",
    "    geo_points = gp.GeoDataFrame(Point(x,y) for x,y in zip(data_in_cluster['grid_lon'],\n",
    "                                                           data_in_cluster['grid_lat']))\n",
    "    \n",
    "    #print(geo_points)\n",
    "    geo_points.set_geometry(0,inplace=True)\n",
    "    output.append(geo_points)\n",
    "    \n",
    "    \n",
    "    ch_store = []\n",
    "    \n",
    "    #Then we group over the cluster (note that we have already excluded the no-cluster set)\n",
    "    for c in set(data_in_cluster['cluster']):\n",
    "        #We turn each of the coordinates in the cluster into an array of points\n",
    "        points = np.array(data_in_cluster.loc[data_in_cluster['cluster']==c,['grid_lon','grid_lat']])\n",
    "        \n",
    "        #We turn those points into polygons and put them in a geoseries with the convex hull (envelope)\n",
    "        #This way we can look for the clusters \n",
    "        ch = gp.GeoSeries(Polygon(points)).convex_hull\n",
    "        \n",
    "        ch_store.append(ch)\n",
    "    \n",
    "    #Output this as a geodf\n",
    "    geo_df = gp.GeoDataFrame(ch_store)\n",
    "    geo_df.set_geometry(0,inplace=True)\n",
    "    \n",
    "    output.append(geo_df)\n",
    "    \n",
    "    #Now I want the cities in each cluster (we focus on the top 5 cities)\n",
    "    cities_in_clusters = data_in_cluster.groupby('cluster')['country_reg'].apply(lambda x: x.value_counts()[:5])\n",
    "    #And append to output\n",
    "    output.append(cities_in_clusters)\n",
    "    \n",
    "    #Now I want the % of activity in the clusters\n",
    "    activity_in_cluster_share = len(data_in_cluster)/len(data)\n",
    "    #And append to output\n",
    "    output.append(activity_in_cluster_share)\n",
    "    \n",
    "    #And the % of highly cited papers in clusters\n",
    "    high_cited_in_cluster_share = len(data_in_cluster.loc[data_in_cluster['high_cited']==True,:])/len(data.loc[\n",
    "        data['high_cited']==True,:])\n",
    "    \n",
    "    output.append(high_cited_in_cluster_share)\n",
    "    \n",
    "    return(output) \n",
    "\n",
    "def cluster_comparison(report_1, report_2):\n",
    "    '''\n",
    "    This function checks how many points from the second cluster set are in the first cluster set and vice versa.\n",
    "    It is a measure of volatility. If all points in the second cluster set where in the first, then we would have perfect stability.\n",
    "    If the opposite, we have perfect disruption.\n",
    "    \n",
    "    '''\n",
    "    \n",
    "    #How many points in 2 would have been present in 1?\n",
    "    #geodf with period 1 polys\n",
    "    polys_1 = report_1[3]\n",
    "    \n",
    "    #geodf with period 2 points\n",
    "    points_2 = report_2[2]\n",
    "    \n",
    "    polys_1.crs=points_2.crs\n",
    "    \n",
    "    #Do the join\n",
    "    spatial_join = gp.sjoin(polys_1,points_2,how='inner',op='contains')\n",
    "    \n",
    "    #What percentage of papers in period 2 clusters are not in a period 1 cluster?\n",
    "    coverage = len(spatial_join)/len(points_2)\n",
    "    \n",
    "    \n",
    "    #What regions in period 2 clusters are not in period 1 clusters and viceversa\n",
    "    #Find the unique regions present in the clusters\n",
    "    reg_1,reg_2 = [set(rep[4].reset_index(drop=False)['level_1']) for rep in [report_1,report_2]]\n",
    "    \n",
    "    #Estimate exits and entries\n",
    "    exits = reg_1 - reg_2\n",
    "    entries = reg_2 - reg_1\n",
    "    \n",
    "    #Save and return\n",
    "    exits_entries = [exits,entries]\n",
    "    \n",
    "    return([coverage,exits_entries])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "class DlPaperAnalysisCluster():\n",
    "    '''\n",
    "    This class estimates geo clusters in a paper database a set number of parameters and generates those statistics.\n",
    "    We will then do grid search over different parameters and compare the results. \n",
    "\n",
    "    We initialise the class with all the data.\n",
    "        -.segment identifies the comparison sets: papers in high DL arXiv categories and low DL arXiv categories.\n",
    "        We think of them as treatments and controls.\n",
    "        \n",
    "        -.cluster_changes compares changes in clustering between disciplines, over two periods\n",
    "        \n",
    "        #-.disc_cluster_comp` compares clusters in disciplines\n",
    "    \n",
    "    All the results are stored so that we can map the results.\n",
    "    '''\n",
    "    \n",
    "    def __init__(self,papers):\n",
    "        '''\n",
    "        Initialise with the papers. Note that these papers have already been classified into DL / non-DL\n",
    "        \n",
    "        '''\n",
    "        #Store papers\n",
    "        self.papers = papers\n",
    "        \n",
    "        #Extract categories (we are only interested in computer science or statistics / ML)\n",
    "        categories = [x for x in set(flatten_list(papers.arxiv_categories)) if (x[:2]=='cs') | (x=='stat.ML')]\n",
    "        \n",
    "        cat_freqs = flatten_freqs(papers['arxiv_categories'])[categories]\n",
    "        \n",
    "        self.categories=cat_freqs.index[cat_freqs>10000]\n",
    "        \n",
    "    def segment(self,pop_categories=20,levels=[0.33,0.1]):\n",
    "        '''\n",
    "        We want to identify a 'treatment' and 'control' group. The treatment are arXiv categories with high level of DL activity.\n",
    "        The control are arXiv categories with low level . of DL activity\n",
    "        \n",
    "        '''\n",
    "        papers = self.papers\n",
    "        categories = self.categories\n",
    "        \n",
    "\n",
    "        cat_store = []\n",
    "        \n",
    "            \n",
    "        #For each category, calculate the DL paper share\n",
    "        for cat in categories:\n",
    "                #Subset the data to identify papers with the category\n",
    "                subset = papers.loc[[cat in x for x in papers['arxiv_categories']],:]\n",
    "\n",
    "                #We crosstab a boolean (before / after threshold) vs the dl boolean\n",
    "                subset_ct = subset['is_dl'].value_counts(normalize=True)\n",
    "                subset_ct.name=cat\n",
    "                \n",
    "                #Append\n",
    "                cat_store.append(subset_ct)\n",
    "                \n",
    "        \n",
    "        #Identify categories high and low cluster chare\n",
    "        self.cat_groups = [[x.name for x in cat_store if x['dl']>levels[0]],[x.name for x in cat_store if x['dl']<levels[1]]]\n",
    "        \n",
    "   \n",
    "    \n",
    "    def cluster_periods(self,threshold=2012,min_samples=200,epsilon=10,high_cited=False,\n",
    "                          citation_threshold=0.75,\n",
    "                          is_dl=True):\n",
    "        '''\n",
    "        Inputs:\n",
    "        -This method identifies clusters in the data comparing before and after the threshold date.\n",
    "        -It takes parameters for DBSCAN (minimum number of samples and the distance)\n",
    "        -It focuses on all papers (we can instead set this to high cited) and dl papers\n",
    "        \n",
    "        Outputs:\n",
    "        -Cluster labels\n",
    "        -Collection of points for mapping (removing 'noise clusters')\n",
    "        -Shares of t1 activity in t0 clusters (calculated using convex hull which gives us the envelop containing all points) \n",
    "        and viceversa.\n",
    "        \n",
    "        '''\n",
    "        \n",
    "        #Initialise papers\n",
    "        papers = self.papers\n",
    "        categories = self.cat_groups\n",
    "        \n",
    "        #If we are focusing on highly cited papers\n",
    "        #if high_cited!=False:\n",
    "        #    papers = get_high_cited_year(papers,high_cited,[min(papers['year']),max(papers['year'])])\n",
    "            \n",
    "        #We want to label highly cited papers\n",
    "        high_cited_ids = get_high_cited_year(papers,citation_threshold,[min(papers['year']),max(papers['year'])]).index\n",
    "        papers['high_cited'] = [True if x in high_cited_ids else False for x in papers.index]\n",
    "        \n",
    "        results = {}\n",
    "        \n",
    "        #We loop over the two sets of categories\n",
    "        #For each category group (high or low categories)\n",
    "        for cat_group in categories:\n",
    "            #For each category in the group\n",
    "            for cat in cat_group:\n",
    "                #Tracker\n",
    "                print(cat)\n",
    "                #Identify papers in group\n",
    "                subset = papers.loc[[cat in arxiv_cat for arxiv_cat in papers['arxiv_categories']]]\n",
    "                \n",
    "                #Split into papers in t0 and papers in t1. Note that this excludes the threshold year as a 'boundary'\n",
    "                subset_0 = subset.loc[subset['year']<threshold]\n",
    "        \n",
    "                subset_1 = subset.loc[subset['year']>threshold]\n",
    "                \n",
    "                #Fit the clustering algorithm for the two subsets in the data and generate the reports\n",
    "                db_report_0,db_report_1 = [cluster_report(subset,dbscan(subset,coords=['grid_lon','grid_lat'],\n",
    "                                                                epsilon=epsilon,\n",
    "                                                                min_samples=min_samples)) for subset in [subset_0,subset_1]]\n",
    "                \n",
    "                #And now we want to compare the clusters before and after.\n",
    "                #How much activity in the second period is captured by clusters identified in the first period\n",
    "                compare_1 = cluster_comparison(db_report_0,db_report_1)\n",
    "                \n",
    "                \n",
    "                results[cat]=[[db_report_0,db_report_1],compare_1]\n",
    "                #return([db_report_0,db_report_1])\n",
    "                \n",
    "        self.cluster_comparisons = results   \n",
    "        \n",
    "    def visualise_differences(self,ax):\n",
    "        '''\n",
    "        Here we want to visualise some of the differences in the data.\n",
    "        Boxplots that compare:\n",
    "            -Share of activity in period 2 captured by clusters from period 1.\n",
    "            -Share of activity in period 1 captured by clusters from period 2.\n",
    "            -Cluster difference between period 1 and period 2\n",
    "            -Increase in the share of activity captured by clusters in different periods\n",
    "            -Increase in the share of citations captured by clusters in different periods\n",
    "        \n",
    "        '''\n",
    "        \n",
    "        #Load information\n",
    "        comps = self.cluster_comparisons\n",
    "        high_dl_cats = self.cat_groups[0]\n",
    "        \n",
    "        \n",
    "        #Compare t0 coverage in t1 between both groups.\n",
    "        discs = pd.Series({k:v[1][0] for k,v in comps.items()})\n",
    "        \n",
    "        #Compare change in cluster numbers between period 1 and period 2\n",
    "        n_change = pd.Series({k:v[0][1][0]/v[0][0][0] for k,v in comps.items()})\n",
    "        \n",
    "        #Compare change in concentration accounted by top clusters\n",
    "        conc_change = pd.Series({k:v[0][1][-2]/v[0][0][-2] for k,v in comps.items()})\n",
    "        \n",
    "        #Compare change in high citations accounted by top clusters\n",
    "        cit_change = pd.Series({k:v[0][1][-1]/v[0][0][-1] for k,v in comps.items()})\n",
    "        \n",
    "        #Concatenate in a single df.\n",
    "        cluster_comp_df = pd.concat([discs,n_change,conc_change,cit_change],axis=1)\n",
    "        \n",
    "        \n",
    "        self.cluster_comp = cluster_comp_df\n",
    "        \n",
    "        cluster_comp_df.columns = [\n",
    "            'Initial cluster coverage','Cluster expansion','Concentration change','Citation concentration \\n change']\n",
    "        \n",
    "        #Label the df\n",
    "        cluster_comp_df['high_dl'] = [x in high_dl_cats for x in cluster_comp_df.index]\n",
    "        \n",
    "\n",
    "        #Plot all these in 4 rows\n",
    "        ax[0][0].boxplot([cluster_comp_df.loc[cluster_comp_df['high_dl']==True,\n",
    "                                              cluster_comp_df.columns[0]],\n",
    "                          cluster_comp_df.loc[cluster_comp_df['high_dl']==False,\n",
    "                                     cluster_comp_df.columns[0]]])\n",
    "        \n",
    "        ax[0][0].set_ylabel(cluster_comp_df.columns[0],size=10)\n",
    "        ax[0][0].set_title('PANEL A:\\n'+cluster_comp_df.columns[0],size=12)\n",
    "        \n",
    "        ax[0][1].boxplot([cluster_comp_df.loc[cluster_comp_df['high_dl']==True,\n",
    "                                              cluster_comp_df.columns[1]],\n",
    "                          cluster_comp_df.loc[cluster_comp_df['high_dl']==False,\n",
    "                                     cluster_comp_df.columns[1]]])\n",
    "        \n",
    "        ax[0][1].set_ylabel(cluster_comp_df.columns[1],size=10)\n",
    "        ax[0][1].set_title('PANEL B:\\n'+cluster_comp_df.columns[1],size=12)\n",
    "        \n",
    "        ax[1][0].boxplot([cluster_comp_df.loc[cluster_comp_df['high_dl']==True,\n",
    "                                              cluster_comp_df.columns[2]],\n",
    "                          cluster_comp_df.loc[cluster_comp_df['high_dl']==False,\n",
    "                                     cluster_comp_df.columns[2]]])\n",
    "        \n",
    "        ax[1][0].set_ylabel(cluster_comp_df.columns[2],size=10)\n",
    "        ax[1][0].set_title('PANEL C:\\n'+cluster_comp_df.columns[2],size=12)\n",
    "        \n",
    "        ax[1][1].boxplot([cluster_comp_df.loc[cluster_comp_df['high_dl']==True,\n",
    "                                              cluster_comp_df.columns[3]],\n",
    "                          cluster_comp_df.loc[cluster_comp_df['high_dl']==False,\n",
    "                                     cluster_comp_df.columns[3]]])\n",
    "        \n",
    "        ax[1][1].set_ylabel(cluster_comp_df.columns[3],size=12)\n",
    "        ax[1][1].set_title('PANEL D:\\n'+cluster_comp_df.columns[3],size=12)\n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "        #for num in np.arange(0,4):\n",
    "        #    ax[num].boxplot(\n",
    "        #        [cluster_comp_df.loc[cluster_comp_df['high_dl']==True,\n",
    "        #                             cluster_comp_df.columns[num]],\n",
    "        #         cluster_comp_df.loc[cluster_comp_df['high_dl']==False,\n",
    "        #                             cluster_comp_df.columns[num]]])\n",
    "        #    \n",
    "        #    ax[num].set_xticklabels(['High DL categories','Low DL categories'])\n",
    "        #    ax[num].set_title(cluster_comp_df.columns[num],size=14)\n",
    "        \n",
    "        \n",
    "        \n",
    "        return(self)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Run the test and segment the categories based on their share of DL papers\n",
    "\n",
    "papers_clust = test_2.papers\n",
    "\n",
    "test_cl = DlPaperAnalysisCluster(papers_clust)\n",
    "test_cl.segment(levels=[0.4,0.1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[['cs.LG', 'stat.ML', 'cs.CV'],\n",
       " ['cs.DS', 'cs.DM', 'cs.CC', 'cs.IT', 'cs.NI', 'cs.LO']]"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#These are the test groups\n",
    "test_cl.cat_groups"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cs.LG\n",
      "stat.ML\n",
      "cs.CV\n",
      "cs.DS\n",
      "cs.DM\n",
      "cs.CC\n",
      "cs.IT\n",
      "cs.NI\n",
      "cs.LO\n"
     ]
    }
   ],
   "source": [
    "test_cl.cluster_periods(min_samples=50,epsilon=20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAeoAAAHwCAYAAABpICzHAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMi4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvhp/UCwAAIABJREFUeJzs3XmcXFWd/vHPk7DvBCKyBxERRGSJCMooICqggPsIIqgo44Y6oKjASAARRcFtHEdkl00EEVQEEUF+LAJBkS06InvYAgQIi5DA8/vjnIZK00t1p6qruvt5v173lbrLufWtm7516p577vnKNhEREdGdJnQ6gIiIiOhfKuqIiIguloo6IiKii6WijoiI6GKpqCMiIrpYKuqIiIguloo6IiKii6WiHqUk3S7pKUmPS7pf0gmSluq1zQmS5klaudfyaZIs6f0Nyxaqy6Y0lH2m7r9n+mtdN6Vuu9AQ4u15z9ctyOeOGG9Gy7neaz9zJF0r6U2tOAbjXSrq0W1H20sBmwBTgQN7VkhaEngP8CiwWx9lHwYOljRxgP0fYXuphuk1wwlSkoDd63vuPpx9RIxzo+Jc79kPsAzwI+AXg7xvNCEV9RhgeybwW2CDhsXvAR4BDgH26KPY+cAz9H1it9q/ASsDnwU+IGmREXjPiDFnFJzrALgMeXkqMAlYaaTed6xKRT0GSFod2AH4S8PiPYDTgNOBV0ratFcxA/8FHCRp4TaHuAfwK+CMOr9jzwpJa0h6RNIabY4hYtQbBed6T5wTKa1ntwH312U514cpFfXo9ktJjwCXAX8Evg7lhAC2Bk61fT9wEX00Ods+F5gFfKyf/X+hnlg904lDDVDSEsD7aixzgTMbY7F9p+3lbN851H1HjCNdf6437gd4HPgu8F+2n60x5FwfplTUo9s76x/+mrY/ZfupuvxDwAzb19X5U4Bd+/k1fSBwALBYH+u+XfffM/XVrDaYdwHzgPMaYtle0uRh7CtivBoN5/rz+wGWoNxL/5ak7Ye5r6ia7rUbo8ruwBqS7qvzCwErUJrMzmnc0PaFkm4BPtWmWPYAlgLuLH3KELAwsCvwvTa9Z8R40U3neuN7GbhR0uXA2yn31WOYUlGPMZK2ANYGNqY0dfU4knJSn9NHsQP6WT6YRXs9tvGM7ecaYlkVeDOwPXB9w3afr7Gkoo4Ypm461/uJ75XAlpRObrEA0vQ99uwBnGP7Btv39UyUSvEdkib1LmD7cuDqPva1X69nKx/stf5x4KmGaZte6z8EXGf7d71i+T6woaQNageTx9PBJGLIuulc772fJ4DfAccDP4bnO5PlXB8GlRaKiIiI6Ea5oo6IiOhiqagjIiK6WCrqiIiILpaKOiIiooulol5Akn4rqd/BAST9r6T/anJfl0jqb+SggcpZ0suHWi4i2qNmrTq503GMdpL2l3RMp+PotFTUfahp5bZtZlvb29s+sZb7sKTLeq3/hO1D2xFnK9UUdV/rdBwRo4WkXSVNr48c3Vt/tG/Zwv0POZ3sWGP767aHfPEy1qSijpboxi+TbowpxgZJ+1DGsv46JTvUGsD/ADt3Mq5G+fsfO1JRD6LnKlnStyXNlnRb49i1Pc3VktYD/hfYov7CfqSuf/5KVdLykn4taVbd168lrdZkHBNrM9A/G5Kyr97HdvM1nzde5av4jqQHJD0m6YY66MhewAd5YbCCX9XtV5F0Vo33NkmfbdjvNElnSjpZ0mPAh/uIZXFJR0q6Q9Kj9TguXtftJOmmmgDgknr8kPQlSWf22s/3JH2/vl5W0rH1CmampK+p5rutn/Xy+hkfAqZJWlvSHyQ9JOlBSadIWq5h35tI+ks9pj+X9LPGlgVJ75B0XY3zCkkbNvP/FWOXpGUpo2192vYvbD9he67tX9n+Yh/bbyXp7l7Lnm+1k7RZvTJ/TNL9ko6qm11a/32knpdb1O0/KmlG/Q65QNKaDfu1pE9L+gfwj37i37z+LT8i6a+StqrLJ0m6W9KOdX4pSbdI2r3On6ByK+/Cer78sdd7f0/SXfVzXCvp3xrWTZN0hqSTatmbJE1tWP+lej7PkfR3SW9uKHdyw3Z9fm80HNMvSLq+ft/8TFJf45qPPrYz9ZqA24Ft6+sPA3OBjwMTgU8C9/DCYDGXAB9r2PayXvs6Afhafb0CJXfsEsDSwM+BXzZs+/y++ojpi8ANwLqU8bJfA6xQ1xl4eV/7aIwJeBtwLbBc3cd6wMq946zzE+q2XwUWAV4G3Aq8ra6fVo/LO+u2i/cR8w9rPKvWY/d6YFHgFcATwFso437vB9xS32dN4Elg6bqPicC9wOZ1/mzKSEdLAi+hjLL0Hw2fdR6wN2V43MWBl9f3WRSYTPny+27dfhHgDuBzNY53U/L29vx/bQw8ALyuxrEH5W9j0U7/jWbq3ARsV//OFhpgm2nAyfX1VsDdvdbfzgvfMVcCH6qvl2r4W59Sz+2FGsrtXM+V9erf+IHAFQ3rDVxIyQPd1zm5KvAQZSzwCfXceAiYXNe/Fbivnls/Ac5sKHsCMAd4Yz2fvkfD9x0l3/UKNa59634Wazge/6rvOxE4HPhTXbcucBewSsPnXruP49jv90bDMb0aWKV+/hnAJzr999KKKVfUzbnD9k9c0rWdCKzMMJKh237I9lm2n7Q9BzgMeFOTxT8GHGj77y7+avuhIYYwl/ID4ZWUHxozbN/bz7avpZy8h9h+xvatlBP3Aw3bXGn7l7af8wvZfACQNAH4KPA52zNtP2v7CttPA/8O/Mb2hS6pL79NqVRfb/sO4M+UrFtQhip80vafJK1EOdE/73IV8wDwnV4x3WP7B7bn2X7K9i31fZ62PQs4iheO+eaUL5Xvu1wR/YL5h1fcC/ix7atq/CcCT9dyMX6tADxoe16L9jcXeLmkFW0/bvtPA2z7CeDweu7OozS9b9R4ZVvXP9z7nKx2A86zfV49by8EplPOK2z/jnIBcVFd9h+9yv/G9qX1PD6A0oK4ei17cv2Om2f7SEplvm5D2cvq+z4L/JRysQHwbN12fUkL277d9j/7iL3f742Gbb5v+x7bDwO/Ajbq5ziOKqmom9OTmQbbT9aXSw11J5KWkPTj2hT8GOXqbrmepttBrA709cfbNNt/AP6bcqX7gKSjJS3Tz+ZrAquoIUctsD/z/0C5a4C3W5GSTq+vmFehXMn2xPVc3deqddGpwC719a51viemhYF7G2L6MeXXf58xSVpJ0um1We0x4OQaW08cM11/jvdRfk1g317HYPVaLsavh4AV1bp7wHtSrhb/JukaSe8YYNs1ge81/D0+TGkdW7Vhm4HOyzWB9/X6m96ScvHR42hgA+CEPi4Gnt+37cfr+68CUJudZ9Rm50eAZXnhXIOG71FKq9likhayfQslUc80yvfS6ZL6OscG+97o6z2G/D3djVJRt9ZgA6fvS/mF+Trby1CakKCcaIO5i5IpZzBPUJrWe7x0vgDt79veFFif8uXQc0+td+x3Abd5/hy1S9veoXF3A8TxIKWpq6+Y76F8YQDl3jmlApxZF/0c2Erl/v27eKGivotyRbtiQ0zL2H7VADF9vS57dT3mu/HC8b4XWLW+f4/G+/53AYf1OgZL2D5tgM8dY9+VlL/Ddza5/XznZP1h/nw+dtv/sL0L5QfnN4EzJS1J3+fXXZRbPY1/k4vbvqJhm4HOy7uAn/Yqv6TtbzTEdjRwEvApvfixz+fPD0lLUZqY76n3o/cD3g8s75KT+lGa+27D9qm2t6R8L7geh94G+94Ys1JRt9b9wGqSFuln/dKUzDOPqGS2OWgI+z4GOFTSOio2lLRCH9tdB7y7Xr2/nPJrHQBJr5X0OpWk8k9QKtKeVHX3U+5D97gamFM7eSyu0pltA0mvbSbY+mv3OOAolU5pEyVtIWlR4Azg7ZLeXGPZl/LFd0UtO4tyb/t4yo+FGXX5vZSMPEdKWkbSBJXOYgPdPliakvnnUZW0m42dfa6kNLt9RtJCknYGNmtY/xPgE/WYSdKSkt4uaelmjkGMTbYfpfTd+KGkd9ZzbWFJ20s6oo8i/0e5enx7/Xs/kNLUC4Ck3SRNrufMI3Xxc5TUlc8x/3n5v8BXJL2qll1W0vuGEP7JwI6S3lbPycVUOrv1dGrdn1JRfhT4FnBSrxa/HSRtWb/jDqXcZ76Lcp7NqzEvJOmrQH+tdfORtK6kbep3w78o35F9pdAc8HtjLEtF3Vp/AG4C7tOL08RBeZxjccrV5p+A84ew76Mof6i/Ax4Djq376u07lA5R91Pup5/SsG4ZSuUzm9KE9BDlZKTub/3aHPbLeh/pHZR7PLfVmI+hNGc16wuUDnDXUJrIvglMsP13ypXtD+p+dwR2tP1MQ9lTgW154Wq6x+6UTmA3189xJvM32/V2MLAJ5df9b4Bf9Kyo7/duyo+ZR2pMv6ac/NieTulE+N/1vW6hj97tMf7Ue7D7UCrdWZQr1c8Av+xj20eBT1HOn5mUH8mNvcC3A26S9Dilg9YHav+KJyn9WC6v5+Xmts+mnEen11s5N1LyvTcb912UDmn7N8T9RWCCpE3rZ9q9nv/fpFTaX27YxamUC4yHgU0p5wzABZTvs/+jfLf8i4Gb4BstCnyD8l3Q05HtK33E3sz3xpiUNJcRDSRdBfyv7eM7HUtEN5F0AqX3+oGdjmW8yRV1jGuS3iTppbXpew9gQ4bW0hER0VYZuSbGu3UptxSWpDwn/t4BHlmLiBhxafqOiIjoYmn6joiI6GKjrul7xRVX9JQpUzodRkTbXHvttQ/anjz4lmNbzvUY65o910ddRT1lyhSmT5/e6TAi2kbSHYNvNfblXI+xrtlzPU3fERERXSwVdURERBdLRR1jzmmnncYGG2zAxIkT2WCDDTjttAzNHRGj16i7Rx0xkNNOO40DDjiAY489li233JLLLruMPfcsw53vsssug5SOiOg+uaKOMeWwww7j2GOPZeutt2bhhRdm66235thjj+Wwww7rdGgREcOSK+oYU2bMmMGWW24537Itt9ySGTNmdCiiGA/mz5T6YhlYKhZErqhjTFlvvfW47LLL5lt22WWXsd5663UoohgPbD8/9Z5PJR0LKhV1jCkHHHAAe+65JxdffDFz587l4osvZs899+SAAw7odGjjQs1vfLWkv0q6SdLBdflakq6SdIuknw2Qsz0ieknTd4wpPR3G9t57b2bMmMF6663HYYcdlo5kI+dpYBvbj0taGLhM0m8peY6/Y/t0Sf9LyQH+o04GGjFapKKOMWeXXXZJxdwhLu28j9fZhetkYBtg17r8RGAaqagjmpKm74hoKUkTJV0HPABcCPwTeMT2vLrJ3cCq/ZTdS9J0SdNnzZo1MgFHdLlU1BHRUraftb0RsBqwGfDKIZQ92vZU21MnTx73eUkigFTUEdEmth8BLga2AJaT1HOrbTVgZscCixhlUlFHRMtImixpufp6ceAtwAxKhf3eutkewDmdiTBi9ElnsohopZWBEyVNpFwInGH715JuBk6X9DXgL8CxnQwyYjRJRR0RLWP7emDjPpbfSrlfHRFDlKbviIiILpaKOiIioouloo6IiOhiqagjIiK62KAVtaRXSLpI0o11fkNJB7Y/tIiIiGjmivonwFeAufB8r84PtDOoiIiIKJqpqJewfXWvZfP63DIiIiJaqpmK+kFJa1My4CDpvcC9bY0qIiIigOYGPPk0cDTwSkkzgduA3doaVURERABNVNR1RKFtJS0JTLA9p/1hRUREBDRRUUvap9c8wKPAtbavG6TsdsD3gInAMba/0Wv9JyhX7M9Sks3vZfvmoXyAiIiIsayZe9RTgU9QEr2vCvwHsB3wE0n79VeoDsr/Q2B7YH1gF0nr99rsVNuvrrlrjwCOGvpHiIiIGLuaqahXAzaxva/tfYFNgZcAbwQ+PEC5zYBbbN9q+xngdGDnxg1sP9YwuyS1w1pEREQUzXQmewnwdMP8XGAl209JerqfMlCuvu9qmL8beF3vjSR9GtgHWATYpq8dSdoL2AtgjTXWaCLkiIiIsaGZK+pTgKskHSTpIOBy4NTauWyB7yfb/qHttYEvAX2OeGb7aNtTbU+dPHnygr5lRLSJpNUlXSzpZkk3SfpcXT5N0kxJ19Vph07HGjFaNNPr+1BJ5wOvr4s+YXt6ff3BAYrOBFZvmF+tLuvP6cCPBosnIrraPGBf23+WtDRwraQL67rv2P52B2OLGJWaafrG9jWS7gAWA5C0hu07Byl2DbCOpLUoFfQHgF0bN5C0ju1/1Nm3A/8gIkYt2/dSB0SyPUfSDMptsIgYpmaScuwk6R+UgU7+WP/97WDlbM8DPgNcAMwAzrB9k6RDJO1UN/tMbR67jnKfeo9hfo6IaCFJ75b0D0mPSnpM0hxJjw1ecr59TAE2Bq6qiz4j6XpJx0lavp8ye0maLmn6rFmzFugzRIwVsgfuaC3pr5ROXr+3vbGkrYHdbO85EgH2NnXqVE+fPn3wDSNGKUnX2p7a4RhuAXa0PWOY5Zei/LA/zPYvJK0EPEh5suNQYGXbHx1oH6P1XJfEYN+rEdD8ud5MZ7K5th8CJkiaYPtiyrPVETF23b8AlfTCwFnAKbZ/AWD7ftvP2n6OkpFvs9aFGjG2NXOP+pH66/hS4BRJDwBPtDesiOiw6ZJ+BvyShsczeyre/qgMXXgsMMP2UQ3LV673rwHeBdzY+pAjxqZmKuqdgaeA/6T08l4WOKSdQUVExy0DPAm8tWGZgQErauANwIeAG2rfE4D9KSMTblT3cTtlhMOIaMKAFXUdBvTXtrcGngNOHJGoIqKjbH9kmOUuA9THqvMWLKKI8WvAe9S2nwWek7TsCMUTEV1A0mqSzpb0QJ3OkrRap+PqFpMmTUJSnxPQ77pJkyZ1OPIYjZpp+n6c0ox1IQ33pm1/tm1RRUSnHQ+cCryvzu9Wl72lYxF1kdmzZw+rZ3dPRR4xFM1U1L9g8PtSETG2TLZ9fMP8CZI+37FoIsaxZoYQPVHS4sAatv8+AjFFROc9JGk34LQ6vwvwUAfjiRi3mhmZbEfgOuD8Or+RpHPbHVhEdNRHgfcD91GGBH0vMKwOZhGxYJpp+p5GGZzgEgDb10l6WRtjiogOs30HsNOgG0ZE2zVTUc+1/WivThDPtSmeiOggSfvZPkLSDyjPPM8nnUgjRl4zFfVNknYFJkpaB/gscEV7w4qIDukZNnT0DbIdMUY1U1HvDRxAGUbwVEo2rK+1M6iI6Azbv6r/Pj+4kaQJwFK2h5Q9KyJao5mkHK+0fYDt19bpQNv/antkEdExkk6VtIykJSnjct8s6YudjitiPGqmoj5S0gxJh0raoO0RRUQ3WL9eQb+Tkn9+LcoY3hExwgatqOs431sDs4AfS7pB0oFtjywiOmnhmq7yncC5tufSR+eyiGi/Zq6osX2f7e8Dn6A8U/3VtkYVEZ32Y0qWqyWBSyWtCeQedUQHNDPgyXqSpkm6EfgBpcd3BuePGMNsf9/2qrZ3cHEHpWUtIkZYM72+jwNOB95q+542xxMRXUDSosB7gCnM/z0xYC56SasDJwErUZrKj7b9PUmTgJ/V/d0OvN/27JYHHjEGNXOPegvgR8AkSRvU+1YRMbadA+wMzKNkzeuZBjMP2Nf2+sDmwKclrQ98GbjI9jrARXU+Ipow6BW1pDdRfiHfTkkIv7qkPWxf2ubYIqJzVrO93VAL2b6XMjY4tudImgGsSqn0t6qbnUgZkvhLLYk0Yoxrpun7KEqz998BJL2CklFn03YGFhEddYWkV9u+Ybg7kDQF2Bi4ClipVuJQEn2s1E+ZvYC9ANZYY43hvnXEmNJMr++FG9Nb2v4/IM3fEWPblsC1kv4u6fr6WOb1zRaWtBRwFvD53iOa2Tb9POpl+2jbU21PnTx58oLEHzFmNHNFPV3SMcDJdf6DZBzgiLFu++EWrP1YzgJOsf2Luvh+SSvbvlfSysADrQgyYjxo5or6k8DNlGQcn62vP9nOoCKis2zfUR/Jeopy9dvvVXAjlTR7xwIzbB/VsOpcYI/6eg9KZ7WIaEIzV9QLAd/rOekkTQQWbWtUEdFRknYCjgRWoVz9rknJrPWqQYq+gTLU6A2SrqvL9ge+AZwhaU/gDuD97Yg7YixqpqK+CNgWeLzOLw78Dnh9u4KKiI47lPJ41e9tbyxpa2C3wQrZvozydEhf3tzC+CLGjWaavhez3VNJU18v0b6QIoZH0oBTDMlc2w8BEyRNsH0xMLXTQUWMR81cUT8haRPbfwaQtCnlvlVEVymdiV8g6UXLommP1J7b/w84RdIDNDfgSUS0WDMV9eeBn0u6h9Kk9VLg39saVUR02s7Avyjn/weBZRlk+NCIaI9BK2rb10h6JbBuXfT3mvIuIsYo209IeimwGfAwcEFtCo+IEdZsmsu5tm+sU9OVtKTt6oAJt0h60di+kvaRdHMdUOGimkovIjpM0seAq4F3A+8F/iTpo52NKmJ8aqbpe1jqY1w/BN4C3A1cI+lc2zc3bPYXYKrtJyV9EjiCNKtHdIMvAhv3XEVLWoGS4va4jkYVMQ4NeEWtYvVh7nsz4Bbbt9p+hpIqc+fGDWxfbPvJOvsnkuc6hmjSpEkD9vLub92kSZM6HHnXewiY0zA/py6LiBE24BW1bUs6D3j1MPa9KnBXw/zdwOsG2H5P4LfDeJ8Yx2bPnj2snt15XGtQtwBXSTqHMiLZzsD1kvYB6DXqWES0UTNN33+W9Frb17QrCEm7UZ7RfFM/65NRJ2Jk/bNOPXqG/Fy6A7FEjGvNVNSvAz4o6Q7Kc5SiXGxvOEi5mUBjs/lqddl8JG0LHAC8yfbTfe3I9tHA0QBTp07Ng7ER7fdN2/9qXCBpRdsPdiqgiPGqmYr6bcPc9zXAOpLWolTQHwB2bdxA0sbAj4HtbCebTkT3uFrSXrb/BCDpPcDhwCs6G1bE+NPMc9R3SNoSWMf28ZImA0s1UW6epM8AFwATgeNs3yTpEGC67XOBb9V9/bzeM7zT9k4L8HkiojU+CBwn6RJKYo4VgG06GlEX8UHLwLRlh1cuYogGraglHUS5f7wucDywMCU39RsGK2v7POC8Xsu+2vB62yHGGxEjwPYNkg4Dfkrp8f1G23d3OKyuoYMfG3YnRk9rfTwxtjXT9P0uYGPgzwC275GUDiURY5ikY4G1gQ0pzd2/lvQD2z/sbGQR408zI5M94/LT0QCSlmxvSBHRBW4AtrZ9m+0LKJ1KN+lwTBHjUjMV9RmSfgwsJ+njwO+BY9obVkR0ku3vAotJWrfOP2p7z8HKSTpO0gOSbmxYNk3STEnX1WmHNoYeMeYMWlHb/jZwJnAW5T71V21/v92BRUTnSNoRuA44v85vJOncJoqeAGzXx/Lv2N6oTuf1sT4i+tFMZ7Jv2v4ScGEfyyJibJpGGQb4EgDb10l62WCFbF8qaUo7A4sYb5pp+n5LH8u2b3UgEdFV5tp+tNey5xZgf5+pWfKOk7R8fxtJ2kvSdEnTZ82atQBvFzF29FtRS/qkpBuAdesJ1jPdBlw/ciFGRAfcJGlXYKKkdST9gJI9azh+ROlBvhFwL3BkfxvaPtr2VNtTJ0+ePMy3ixhbBmr6PpWSJONwoDGX9BzbD7c1qojotL0pQ/s+TfkuuAD42nB2ZPv+nteSfgL8uhUBRowX/VbUtdnrUUkHAvfZflrSVsCGkk6y/chIBRkRI6umnz2gTgtE0sq2762z7wJuHGj7iJhfM/eozwKelfRySmKM1Sm/sCMi5iPpNOBKyi2zuyXtCRwh6QZJ1wNbA//Z0SAjRplmRiZ7ro7b/W7gB7Z/IOkv7Q4sIkYf27v0sfjYEQ8kYgxp5op6rqRdgN154d7Swu0LKSI6SdJESbnqjegSzVTUHwG2AA6zfVtNW/nT9oYVEZ1i+1mgryvjiOiAZtJc3gx8tmH+NuCb7QwqIjruckn/DfwMeKJnoe0/dy6kiPGpmZHJbqMm5Ghke9BRiiJi1Nqo/ntIwzKTnNQRI66ZzmRTG14vBrwPmNSecCKiG9jeutMxRETRTFKOhxqmmTWrzttHILaI6BBJK0k6VtJv6/z69VGriBhhzTR9N+agnUC5wm7mSjwiRq8TgON5YcCT/6Pcr86jVhEjrJkKt3Fc3nnA7cD72xJNRHSLFW2fIekrAHUshWc7HVTEeNRMr+/cq4qu5YOWgWnLDq9cDOQJSStQO5JK2hzonU0rIkZAvxW1pH0GKmj7qNaHEzE0Ovgx7Bc9lDB4OQlPa308Y8g+wLnA2pIuByZTOpJGxAgb6Ip66RGLIiK6zU3Am4B1AQF/p7kBkiKixQbKnnXwSAYSEV3lStubUCpsACT9Gdik/yIR0Q6D/kKWdKKk5Rrml5d0XHvDiohOkPRSSZsCi0vaWNImddoKWKLD4UWMS830+t6wMfe07dmSNm5jTBHROW8DPgysRnniQ3X5HGD/DsUUMa41U1FPkLS87dkAkiY1WS4iRhnbJwInSnqP7bOGWr62tr0DeMD2BnXZJMoz2FOoj3f2fJ9ExOCa6RxyJHClpEMlHQpcARzR3rAiosNWk7SMimMk/VnSW5sodwKwXa9lXwYusr0OcFGdH/UkDXlafvnlOx12jELNDCF6EvBu4P46vdt20lxGjG0ftf0Y8FZgBeBDwDcGK2T7UuDhXot3Bk6sr08E3tnCODvCdr/TQOsffrj3oYkYXFNN2DXV5c1tjiUiukfPvekdgJNs3yRJAxUYwEq2762v7wNW6vdNpb2AvQDWWGONYb5dxNiS5yJj1EsTZFtcK+l3lIr6AklLA88t6E5dLjn7HaHG9tG2p9qeOnny5AV9u4gxIZ3CYlQbaFQyScMatSwA2JOSk/pW20/W4UQ/Msx93S9pZdv3SloZeKBlUUaMA6moI6IvW9Z/Nxx+i/fzzgX2oNzj3gM4Z0F3GDGeDDTW9xz6bqISpQVr0KwGkrYDvgdMBI6x/Y1e698IfBfYEPiA7TOHEHtEtM8XG14vBmwGXAtsM1AhSacBWwErSrobOIhSQZ9R81nfQbLvRQzJQEOILtBY35ImAj8E3gLcDVwj6dzaMa3HnZTBFb6wIO8VEa1le8fGeUmrU35UD1Zul35WvbkxnqRhAAAgAElEQVQVcUWMR003fUt6CeWXNQC27xykyGbALbZvreVPpzym8XxFbfv2um6BO6lERFvdDazX6SAixqNBK2pJO1EGPVmF0glkTWAG8KpBiq4K3NUwfzfwuuEEmUc2IkaWpB/wwq2vCZSOZX/uXEQR41czV9SHApsDv7e9saStgd3aG9b8bB8NHA0wderUdOONaL/pDa/nAafZvrxTwUSMZ81U1HNtPyRpgqQJti+WNOi9KmAmsHrD/Gp1WUR0uTrmd0R0gWYq6kckLQVcCpwi6QHgiSbKXQOsI2ktSgX9AWDXYUcaEW0n6QYGftpjwxEOKWLca6ai3hn4F/CfwAeBZYFDBitke56kzwAXUB7POq4OQ3gIMN32uZJeC5wNLA/sKOlg24Pd+46I9nlHpwOIiPkNWlHbbrx6HlJzmO3zgPN6Lftqw+trKE3iEdEdFqaMzT3f/WhJb6CM0x0RI6zfsb4lXVb/nSPpsYZpjqTHRi7EiBhB3wX6Or8fo4nnqCOi9QYa8GTL+u8CDXwSEaPKSrZv6L3Q9g2Spox8OBExaPYsSS/KPd3XsogYE5YbYN3iIxZFRDyvmTSX83XukrQQsGl7womIDpsu6eO9F0r6GGWs74gYYQMl5fgKsD+weMM9aQHPUAcfiYgx5/PA2ZI+yAsV81RgEeBdHYsqYhwb6B714cDhkg63/ZURjGnMGCw9YHIlR7exfT/w+joC4QZ18W9s/6GDYUWMawNdUb/S9t+An0vapPd62xn3dxCNFbGkVMwxati+GLi403FExMDPUe9DSYRxZB/rzCB5aSMiGkm6HZgDPAvMsz21sxFFjA4DNX3vVf/deuTCGd0mTZrE7Nmz+13fX1P48ssvz8MPP9yusCK6yda2H+x0EBGjSVP5qCW9HpjSuL3tk9oU06g1e/bsYTVvD3YvOyIixq9m8lH/FFgbuI7SZAWl6TsVdXSVvn7wNC5LH4GOM/A7SQZ+XNPXzie55yNerJkr6qnA+s63XHS5/Il2vS1tz5T0EuBCSX+zfWnjBsk9H/FizVTUNwIvBe5tcyyjng9aBqYtO7xyEWOc7Zn13wcknQ1sRkmfO+r1bs3pPZ8fkbEgmqmoVwRulnQ18HTPQts7tS2qUUoHPzbse9Se1vp4IrqFpCWBCbbn1NdvpYl0uaNFKuJop2Yq6mntDiIixryVKCOeQfneOdX2+Z0NKWJ0aCYf9R9HIpCIGLts3wq8ptNxRIxGA41MNofSS/NFqwDbzo3ViIiINhtowJPkoY6IiOiwZtJcRkRERIekoo6IiOhiTQ0hGs0bznCgyy+/fBsiiYiIsSAVdQsN9Cxl0lxGRMRwpOk7IiKii6WijoiIrjdp0iQkDWmaNGlSp8NuiTR9R0RE13v4s88CQx2+49nBNxkFUlFHRETXG04uhbGSRyFN3xEREV0sV9QRETEqDPXx17Hy6Gsq6oiI6Hrj+fHXVNRtlGTyERGt19eVdeOysfbdmnvUbWR7wCliPJG0naS/S7pF0pc7HU+MXuPtu7WtFfVgJ6akRSX9rK6/StKUdsYTEZ0haSLwQ2B7YH1gF0nrdzaqiNGhbRV1kyfmnsBs2y8HvgN8s13xRERHbQbcYvtW288ApwM7dzimiFGhnVfUzZyYOwMn1tdnAm/WcLJaRES3WxW4q2H+7rpsPpL2kjRd0vRZs2aNWHAR3aydFXUzJ+bz29ieBzwKrNB7Rzl5I8YH20fbnmp76uTJkzsdTkRXGBWdyXLyRox6M4HVG+ZXq8siYhDtfDyrmROzZ5u7JS0ELAs8NNBOr7322gcl3dHKQEfIisCDnQ5inBmtx3zNTgfQBtcA60hai3LefwDYdaACOddjCEbrMW/qXG9nRd3MiXkusAdwJfBe4A8epG+97VF5SS1puu2pnY5jPMkx7x6250n6DHABMBE4zvZNg5TJuR5NGevHvG0VdX8npqRDgOm2zwWOBX4q6RbgYUplHhFjkO3zgPM6HUfEaNPWkcn6OjFtf7Xh9b+A97UzhoiIiNFsVHQmGyOO7nQA41COeXRC/u5G3pg+5hqLw61FRESMFbmijoiI6GKpqCMiIrpYKuqIiIguloo6IiKii6WijoiI6GKpqCMiIrpYKuqIiIguloo6IiKii6WijoiI6GKpqCMiIrpYKuqIiC4m6XZJT0l6XNL9kk6QtFSvbU6QNE/Syr2WT5NkSe9vWLZQXTaloewzdf8901/ruil120ETODXsZ06dbpR0uKRlW3EcxrNU1BER3W9H20sBmwBTgQN7VkhaEngP8CiwWx9lHwYOljRxgP0fYXuphuk1w4zzCNtLA5OBjwCbA5fXGGOYUlFHRIwStmcCvwU2aFj8HuAR4BBgjz6KnQ88Q9+VeFvY/pfta4CdgBUolXYMUyrqiIhRQtLqwA7AXxoW7wGcBpwOvFLSpr2KGfgv4CBJC49IoD1vbM8BLgT+DUDSGpIekbTGSMYx2qWijojofr+U9AhwGfBH4OtQKj5ga+BU2/cDFwG79y5s+1xgFvCxfvb/hVqB9kwntjD2e4BJNY47bS9n+84W7n/MS0UdEdH93lkruDVtf8r2U3X5h4AZtq+r86cAu/Zz5XwgcACwWB/rvl333zP11YQ+XKtS7pPHMKWijogYvXYHXibpPkn3AUcBK1Kax+dj+0LgFuBTIxVc7Z2+LfD/Ruo9x6JBu9xHRET3kbQFsDawMaVZu8eRlAr8nD6KHdDP8sEs2usRrWdsPzdAbItSOrx9E5gNHD+M94wqV9QREaPTHsA5tm+wfV/PBHwPeIekSb0L2L4cuLqPfe3X6znqB3utfxx4qmHapp+Y9pM0B3gIOAm4Fni97Sfg+c5kj6cz2dDIdqdjiIiIiH7kijoiIqKLpaKOiIjoYqmoIyIiulgq6oiIiC6Wijoiog+S9pd0TAv319PjeaDkGDEMY/3YpqIepUZL6ru6/WaSzqtDEz4s6WpJGaQ/Ok7SrpKm17/veyX9VtKWALa/bvtjdbsh/c3XMrdL2rZnvg6fuZTtZ1v/SUaH4RzHfvYzro5tKurRretT39VBGf5AGZ/45ZRMOp8Eth/qviJaSdI+wHcp42avBKwB/A+wcyfjGu8WtBIfi1JRjwFdnvruW8CJtr9p+0EX19p+/6AlI9pE0rKUc+PTtn9h+wnbc23/yvYX6zbTJJ1ci1xa/32kXn1vIWltSX+Q9JCkByWdImm5WvanlIr/V3X7/XpfTUpaRdK5tZXpFkkfb4hvmqQzJJ0kaY6kmyRNHeDzvErShXVf90vavy5fVNJ3Jd1Tp+/WUcOQtJWkuyXtK+mB2qLwkYZ9Li7pSEl3SHpU0mWSFq/rNpd0RW0l+6ukrRrKXSLpUEmX19h/J2nFAY7jh+u235H0EDCtm45tN0hFPQaoS1PfSVoC2AI4c5DtHulpbowYIVtQklOc3eT2b6z/Lldbl64EBBwOrAKsB6wOTAOw/SHgTmqrl+0j+tjn6cDdtfx7ga9Lahzxa6e6zXLAucB/9xWYpKWB31N+fK9Cabm6qK4+ANgc2Ah4DbAZDS1vwEuBZSmJM/YEfihp+bru28CmwOsp2a/2A56TtCrwG+BrdfkXgLMkTW7Y766UHNQvARap20DfxxHgdcCtlJaNw+iSY9stUlGPbt2e+m55yt/YvQNtVLP1XDbEfUcsiBWAB23PG+4ObN9i+0LbT9ueRUmI8aZmytYf128AvmT7XzX71THMf55eZvu8et/1p5SKti/vAO6zfWTd1xzbV9V1HwQOsf1AjfFgSsatHnPr+rm2z6MMFbqupAnAR4HP2Z5p+1nbV9h+mtIKd16N7bma7GM68ycCOd72/9UsX2dQfigM5B7bP7A9z/ZTXXRsu0Iq6tGt21PfzQaeA1YebMOIEfYQsOKC3A+VtJKk0yXNlPQYcDIlc1UzVgEetj2nYdkdlCvbHvc1vH4SWKyfeFcH/jnA+9zR6z1WaZh/qNePlSeBpSifY7F+9rsm8L7GH/HAlsx/nveOfb6Orn24q3Gmi45tV0hFPTZ1Reo7208CV1Lul0d0kyuBp4F3Nrl9X0kRvl6Xv9r2MpQrTQ1Spsc9wKTabN1jDWBmk/E0ugt42QDvs2av97iniX0+CPyLkp2rr/f7aa8f8Uva/kYT++3vmPRe3i3Htiukoh5j9ELqu80ozU0bUTqZnUofzd/VAZT7T0O1qKTFGqa+/p72Az4s6YuSVqgxvkbS6cN4v4iWsP0o8FXKPdl3SlpC0sKStpfU1z3PWZTWocYKcWlKU/Gj9b7tF3uVuZ9+KlDbdwFXAIfXc2dDyj3ik/vafhC/BlaW9PnaeWxpSa+r604DDpQ0uXbo+moz71FTWB4HHFU7Zk2sHb8WreV3lPS2unyx2jFttSZi7es49qVbjm1XSEU99nRV6jvbV9Tl2wC3SnoYOBo4r2ebuu9/G9anjRgm20cC+1Bu/8yiXCl+BvhlH9s+SenkdHlt7t2ccr93E8ojkL8BftGr2OGUSvIRSV/gxXYBplCuAM8GDrL9+2F8jjnAW4AdKU26/6D0UYHS4Ws6cD1wA/DnuqwZX6hlrqE8zvlNYEKtCHcG9ueF4/ZFmqhP+jmOfemKY9stkuYyIiKii+WKOiIioouloo6IiOhiqagjIiK6WCrqiIiILpaKOgalDqSQ0/zjLEfEEOT8GVtSUQ9CA6TB6za9B6ZfgP2MqxRyERHdLBX1ADQG0+B18zB5ERHxYqmo+6Hm0uAlhVyb0vNVi/S3H0lflvTPuu5mSe9qWPfhejy/LWm2pNskbd+wfi1Jl9ayv5f0w8ZmwoGOf0Q3yfkzTtjO1McEbAfMAxYaYJtDgD9RUrlNpgxbd2hdt1UtfwiwMGWc7SeB5ev6HwKXUAaKn0hJJbdonX+obj+BMuLQQ8DkWu4SykD5rwAWr/PfqOumUMbAXaghxg/XOPYGFqplXl73u2iN+1Lguw1lbge2bZifb791+/+hDNq/EWV0om3qummUMYJ3qJ/rcOBP/Ry/pSmZtfat+1oaeF0z+wHeRxl8fwLw78ATwMoNn3ku8PFa9pOUEYp6Bvi5kpLCbxFKMoHHgJPrugGPf6ZM3TLl/Bk/U8cD6NaJkh7uvkG2+SewQ8P824Db6+utKMNqNlaaD1Byw06o617Txz6/RBnwvnHZBcAe9fUlwIEN6z4FnF9fT6HvivrOQT7HO4G/NMzfTj8VNSVTz7PA0g3rDwdOqK+nAb9vWLc+8FQ/77tL4/v2Wtf0fur664CdGz7zLQ3rlqjxv5TSWjAPWKJh/ckNXzQDHv9MmbplyvkzfqY0ffevmTR4SSFXtCM934D7kbS7pOsajtEGvT7D82VdxheGcpx64n+yYdvG49PM8Y/oBjl/xolU1P1rJg1eUsgV7UjP1y9JawI/oSRQWMH2csCNzP8Z+nMvJf4lGpat3ium4R7/iJGU82ecSEXdDzeXBi8p5NqXnm8gS1J+TMwCUOmkt0Ezb2j7Dko2oWmSFlFJC7pjwyYLcvwjRlLOn3EiFfUAPHgavKSQa196voHK3QwcSWn1uB94NXD5EN76g8AWlNsbXwN+Rmk9YUGOf8RIyvkzfiTNZYx7kn4G/M32QZ2OJWK0yfnTfvmVE+OOpNeqPEs+QdJ2lCuAXw5WLiJy/nRCRqmK8eillOb+FYC7gU/a/ktnQ4oYNXL+jLA0fUdERHSxNH1HRER0sVHX9L3iiit6ypQpnQ4jom2uvfbaB21P7nQcnZZzPca6Zs/1UVdRT5kyhenTp3c6jIi2kXTH4FuNfTnXY6xr9lxP03dEtIyk41Syxd3YsGxSzfD0j/rv8p2MMWK0SUUdEa10AiXzXKMvAxfZXge4qM5HRJNSUUdEy9i+lDLSXqOdgRPr6xMZePz8iOglFXVEtNtKtu+tr+8DVupvQ0l7SZouafqsWbNGJrqILpeKOiJGjMvADf0O3mD7aNtTbU+dPHncd3yPAEZhr+/RRBo4a1wGm4lx4n5JK9u+V9LKwAOdDqjVcq5HO+WKuo1sPz/1ns+JG+PIucAe9fUewDkdjKUtcq5HO6WijoiWkXQaJX3iupLulrQn8A3gLZL+AWxb5yOiSWn6joiWsb1LP6vePKKBRIwhuaKOiIjoYqmoIyIiulgq6oiIiC6We9QRY5ik+X6M236uU7FExPDkijpijJG0iaQrJT0BzK3TvPpvRIwyuaKOGHtOBH4FfBR4ssOxRMQCSkUdMfasCRzgjLQRMSZ0vOlb0nKSzpT0N0kzJG3R6ZgiRrmzgbd2OoiIaI1uuKL+HnC+7fdKWgRYotMBRYxyiwFnS7qMkq3qebZ370xIETFcHa2oJS0LvBH4MIDtZ4BnOhlTxBhwc50iYgzo9BX1WsAs4HhJrwGuBT5n+4nOhhUxetk+uNMxRETrdPoe9ULAJsCPbG8MPAF8ufdGSSYfMTSStpJ0nKQL6r9bdzqmiBieTlfUdwN3276qzp9Jqbjnk2TyEc2T9DHgDMr96V8A9wKnSfp4RwOLiGFpWdO3pFcAPwJWsr2BpA2BnWx/rb8ytu+TdJekdW3/nZJhJ/fWIhbMfsBbbP+1Z4GknwFnAT/pWFQRMSytvKL+CfAV6uhHtq8HPtBEub2BUyRdD2wEfL2FMUWMRyvw4h+8fwcmdSCWiFhArexMtoTtqyU1Lps3WCHb1wFTWxhHxHh3GXCUpC/ZflLSksDhwBUdjisihqGVV9QPSlobMICk91LujUXEyPoE8BrgUUn3A4/U+f/oaFQRMSytvKL+NHA08EpJM4HbgN1auP+IaILte4E3SlodWBm4x/bdHQ4rIoapZRW17VuBbWsz2wTbc1q174gYmCT1jO3dkNpyZp2eX5Y0lxGjTyt7fe/Tax7gUeDaeh86ItrnUWCZ+noe9RZUA9VlE0cyqIhYcK1s+p5ap1/V+XcA1wOfkPRz20e08L0iYn6vani9VseiiIiWa2VnstWATWzva3tfYFPgJTSM5R0R7WH7robZ99m+o/cEvKdT8UXE8LWyon4J8HTD/FzK4CdP9VoeEe311X6WHziiUfQi6T8l3STpRkmnSVqsk/FEjBatbPo+BbhK0jl1fkfg1Nq5LKONRbSZpG3qy4l1bO/GQQ1eBnSsg6ekVYHPAuvbfkrSGZQBkU7oVEwRo0Ure30fKul84PV10SdsT6+vP9iq9+lmkyZNYvbs2f2u7zUYzPOWX355Hn744XaFFePHsfXfxYDjGpabMu733iMe0fwWAhaXNJeSd/6eDscTMSq0Os3lnymPgywEIGkN23e2+D261uzZs6lPyAxJfxV4xFDYXgtA0km2d+90PI1sz5T0beBO4Cngd7Z/13s7SXsBewGsscYaIxtkRJdq2T1qSXsD9wMXAr8GflP/jYgR1G2VNICk5YGdKT3SVwGWlPSiAZGSKS/ixVp5Rf05YF3bD7VwnxExRJKWAaYBbwJWpOFete1OXaZuC9xmexaApF9QbpOd3KF4IkaNVvb6vosy6EJEdNb/UPK6H0LJmLU3pcn5Ox2M6U5gc0lLqNzreTMwo4PxRIwarbyivhW4RNJvaHgcy/ZRLXyPiBjcW4H1bD8k6Vnb50iaThmMqCOVte2rJJ1J6ccyD/gLJTdARAyilRX1nXVapE4R0RkTeKF163FJy1Iy2b28cyGB7YOAgzoZQ8Ro1MrHsw4ebllJt1Oe8XwWmGc7+akjhu+vlPvTFwH/j9IU/jjwf50MKiKGp5VJOSYD+1HGHH5+xCHb2/RbaH5b236wVfFEjGMf54UOZJ8Dvg4sB3Rdb/CIGFwrO5OdAvyN8vjFwcDtwDUt3H9EDELSRMrY+ncD2H7A9sds/7vtjBAYMQq1sqJewfaxwFzbf7T9UaDZq2kDv5N0bR3wYD6S9pI0XdL0WbNmtTDkiLHF9rPApyhj7UfEGNDKirrni+FeSW+XtDHl0ZBmbGl7E2B74NOS3ti4MoMgRAzJScAnOh1ERLRGK3t9f632Lt0X+AElif1/NlPQ9sz67wOSzgY2Ay5tYWwR48lmwN6S9qOMb/D8uLa239hvqYjoSq3s9d0zXOijwNbNlqvZtSbYnlNfv5UyUENEDM9P6hQRY0Cre31/HJjSuN96r3ogKwFn18QUCwGn2j6/VXFFjEN/s31V74WSNutEMGNRMuXFSGpl0/c5lGc2f095Hroptm8FXtPCOCLGuwspt556O5/m+43EAJIpL0ZSKyvqJWx/qYX7i4ghkDSB8vy06njajbXC2pShOyNilGllr+9fS9qhhfuLiKGZBzwDLFFfz22YbqaMUBYRo8wCX1FLmkPpVSpgf0lPU74YBNh2X01wEdF6a1HOuz8Cjb27Dcyy/VRHooqIBbLAFbXtpVsRSEQsGNt31JdrdjSQiGipVvb6fhfwB9uP1vnlgK1s/7JV7xERg5M0CfgCsBGwVOO6Zp6jlrQCsAOwsu0jJK1CeYTy7nbEGxEDa2VnsoNsn90zY/sRSQcBqagjRtapwKLAGcCTQyko6U3AWcB04A3AEcA6lIp/x9aGGRHNaGVF3VfHtFbuPyKa83pgsu2nh1H2u8C/275IUs+DwldRRjuLiA5oZa/v6ZKOkrR2nY4Crm3h/iOiOdcDqw2z7BTbF9XXPQ8KP0N+dEd0TCtPvr2B/wJ+RjnBLwQ+3cL9R0Rz/gCcL+l44L7GFbaPG6TszZLeZvuChmXbAje0OMaIaFIrx/p+Avhyq/YXEcP2b5R81G/ptdzAYBX1vpQxEX4DLC7px5R70zu3PMqIaEqasyLGGNtNJ8Xpo+yfJL0G+CClUr8L2Cw9viM6JxV1C/mgZWDassMrF9FCDY9YvdT2t4byiFVNO3tEu2OMiOakom4hHfzYsAfq97TWxxPjUx+PWH2LJh+xkvRTGvJXN3ia0pz+S9t/bWnAETGglvX6ljRZ0v6SjpZ0XM/Uqv1HRNN6HrHajhcScTT7iNWjlPvRolTMAnaiZMRbD7hS0u7DCUrScpLOlPQ3STMkbTGc/USMNx1PcxkRLbcgj1i9AtjB9uU9C2qFeojtt0jajvJD4KRhxPU94Hzb75W0CCV5SEQMoivSXEqaSGmmm2n7HS2MKWI8WpBHrF5HufpuNJ0XrsYvYBjPaEtalpIo5MMAtp+h/HiIiEF0S5rLzwEzWhhLxHi2L3CKpBN54RGrE4AvNlH2OuAwSYsB1H8PBXruS68FPDyMmNYCZgHHS/qLpGMkLdl7I0l7SZouafqsWbOG8TYRY08rK+rPUSrrf0maU6fHBiskaTXg7cAxLYwlYtyy/SdgQ+AmyiNWt1EesbqmieJ7UJ7DfkzSfcBjlCvhPer6ScCnhhHWQsAmwI9sbwz0Oe6C7aNtT7U9dfLkycN4m4ixp5UDngw33eV3gf2AfstL2gvYC2CNNdYY5ttEjA+SFqXknz6iYdnCkhYdbPxv27cDr5e0OrAKcK/tOxvWTx9mWHcDd9vuaVY/kwyQFNGUVl5RI2knSd+u06D3mus2D9gecEzw/MqOGJILgU17LduUcn+5WU9TmqoXkvQySS9bkIBs3wfcJWnduujNwM0Lss+I8aKV+ai/AbwWOKUu+pykN9j+ygDF3gDsVO9tLwYsI+lk27u1Kq6IcejVvLhD2NXAawYrWHt1Hwus3GuVgYkLGNfelHvniwC3Ah9ZwP1FjAut7PW9A7CR7ecAakeWvwD9VtS1Ev9K3X4r4AuppCMW2KPASsyfkGMlyn3hwfyQ0nnsRNtPtTIo29cBU1u5z4jxoKVN38ByDa+HPpZmRLTCWcCpkjaQtISkV1Oeez6jibLLAz9udSUdEcPXyor6cOAvkk6oV9PXAoc1W9j2JXmGOqIlDqA87ng1MAf4E/B3YP8myh5LmqQjukore32fJukSyn1qgC/VDiQRMYJs/wv4tKTPACsCD7r5Qeg3Bz4r6cu8OJf1G1sbaUQ0Y4ErakmvtP03SZvURT3ZeVaRtIrtPy/oe0TE0NSRwNYFlqrzANj+wyBFjyFjGkR0lVZcUe9Decb5yD7WGdimBe8REU2S9GFKp7DHgScbVhkY8DEr2ye2L7KIGI4Frqht71Vfbl+b3J7XMwxhRIyow4D32v7tcApLWokytveKlOxZANhONryIDmjl41lXUIYIHGxZRLTXQsDvhlNQ0juBk4F/AK+iDEO6AXAZZTjSiBhhrbhH/VJgVcrg/xvzwi/wZUgau4hO+CZwoKRDe8Y1GIKvAR+x/f/bu+94uap67+OfbwoklyKBRHroYExoJvDQVAKCioiFB4FHwCstiBdRFLgSpV2jAvcCXooQDAoIka6CFBFCiaKQoEiJWBBQQIkEaVJC8nv+WGuSyck5J2fm7DN7yvf9es0rM3v2nqzszG/W3qv81tWSXoiIrSV9mlRpm1kJirijfj9p6bp1gDOrtr9M36aDmFmxvgCsARwn6fnqNyJiWcnyR0fE1V22XUIaAf6l4opoZn1VRB/1JcAlkvaOiGsLKJOZ9U9/svs9J2n1iPg78ISk7YF/0P/0oWZWpyLnUV8r6UOkJrJhVdtPLervMLNli4i7+nH4RcBOpOxmZwEzgIV0P6vDzBqgyEU5LiD1SU8kzcP8v6TMSGbWQJKGAl8BDiQtVfkMcBkwJSLe7O3YiDit6vmlOYnRChExZ+BKbGa9KTKF6A4RcRDwQkScAmwPbFrg55tZ35wOvA84grRi1hGkfAan9XZQV5IGkRIYPZafm1kJipyeVZlD/S9JawHPs/RSeWY28PYBtoyIykCyxyQ9ADxIGmjWo5xh8DxgCxZ3YYlilrk0szoUWVHfIGkV4AzgAVJgX1Tg55tZ36jG7dUuAW4ADmbJrGZmVpJCKurcLHZ7RPwTuFbSjcCwiHixiM83s5pcTbpwPgV4CliP1Gfdl2Uu1wMm17CIh5kNsEL6nXJShfOqXr/hStqsNMcBPyPF5GzgHNLo7eP7cOz1wOoINS0AAB8GSURBVO4DVzQzq1WRTd+3S9obuK6Wq/GcD/xuYPlcnmsi4qQCy2XWUfLI7hPzY5kkXUbqqoIUh9dLmsnSy1weVGQ5zaxviqyoJ5FW0npL0uvkASgRsfIyjnsD2CUiXsnTSmZKujkifllg2RqmspxgLUaMGDEAJbFOldeSvj0i7q/ati2wc0Sc3s0hf+zy+tGBLF87iJNWhpPfVt9xZjUqMuHJSnUeF6Tl+ACG5kdL9o/11pAgqdf3zQp0NKm5u9qjwA9JU7eWkKdTWg10ykt1xbMk4uTiy2PtrbC5kZJu78u2Ho4dLOk3wHPAbRHxqy7vHy5plqRZc+fOLabAZu1rOWB+l21vUpUxsCeS/lPSNl22bSvpuALLZ2Y16HdFLWmYpFWBkZJGSFo1P9Ynraq1TBGxICK2Ii3ssa2kcV3enxoREyJiwqhRo/pbZLN2Nxs4ssu2I0jTJpflaJZu+n4U+HwB5TKzOhTR9D2JFMRrkX4gKp20LwHn1vJBEfFPSTOADwAPF1A2s070BeA2SQcCfwI2Iq2mtVsfjq37brwvJA0GZgFPR8SeRXymWbvr9x11RHwrIjYAvhQRG0bEBvmxZUQss6KWNConSkHScNKPye/6Wy6zThURj5DS954B3J//3Cwi+jJIrD93431xNOC84WY1KHIw2TmSdgDWr/7ciLh0GYeuSVomczDpwuGqiLixqHKZdaKIeAX4QR2H9uduvFeS1gE+BEwhzRAxsz4ocvWsy0hB/RtgQd4cQK8VdUT8Fti6qHKYWf0i4hFJmwJ7AusC1wE35oq/v84mJWPpcYaIpMOBwwFGjx5dwF9p1vqKnEc9AXinUw+atbZ+3I33SNKewHMRMVvSzr383VOBqQATJkzwb4kZxS5z+TCpiczMrKsdgb0kPUG6CNhF0vfLLZJZayjyjnok8Kik+0jZxgCIiL0K/DvMrAZd15HOefkbLiK+DHw5l2ln0uDTA8ooi1mrKbKiPrnAzzKzOnlNabP2UuSo77skrQdsEhE/k/Rv+EfBrAxNvaZ0RNwJ3FlyMcxaRpGjvg8jjdZclTT6e23gAmDXov4OM+sTrylt1kaKHEz2WdKAkZcAIuIPwNsL/Hwz6xuvKW3WRorso34jIt6sLPMoaQgtugqWWYsbhteUNmsbRVbUd0k6ARguaTdSGsIbCvx8M+ubR/Ga0mZto8iK+j+BQ4CHSAt13AR8p8DPN7M+8PrSZu2lyIp6OHBxRFwEi1bJGU4Tjjo1a3d5rvJBpEGdTwOXRcSMUgtlZnUpcjDZ7aSKuWI48LMCP9/M+kDSocBVpP7p64Bngel5ZoaZtZgi76iHVSfuj4hX8lxqM2us44DdIuLBygZJVwLXAheVViozq0uRd9Sv5oxIAEgaD7xW4OebWd+sxtKDyR4j5Tiwgkiq+TFixIiyi20tqMg76s8DV0t6hpSucA1g3wI/38z6ZiZwpqTjI+JfklYAvgH8ouRytY3ecslI6vV9s1oVmUL0fknvADbLmx6LiPm9HSNpXdJ61auT5lxPjYhvFVUmsw51BHAl8KKkeaQ76V8A+5daKjOrS5F31ADbAOvnz31XvrK8tJf93wK+GBEPSFoJmC3ptojwHFCzOkXEs8B78oXwmsAzEfHXkotlZnUqMtf3ZaQc378BFuTNQbpj7lb+QXk2P39Z0hzSdBJX1GY1kKRKbu+qpS2fzo9F28pa5tLM6lfkHfUE4J31LgQgaX1ga+BX3bx3OGnBD0aPHl1/Cc3a14vAyvn5WyydvtfLXJq1qCIr6odJA8ierfVASSuSpo58PiJe6vp+REwFpgJMmDDBozTMlja26vkGpZXCzApXZEU9EnhU0n3AG5WNEbFXbwdJGkqqpC+PiOsKLI9Zx4iIv1S93Cci/rvrPpKOAc5sXKnMrAhFVtQn13qA0lJb04A5EdF2PyCVlcR6eu0pHDZATgSWqqiBr+CK2qzlFDk96y5Jq5NGfgPcFxHPLeOwHYEDgYck/SZvOyEibiqqXGVyRWyNJGmX/HSwpImkfumKDYGXG18qM+uvIkd9fwI4A7iT9ANxjqRjI+Kano6JiJks+WNiZvWblv8cBlxctT1Ieb+PaniJzKzfimz6ngxsU7mLljSKtChHjxW1mRUnIjYAkHRpRBxUdnnMrBhF5voe1KWp+/mCP9/M+sCVtFl7KfKO+hZJtwLT8+t9gZsL/Hwz6wNJK5MGd76XNBtjUfdSRDgRgVmLKeyONyKOBS4EtsiPqRFxXFGfb2Z9dj7wLuBUUp7vo4CngLPKKpCkdSXNkPSopEckHV1WWcxaTb/vqCVtDKweET/P86Cvy9t3krRRRPypv3+HmdVkd2BMRDwvaUFE/EjSLOAGyqusndffrE5F3FGfDSyVTYyU0vDsAj7fzGoziBR/AK9IehspY+DGZRUoIp6NiAfy85eBSl5/M1uGIvqoV4+Ih7pujIiHcv5uM2usB0n907cD95Cawl8Bfl9moSqc19+sNkXcUa/Sy3vDC/h8M6vNYcAT+fnRwGukOC19NHhf8vpHxISImDBq1KjGF9CsCRVRUc+SdFjXjZIOBWYX8PlmfSKp10cHGVUZGxIRz0XEoRGxL7BimYVyXn+z+hTR9P154HpJn2RxxTwBWA74WAGfb9YnXVO2SurUNK63sXjJy2q3kEaBN1y75/U3G0j9rqgj4u/ADjm38Li8+ScRcUd/P9vM+k7SINKcaeWKsboZYSPSyOuytHVefy/AYwOpyEU5ZgAzivo8M6vZW6S83pXn1RYCUxpbnMXaPa+/K2IbSEVmJjOzcm1AqgzvAt5TtT2AuRHxWimlMrN+cS5uszYREU9GxBMRsV5+Xnk85Ura2tH06dMZN24cgwcPZty4cUyfPn3ZB7Ug31Fbazv5bT2+FSet3Ov7nPxiz++1GElTI+Lw/PzSnvbzgh3WLqZPn87kyZOZNm0aO+20EzNnzuSQQw4BYP/99y+5dMUqvaKWdDGwJ/BcRIxb1v5m1XTKS3X1D0oiTi6+PCX6c9Vzp+21tjdlyhSmTZvGxIkTAZg4cSLTpk3jqKOOckU9AL4HnAv0eBdgZr2LiG9UPT+lzLKYNcKcOXPYaaedlti20047MWfOnJJKNHBK76OOiLuBeWWXw6zVSdpR0mk9vPdNSds1ukxmA2XMmDHMnDlziW0zZ85kzJgxJZVo4JReUfeFpMMlzZI0a+7cuWUXx5rMsjKSdfcYMWJE2cUeCCcAd/fw3l3A5AaWxWxATZ48mUMOOYQZM2Ywf/58ZsyYwSGHHMLkye33NVczzP/LSfpv7Esf9YQJE2LWrFkDXiZrPctKE9oM3/W+kDQ7IibUcdzTwOiIWNDNe0OApyJirSLK2AiOdVtCbwNDez2ueQeN9jXWm6GP2qwQrVIRD6CVSal7u5uKNRRYqbHFMSuOTuluNeXejRgxgnknF1+WRmuJpm+zWnTK3Mpu/A7YvYf3ds/vm7WkiFjqccUVVzB27FgGDRrE2LFjueKKK5Z4f9689hj+VPodtaTpwM7ASEl/BU6KiGnllspaVSfNrezGWcCFkgYDP4yIhTn/90eB84BjSi2dWYE6Kta7u0pp5sf48ePDrCdjx46NO+64Y4ltd9xxR4wdO7akEtUOmBV1xgepMn4ZeBN4Jv/5MnBMvZ9Z1sOxbr3ppFhvisFktfAAE+vN4MGDef311xk6dOiibfPnz2fYsGEsWLDUGKumVO9gsqrjVwa2B1YDngfujYjaO/hK5li33nRSrLuP2tpKJ82t7ElEvBQRt0bEFfnPlqukzZalk2LdFbW1lU6aW2nWyTop1ksfTGZWpMogkqOOOoo5c+YwZswYpkyZ0n6DS8w6XCfFuvuozZpMf/uo24Vj3dqd+6jNzMzagCtqMzOzJtZyTd+S5gJPll2OOowE/lF2ITpMq57z9SJiVNmFKJtj3WrQque8T7HechV1q5I0y/2OjeVzbmXw967x2v2cu+nbzMysibmiNjMza2KuqBtnatkF6EA+51YGf+8ar63PufuozczMmpjvqM3MzJqYK2ozM7Mm5orazMysibmitpYjSWWXwcwGnmM9cUXdT5UvkqTh1a9t4ERESBolad2yy2KdwXFeDsd64oq6AJJGAXdLWjd/sRzEA0TJ8sBVwMfKLo91Dsd5YznWF3NF3U+RzAXmAl+SpPCctwGTz/cbwGXAEZI2LLtM1v4c543nWF/MFXUdJHV33r4LrAGskPfx1XZBKudb0pCqzbcCDwLvzO8NLqFo1sYc543nWO+eK+o6RMRCSaMl7Sxpnbz5DmAr4It5H19t16nrj1/lfAPHSdovb3saeBw4Nb9e0PCCWltznA88x3rfuKLuo+orPEkjgK8AJwJXSdovIp4HDgO2lrRZScVsC7n/b3lJ6wFIWgs4CFgHmCzpGkkTgTOA30v6dInFtTbiOG8sx3rfDFn2LiZpGPBzSd8EHgWuAPYG3gDeD/ynpA8Aw4FhwGjgMUmDImJhScVuWbn5axqwgqRpwOXAnhFxj6RVga8Bk4DNgReBCaQmSbO6Oc4bz7HeRxHhRw8P4L3A8vn5AaSA/SfwxS77bQx8CLgNWAg8DIwsu/yt9gD2B3bJz4cAv87n/Otd9hsMrAIcDdyb99m77PL70ZoPx3kp59yxXsPDTd89kLQ26UpuA4CI+D7pim4lYE7eZ3C+mv5jRPwkInYD9iMF8IS8jweb9IGkoaTmrlcAIuIt4CngWWB1SRtJGpRH2y6IiH9GxLdIAX8ysGPl/6Okf4K1IMd54znWa+fVs3qQRxauGBEv5mB+BhgJTASmAwdHxCVV+4+IiBfy8wsBImJS40veuipNiJI2BVaKiNm5z/Be0mCSEyLiT3nfzSPiofx8IvAN0hX6v8oqv7Uex3k5HOu16ZgrklpUXcm9qJSJ6FvAtcCrEXEV8FngYkkH5P3PAt5fdYX3JDA6T9a3PujSz/cx4B5JH8pX23sBGwJTJG0p6TLg0Krz/fb8/vCGF9xaluO8HI712vmOuheS1oqIZyTtCvwH8C/g0Ih4TdIk0kjE2cB6wKYR8ZakkcB/AVMj4telFb4FSdoEGB4Rv5X0VeBwYFJE3CRpddJAk7eAUcB2ETE/N6PtATxeueo2q4XjvPEc67VxRd2D3CR2D3B7RHxV0vuAo0j9KpUg3h4YAdwaEQuqmnOGRcTrJRa/JUmaQhpluzUQwLEsGcArkpoln8rneUi+Cjeri+O8HI712rjpuweRJtVfBKwhaTngbuB8UkaiqZKGR8S9EXFTDt7BleYcB++y9TD45jukATo75HN4HnAhcL6kj0bEKxHxRA7cQZ0cuFYMx/nAc6z3X8dX1Fq8Gk535+J+0vzJj0bEm6SsROcB65OuABeJDsyWUw9JG+Qfv8ivh1a9/SRp+sWRABExDzgXuBL4VPXnhOetWg0c543nWC9Qf+Z2tfoD2Ac4DRiSX28ETAU2IY0EBfgccCewXn49BNgGGFR2+VvtAWwHXA+sll+/nXRV/VnSlTXAmsBvgP2qjluB3E3jhx+1PhznpZxzx3qBj06/o34EuCrS4BCRBi9sTQrq7ymlCLyLNGVjbUhz/iLi/shNMmUVvBVFxC+BYyLieUkrRcRzpKxE7wQul3QKsBZwE+lupjIy99UILytodXOcN5hjvVgdO5iseoqApI2BI4CTI+IVSe8mZSjalTT68DPAryPi/aUVuEXl4Iv8Yxf5+SjgYuDyiPhBnj/5HuAk4M/AB0nZiMZFxB9KK7y1PMd54zjWB05H5fqu+iINjtzXlEcXvg4cCCwn6ZSIuIc0t28vYNN8+GqV48spfWvK53s5UhPjPEmjI+IpSU8Cn5K0ALg5Iu6Q9Ajp6no5UrrGx8srubUqx3k5HOsDp+PuqHNygpOAnwJ/By4BdiZ9Wa7K20+LtLRa5Zg1gLlRNTWj4QVvUXn6y2mkRQyuBH4C7BERMyWdCYwlNYndFBGvVB231I+tWV85zhvPsT5wOrHvZQ1SP9QXgV8Cl0TEvyLit6RBJ7uT1kJds3JARPwtukzNsD5bCPyKdMdyE/CNiJgJEBHHkPoPDwY+IGmFykGVfioHrtXJcd54jvUB0lEVdb5KfpI0T3IiqbllVuX9SNlu9gHeB5wuabXq4/1Fqk1OUhDAraR+qKdJy9mtWtmnKoAnA9tWH+/mR6uH47zxHOsDq2OavivNKkqp/7YEViQF8UjSiNAfV+37DtKC8Qf5yro+Ved7fWAL4CFgM9IV9d+BUyNibtX+nwYu9Y+k9YfjvPEc6wOvI+6o8xX2AklbAreQ1pD9EWmC/evA3pL2yPt+HRgWEQd4akZ9Ks1YkrYgNTtuBMyLiFuAH5Hy935V0nKSpkmaHBHfrTQ7lll2a12O88ZzrDdGJ91Rb0hKD/g/EXFW1faNgeNJk+/Xzpu3iQ5PWddfkt5OSiBxQUT8b/VIWkn7ktbz3RJ4npQAYX5phbW24ThvPMf6wOukivoTwK4RMSlfyS2s+jKtCYwHxgBnRUqM4BGI/ZB/GM8GPpI3RXXzYu672hyYma+uOzrpvhXDcd54jvWB10nNPZsA28OiwSJDYdFyaxERN0bEGTl4hzh4ayctkU1oJGk6zKb5XA7J+6wnafeImBcRd1WNsnXgWhEc5w3gWG+stqyoe+hvuhp4RtJBAJGS7wMcR0rIv4i/SLWp6mta1OcUKYXglcBXJK1Tdb5PJa0pS9W+/rG0mjnOG8+xXo62a/ruMgJxN1K/yG9JUzROJeWafRK4hrRyy1bAlg7a+lSd73cAXwDmk873NGACaW3fLYCbSfMrNwLGu5/K+sNx3niO9fK0VUVdleFmC+A2YDawLvAgcAFpLuXHgUmkwH4N+PeImO++qvpJGkcaTHI5sDywOvAEKdnEKsBBpAT884D/rmp29I+m1cxxXh7HejnaqqKGRQNGZgDTIuIMSVsBNwB/AE7P0wao/vL4i1Q/SSuTlrO7MyL+S9K/kZauEymgj+x6Re0fS+svx3njOdbL044V9dbA+3LwDgHuJS1f9xxptOe3I+Lyqv2dgL8fcvDuQQrghaTz/RhpDuW5wD2k9Wbd/GWFcZw3nmO9PO04mOxh4If5+ZXA4xHxEVJz2AjgHdU7O3j7JyJeAm6PiDeArwFPR8QngfuA+4FHAV9RW9Ec5w3mWC9P2y1zma/m/iBpGOlLc3Z+axypX+UbZZWtXcXi9IALgV/n518GngJOzP2JXo3ICuM4L4djvRxt1/RdIWk46UrvH6TRiWsBW+XBDf4iDQBJJwIHAHNJA0u2ygN43OxoA8JxXg7HemO1TEXddVBCb1+IqlGhawKfAd4gDTDxqM8+qvdHTtKupDmWdzjzk9XKcd54jvXm1zIVNYDSGqZ7RMTV+XVvQbzUl8ajPmuT71amAl+IiH8sY9+lgt2Ba/VwnDeeY725tdpgsh2BKyVNgsULjne3Y3dfGgdvbSLiNeDdwI9Vta5sRfW5j7QCkboc78C1ejjOG8yx3txaqqKOiJ8C+wPnSfpM3hZKFqW0k7RcWWVsZdXBV3keEeuTEhvcXB3A+Qq6stjBhnnf1mmesablOB94jvXW0rQVtbrk8c1Bqoi4EvgUcG4liIFFzS6SpgG7N7a0rS83Z4WkwbnpcQNJawFExHjSDIFbKgFcdb5/RErRaFYzx3njOdZbT1P2UWtxTtkVgGNJeXvXAX4FnBcRf5T0SeBS4HMRcV4+7hpS8806nnTfd1Xne0XgfFJawO1JWZ6ui4gpeb/ZpKkwEyPiVUlXA9sCG/t8W60c543nWG9NTTePuuqLtDIwk5T0fRZpnt544G5J74+Iy3OLzSWSXiYts7YlOXg9uKFvupzv+0jn/OvAcqTzfYqkNSPiPyJifA7gmyS9BGxGDlwP4LFaOM4bz7HewiKiaR4svsNfGfg9cE6X9zcBpgNPk740APuSJt8/AQzN24aU/W9ppQewEvBH4LRu3tsDeBP4ctW23/p8+1Hvw3Fe6rl3rLfgo+mavpXy9v4Y2CQiNsnbhkXE6/n5ZsCFpCvC4yMiJG0P3B9eqaUukr4GnBARg/Lr6vMtYDLwYeAjEfG3vH1QpNGfPt9WM8d5ORzrrakZB5MNB24B/iLpGICIeD0HNhHxGPAQsEPlgIi418HbL5cA10i6V9LILuc7SKkCx5D+b8jbF+YA9vm2ejjOy+FYb0FNV1FHxMvAZaR8vR+XdFze/pZSXl9Iq+Q8EV2aA/xFqk9E/AE4ntTU+BNJq+TzXQnW10gr4zzX5TinZ7S6OM7L4VhvTU1XUQNExAvAdcB3gb2qgvj1vMt4YE5JxWtLEfFn0sjbvwC35qvt1/LbhwF/i4hXSyugtR3HeTkc662n6fqoq0kaAXwc+DRwTUScLel7pBVytvOVdfEkbQCcAawVETtIOp+UKWp8vvJ20n0rlOO8HI711tEUFXVvX4iqID4A2Aj4J+mL5KkZdaic68ogEnWft3cD4HRgb9Ias1v7fFt/Oc4by7HePkpt+q4MYgDUZfuiclU1j11PWpy8ErxD/EWqi5QyDj0qafPoPm/vn4ETgJNYvHydz7fVxXFeGsd6m2j4HbWk9wIvAQ/l5pWxwDHA48B9EXFb3m+Jqz+lTDqv5itEj/qsUTfn80JgVeDw/CPZ27E+31YTx3l5HOvtp4w76q8C5wIbS9oIuAt4C9gFmKTFSfgXdrnifiUHr/xFql0+n+tJ2itvOoO0fu8usGSS/m6O9fm2WjnOS+JYbz9lVNS7Af8A/hd4H/A/ETGJlID/fuCDXYK4a1NN+Z3qLUYp+f4Q4EbgOkkXAM+SpmjsC4tWJ2rKWQDWkhznJXCst6eG/mdJGhrJR0hX11OAjSQtHxF/JU3GvxfYXdKx4IDtj+ofv3ylfCzwE2A74FvA74APS/pq3sdzJa3fHOeN51hvbw2rqHNT1nxJqwFExB7A7cBYYLM8yvBvwMWkuZMje2uisWXLV85rAJMljYmIW4DZpDSBPwNGAfOA4yRtW2JRrU04zsvhWG9vDRlMpsWrtryNlPXm3IiYmt+7GRgKfIk08GRBHqn4QlVfla+2a1Q1NePDwCdI8yMPAzYA9gP2iYgXJP0/UpPYx3yVbf3hOC+HY739DXhFrcUJ3ceR+qf2AlYjrdByUd7nJtKSm5OB2ZUvkYO3dlU/lsNjcbYhJB0JfBaYBhxOWuzgM1GVgchzJ61ejvPGc6x3jgFp+pY0uPI8B+/6pOavJ4AvAxcAJ0k6Iu+zB7AKcED1lZ6Dtzb5x3JB/rH8oaQfSbpL0hYRcT7pKnslUjKJA0gLxi/q33LgWi0c5+VxrHeWIcvepTaS9gOGS7qkKhi3Ax6JiPPyPreRRiKeIunliLg8IraVNLTo8nSSyrQM0o/lmcADwP7ADZL+PSJmSJoDXAscB8zIx/mH0mriOC+XY72zDMQd9WDg4S7zI+cBQyWtBYtWzrkNmA+cKengvH1+9VW61WU8cGdEnBYRt0XEwcBVwGWSVoyIFyLi4Yg4KF+R+3xbPRzn5XOsd4hCKuouUwMuj4j7JW0CHCRpeeAR0qjDz1SCOiJ+D9xMuho8TNKWebubZPpnIbBNboYEICKOJS1bt13XnX2+ra8c503Hsd4hCqmo84jDYZU5etn2wDnApyPiaeBA0gCHCyQdK+lyYHNSft+hwMZFlKXdadmJCh4FHgT2kDSyavurwJsDVjBre47zxnKsW0WRfdTbAHtKWjsijoiIS3Nf1IlK+WPPlfRu0iCHLUmJEN6dm8FeAEYUWJa2lZsahwOfA76ffxyr3/+9pDuBjwBbSboXeA+wPPDzRpfX2o7jvEEc61ZR2PSs3PS1G3AkaeHxg/P2w4CvAKdXBpl0Oe7zwPHAjhHxeCGFaXOSNgZ+BVwGnBYRz+bti6ZcSPooaT7lpqSmsCPDy9dZPznOG8uxblBnRa1u1jXN24eTmrnOAX4REV/I2w8lTdf4NvDtiHhVKSnCQaTg/mBEPFD/P6PzKK1GdA0p69DXqwJ4+Yh4Iz9fs7I9v/bKONZnjvPm4Fi3uvqoK00yko6XtDYsSlrwGrAhKV3g/5F0cd7/O6Sg3g74V972IjAdeJeDt3YR8QiwD+nu5gRJa+b/g0rgXkHqKyS/9mpEVhPHeXNwrFvdTd9VTTLfJzV3PS3p48BFpMxEc0mLkf8VmJQHoqj6z2L+CZ1NKeHB1aT5lCdGxDxJV5EG+WwYEfNLLaC1NMd583Csd65+9VFXNclcB/wZOB3YLyJ+mpvHdiWtS3t9RHyzMr3DwVusqgC+gdQkuTHwztxP5SYw6xfHefNwrHemfg8mk7Q58APgHaTUgNO1OO/v8qRJ+b/srq/LipMD+HbSYJJ3OXCtSI7z5uFY7zyFjPrOSQ9+mB/fjrTmbNd9uh2YYsXJ/Yh/y1mIHLhWKMd583Csd5Yip2dtDlxJShl4RndBbI3haRk2UBznzcWx3hkKy/UdEQ+RRiYemP+0kjhwbaA4zpuLY70zFL4etaQNgSf9BTJrX45zs8YpvKJe9MFukjFre45zs4E3YBW1mZmZ9d9ArEdtZmZmBXFFbWZm1sRcUZuZmTUxV9RmZmZNzBW1mZlZE3NFbWZm1sT+P2PyVY9RvgyyAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 504x504 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,ax = plt.subplots(figsize=(7,7),nrows=2,ncols=2,sharex=True)\n",
    "\n",
    "test_cl.visualise_differences(ax)\n",
    "\n",
    "ax[1][0].set_xticklabels(['High DL activity','Low DL activity'],size=12,rotation=45,ha='right')\n",
    "ax[1][1].set_xticklabels(['High DL activity','Low DL activity'],size=12,rotation=45,ha='right')\n",
    "\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.savefig(fig_path+'/paper_figures/figure_6_micro_comparison.pdf',bbox_to_inches='tight')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What does all the above mean? It means that:\n",
    "* The initial clusters identified in the arXiv categories with more DL activity tend to cover less of subsequent activity than the in arXiv categories with less DL activity: **There has been a dislocation of activity away from initial clusters**\n",
    "* There has been a significant expansion in the number of identified clusters in categories with high DL activity by comparison to what happened in categories with low DL activity. **New entrants**\n",
    "* New clusters have started capturing a much bigger share of the research activity **Concentration** (shakeout?)\n",
    "* New clusters have started capturing a much bigger share of the high-citation activity **Concentration of innovation** (shakeout)\n",
    "\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Next steps (TODO)\n",
    "\n",
    "* Check robustness of the analysis above: to which extent are the above changes driven by rapid growth? Can we find low DL categories which experienced similar growth rates? Are they also different in their performance?\n",
    "* Visualise the changes above. Could we have maps showing the clusters in the first period and the second period?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Multivariate analysis (TODO)\n",
    "\n",
    "We have evidenced the GPT nature of DL and also the disruption it has created in existing research networks. Here we focus on explaining the drivers for change. What predicts if a region is part of one of the new clusters?\n",
    "\n",
    "* The outcome is whether a region contains a cluster or not.\n",
    "* The predictors are whether the region contained a cluster before or not, and its cognitive and business diversity based on arXiv and CrunchBase, as well as the total levels of research and industrial activity\n",
    "* We focus the analysis on regions in the top 50% of CS activity (locations 'in the game').\n",
    "* We include a control for China\n",
    "\n",
    "Our hypothesis:\n",
    "* Those locations with higher levels of knowlegde supply and demand diversity are more likely to become successful clusters. This suggests the importance of complex network effects in the development of GPTs, and the localised nature of its spillovers\n",
    "* These effects will hold after introducing a control for China suggesting that although national strategies are important for the development of clusters, they need to be complemented with local capabilities and networks"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 0. preliminaries\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Create target and features\n",
    "#We will use region indices to keep track of variables\n",
    "\n",
    "#DF to use ('mv_data' means multivariate data)\n",
    "mv_data = papers_clust.loc[papers_clust['region']!='',:]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Load the CrunchBase data\n",
    "\n",
    "This includes loading the CB metadata and the geocoded data and classifying companies into regions using the admin shapefile\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/Cellar/python3/3.5.2_3/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/IPython/core/interactiveshell.py:2785: DtypeWarning: Columns (2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  interactivity=interactivity, compiler=compiler, result=result)\n"
     ]
    }
   ],
   "source": [
    "#Load the CrunchBase data (which lives in the 'grant data')\n",
    "cb_data = pd.read_csv(ext_data+'/csv_export.tar.gz',compression='gzip')\n",
    "\n",
    "#Drop observations for which we have no role or address\n",
    "cb_data.dropna(axis=0, subset=['roles','address','uuid','founded_on'],inplace=True)\n",
    "cb_data['is_comp'] = ['company' in x for x in cb_data.roles]\n",
    "\n",
    "#Focus on companies\n",
    "cb_comps = cb_data.loc[cb_data['is_comp']==True,:]\n",
    "\n",
    "#TODO: turn these point in polygon operations into a function.\n",
    "\n",
    "#Load the geocoded data\n",
    "cb_geo_sample = pd.read_csv(ext_data+'/cb_geolocated_full.csv')\n",
    "\n",
    "#Now we turn the lat and lon into coordinates\n",
    "cb_points = cb_geo_sample.set_index('uuid')[['lng','lat']].apply(lambda x: Point([x['lng'],x['lat']]),axis=1)\n",
    "\n",
    "#Create geodataframe\n",
    "cb_geodf = gp.GeoDataFrame(geometry=cb_points)\n",
    "\n",
    "#Combine with the shapefile\n",
    "cb_geodf.crs = admin_shape.crs\n",
    "\n",
    "#And do the spatial join - the operation indicates that we are doing a point in polygon.\n",
    "cb_geographies = gp.sjoin(cb_geodf,admin_shape,op='within')\n",
    "\n",
    "#Put the regions back into the company data\n",
    "cb_comps_geo = cb_comps.set_index('uuid').join(cb_geographies['country_reg'])\n",
    "\n",
    "#And rename them with 'region_geo' (there is already a 'region' variable in CrunchBase)\n",
    "#cb_comps_geo.rename(columns={'name_en':'region_geo'},inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### i. Targets: Identify DL clusters\n",
    "\n",
    "This will use the DBSCAN method. We can run it multiple times with different hyperparameters and identify the regions that contain clusters. This gives us a built-in test of robustness."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Target container\n",
    "target = pd.DataFrame(index=set(mv_data['country_reg'])-set(' '))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Identify DL clusters\n",
    "#This is an exploratory analysis we will put into another notebook afterwards\n",
    "\n",
    "#Get DL papers\n",
    "dl_papers = mv_data.loc[mv_data['is_dl']=='dl',:]\n",
    "\n",
    "#Get period 1 and period 2\n",
    "dl_papers_0 = dl_papers.loc[dl_papers['year']<2012,:]\n",
    "dl_papers_1 = dl_papers.loc[dl_papers['year']>2012,:]\n",
    "\n",
    "#Identify clusters in both periods\n",
    "dl_clusters_0, dl_clusters_1 = [cluster_report(paps,\n",
    "                                               dbscan(paps,\n",
    "                                                      coords=['grid_lon','grid_lat'],epsilon=10,\n",
    "                                                      min_samples=100)) for paps in [dl_papers_0,dl_papers_1]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Get cluster frequencies\n",
    "clust_locs_0,clust_locs_1 = [flatten_freqs([df[4].reset_index(level=0).index]) for df in [dl_clusters_0,dl_clusters_1]]\n",
    "\n",
    "\n",
    "#One problem here is that we are assuming that the locations have similar sizes. They could host a similar number of clusters.\n",
    "#That's not the case. TODO: control for region size."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Create the cluster frequency count\n",
    "target['y'] = pd.concat([target,clust_locs_1],axis=1,join='inner')\n",
    "\n",
    "#There are 905 names in the data\n",
    "target.fillna(0,inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Some paper outputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "#target = pd.concat([target,clust_locs_1],axis=1).fillna(0)\n",
    "#target.rename(columns={0:'y'},inplace=True)\n",
    "\n",
    "cluster_locs_df = pd.DataFrame(clust_locs_1.reset_index(drop=False))\n",
    "cluster_locs_df.rename(columns={'index':'Administrative area (country)',0:'Number of clusters'},inplace=True)\n",
    "\n",
    "cluster_locs_df['Administrative area (country)']=[x[3:]+' ({coun})'.format(coun=x[:2]) for x in \n",
    "                                                 cluster_locs_df['Administrative area (country)']]\n",
    "\n",
    "cluster_locs_df.loc[:15].to_latex(fig_path+'/tables/top_clusters.tex',index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "US    20\n",
       "CN    10\n",
       "GB     8\n",
       "AU     5\n",
       "FR     5\n",
       "dtype: int64"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.Series([x.split('_')[0] for x in clust_locs_1.index]).value_counts().head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### ii. Predictors. \n",
    "\n",
    "Here we calculate all the predictors and controls based on the arXiv and CrunchBase data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### arXiv\n",
    "\n",
    "From the arxiv data, we want the totals of activity in an area and measures of diversity.\n",
    "We will use three measures: total number of disciplines present in an area in the first period and the shannon entropy\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "import scipy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(716,)"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#We focus on the first category for each paper\n",
    "mv_data['arxiv_first_cat'] = [x[0] for x in mv_data['arxiv_categories']]\n",
    "\n",
    "#And in the period before 2012\n",
    "mv_data_pre = mv_data.loc[mv_data.year<2012,:]\n",
    "\n",
    "#Arxiv totals\n",
    "arxiv_totals = mv_data_pre.groupby('country_reg').size()\n",
    "arxiv_totals.name='arxiv_totals'\n",
    "\n",
    "arxiv_totals.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/Cellar/python3/3.5.2_3/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/scipy/stats/_distn_infrastructure.py:2508: RuntimeWarning: invalid value encountered in true_divide\n",
      "  pk = 1.0*pk / np.sum(pk, axis=0)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(716, 3)"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Measures of diversity\n",
    "#Unique number of disciplines\n",
    "#This creates total number of papers by category\n",
    "arxiv_cat_totals = pd.pivot_table(mv_data_pre.groupby(['country_reg','arxiv_first_cat']).size().reset_index(drop=False),\n",
    "                              index='country_reg',columns='arxiv_first_cat',values=0).fillna(0)\n",
    "\n",
    "#Now this gives us the total number of disciplines present in a region\n",
    "arxiv_div_n = arxiv_cat_totals[[x for x in arxiv_cat_totals.columns if x[:2]=='cs']].apply(lambda x: x>0,axis=1).sum(axis=1)\n",
    "arxiv_div_n.name='arxiv_total_discs'\n",
    "\n",
    "#And the shannon entropy\n",
    "arxiv_entropy = arxiv_cat_totals[[x for x in arxiv_cat_totals.columns if x[:2]=='cs']].apply(\n",
    "    lambda x: scipy.stats.entropy(x),axis=1)\n",
    "arxiv_entropy.name = 'arxiv_entropy'\n",
    "\n",
    "#Concatenate all arXiv data in a single df\n",
    "arxiv_pred = pd.concat([arxiv_totals,arxiv_div_n,arxiv_entropy],axis=1)\n",
    "\n",
    "#Remove empty regions\n",
    "arxiv_pred = arxiv_pred.loc[arxiv_pred.index!='',:]\n",
    "\n",
    "#Note that this probably has a lower number of observations because there were a bunch of places that \n",
    "#had no activity before 2012\n",
    "arxiv_pred.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>arxiv_totals</th>\n",
       "      <th>arxiv_total_discs</th>\n",
       "      <th>arxiv_entropy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>arxiv_totals</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.638785</td>\n",
       "      <td>0.400524</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>arxiv_total_discs</th>\n",
       "      <td>0.638785</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.854806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>arxiv_entropy</th>\n",
       "      <td>0.400524</td>\n",
       "      <td>0.854806</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   arxiv_totals  arxiv_total_discs  arxiv_entropy\n",
       "arxiv_totals           1.000000           0.638785       0.400524\n",
       "arxiv_total_discs      0.638785           1.000000       0.854806\n",
       "arxiv_entropy          0.400524           0.854806       1.000000"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arxiv_pred.corr()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#####  CrunchBase\n",
    "\n",
    "CrunchBase has multiple categories for each company. How do we use this to measure diversity?\n",
    "\n",
    "The simplest options is simply to flatten the list of categories and count them. Assume that these are capabilities 'present' in a location. Other options would be to do some topic modelling of the categories and identify the top category for each company. We will leave that as a TODO\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We are focusing on the total levels of activity and diversity before 2012\n",
    "cb_comps_geo_pre = cb_comps_geo.loc[[int(x.split('-')[0])<2012 for x in cb_comps_geo.founded_on],:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Total CB activity (before 2012)\n",
    "cb_totals = cb_comps_geo_pre.groupby('country_reg').size()\n",
    "cb_totals.name  = 'cb_totals'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Diversity of activity\n",
    "#Remove companies with missing sectors\n",
    "cb_comps_cat = cb_comps_geo_pre.dropna(axis=0,subset=['category_list'])\n",
    "\n",
    "#Turn them into a list for each company\n",
    "cb_comps_cat['sector_list'] = cb_comps_cat['category_list'].apply(lambda x: x.split(','))\n",
    "\n",
    "#And now we want the totals for each category\n",
    "cb_cat_totals = pd.pivot_table(\n",
    "    cb_comps_cat.groupby('country_reg')['sector_list'].apply(lambda x: flatten_freqs(list(x))).reset_index(drop=False),\n",
    "    index='country_reg',columns='level_1',values='sector_list').fillna(0)\n",
    "\n",
    "#Total number of areas present\n",
    "cb_div_n = cb_cat_totals.apply(lambda x: np.sum(x>0),axis=1)\n",
    "cb_div_n.name='cb_total_sectors'\n",
    "\n",
    "#Entropy\n",
    "cb_entropy = cb_cat_totals.apply(lambda x: scipy.stats.entropy(x),axis=1)\n",
    "cb_entropy.name='cb_entropy'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/Cellar/python3/3.5.2_3/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/ipykernel_launcher.py:2: FutureWarning: \n",
      "Passing list-likes to .loc or [] with any missing label will raise\n",
      "KeyError in the future, you can use .reindex() as an alternative.\n",
      "\n",
      "See the documentation here:\n",
      "https://pandas.pydata.org/pandas-docs/stable/indexing.html#deprecate-loc-reindex-listlike\n",
      "  \n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cb_totals</th>\n",
       "      <th>cb_total_sectors</th>\n",
       "      <th>cb_entropy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>SI_Maribor City Municipality</th>\n",
       "      <td>7.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>2.540036</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>QA_Al Daayen</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FR_Guadeloupe</th>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.098612</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>US_Delaware</th>\n",
       "      <td>413.0</td>\n",
       "      <td>256.0</td>\n",
       "      <td>5.027392</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>US_Georgia</th>\n",
       "      <td>2630.0</td>\n",
       "      <td>465.0</td>\n",
       "      <td>5.106554</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              cb_totals  cb_total_sectors  cb_entropy\n",
       "SI_Maribor City Municipality        7.0              13.0    2.540036\n",
       "QA_Al Daayen                        0.0               0.0    0.000000\n",
       "FR_Guadeloupe                       1.0               3.0    1.098612\n",
       "US_Delaware                       413.0             256.0    5.027392\n",
       "US_Georgia                       2630.0             465.0    5.106554"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Concatenate everything\n",
    "cb_pred = pd.concat([cb_totals,cb_div_n,cb_entropy],axis=1,sort=True).loc[target.index]\n",
    "\n",
    "cb_pred.head().fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cb_totals</th>\n",
       "      <th>cb_total_sectors</th>\n",
       "      <th>cb_entropy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>cb_totals</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.610394</td>\n",
       "      <td>0.264032</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cb_total_sectors</th>\n",
       "      <td>0.610394</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.713669</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cb_entropy</th>\n",
       "      <td>0.264032</td>\n",
       "      <td>0.713669</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  cb_totals  cb_total_sectors  cb_entropy\n",
       "cb_totals          1.000000          0.610394    0.264032\n",
       "cb_total_sectors   0.610394          1.000000    0.713669\n",
       "cb_entropy         0.264032          0.713669    1.000000"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cb_pred.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(906, 3)"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#These are all the locations that have at least some arxiv activity\n",
    "cb_pred.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Controls and other information\n",
    "\n",
    "Here we want to log the geographical data including whether a country is in China, the area of regions, and a control\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(906, 0)"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Create the control df\n",
    "control = pd.DataFrame(index=set(mv_data['country_reg']))\n",
    "\n",
    "control.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "#We want to add a dummy for whether a region is in China or not, and a country variable for clustering errors\n",
    "\n",
    "#We get the country-region lookup from the admin shapefile we downloaded before\n",
    "#DF\n",
    "country_by_region = admin_shape[['iso_a2','country_reg']]\n",
    "\n",
    "#Create a dict\n",
    "country_by_region_dict= {x:y for x,y in zip(country_by_region['country_reg'],country_by_region['iso_a2'])}\n",
    "\n",
    "#European countries\n",
    "eu_countries = ['AT','BE','BG','CY','CZ','DK','EE','FI','FR','DE','GR','HU','IE','IT',\n",
    "                    'LV','LT','LU','MT','NL','PL','PT','RO','SK','SI','ES','SE','GB']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/Cellar/python3/3.5.2_3/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/ipykernel_launcher.py:15: FutureWarning: Sorting because non-concatenation axis is not aligned. A future version\n",
      "of pandas will change to not sort by default.\n",
      "\n",
      "To accept the future behavior, pass 'sort=False'.\n",
      "\n",
      "To retain the current behavior and silence the warning, pass 'sort=True'.\n",
      "\n",
      "  from ipykernel import kernelapp as app\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(906, 5)"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Add the information\n",
    "control['country'] = [country_by_region_dict[x] for x in control.index]\n",
    "\n",
    "\n",
    "control['is_china'] = [int(x=='CN') for x in control['country']]\n",
    "control['is_europe'] = [int(x in eu_countries) for x in control['country']]\n",
    "\n",
    "\n",
    "#Add the area\n",
    "admin_shape['admin_area'] = admin_shape['geometry'].area\n",
    "\n",
    "#Ach there are a few duplicated regions!!\n",
    "control = pd.concat([\n",
    "    control.join(admin_shape.drop_duplicates('name_en').set_index('country_reg')['admin_area']),\n",
    "    clust_locs_0],axis=1).fillna(0)\n",
    "\n",
    "control.rename(columns={0:'cluster_t0'},inplace=True)\n",
    "\n",
    "control.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Combine all the predictor data in a single df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(716, 6)"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Concatenate all the variables\n",
    "pred = pd.concat([arxiv_pred,cb_pred],axis=1,join='inner').fillna(0)\n",
    "\n",
    "#Only consider situations where there is more than 1 paper in a location\n",
    "pred = pred.loc[pred['arxiv_totals']>0,:]\n",
    "\n",
    "#Finally, some transformations in the data\n",
    "#Log the totals\n",
    "for x in pred.columns:\n",
    "    if 'totals' in x:\n",
    "        pred[x]=np.log(pred[x]+0.01)\n",
    "\n",
    "#Calculate zscores (removing a small number of infinite values)\n",
    "pred.replace([np.inf, -np.inf], np.nan,inplace=True)\n",
    "pred_norm = pred.dropna()\n",
    "\n",
    "pred_norm = pred_norm.apply(lambda x: scipy.stats.zscore(x),axis=0)\n",
    "pred_norm.corr()\n",
    "\n",
    "pred.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### iv. Exploratory analysis\n",
    "\n",
    "* Descriptives\n",
    "* Correlation tables\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [],
   "source": [
    "import scipy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(701, 12)"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.concat([target,pred_norm,control],axis=1,join='inner')\n",
    "\n",
    "#target.join(pred_norm.join(control,how='inner'),how='outer')\n",
    "\n",
    "data.fillna(0,inplace=True)\n",
    "\n",
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>y</th>\n",
       "      <th>arxiv_totals</th>\n",
       "      <th>arxiv_total_discs</th>\n",
       "      <th>arxiv_entropy</th>\n",
       "      <th>cb_totals</th>\n",
       "      <th>cb_total_sectors</th>\n",
       "      <th>cb_entropy</th>\n",
       "      <th>is_china</th>\n",
       "      <th>is_europe</th>\n",
       "      <th>admin_area</th>\n",
       "      <th>cluster_t0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>y</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.515747</td>\n",
       "      <td>0.635057</td>\n",
       "      <td>0.413170</td>\n",
       "      <td>0.374271</td>\n",
       "      <td>0.615248</td>\n",
       "      <td>0.314287</td>\n",
       "      <td>0.111354</td>\n",
       "      <td>-0.102074</td>\n",
       "      <td>0.086160</td>\n",
       "      <td>0.381047</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>arxiv_totals</th>\n",
       "      <td>0.515747</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.886018</td>\n",
       "      <td>0.851626</td>\n",
       "      <td>0.626841</td>\n",
       "      <td>0.661327</td>\n",
       "      <td>0.630843</td>\n",
       "      <td>0.030280</td>\n",
       "      <td>0.124714</td>\n",
       "      <td>-0.001417</td>\n",
       "      <td>0.186987</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>arxiv_total_discs</th>\n",
       "      <td>0.635057</td>\n",
       "      <td>0.886018</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.854806</td>\n",
       "      <td>0.590135</td>\n",
       "      <td>0.732691</td>\n",
       "      <td>0.572022</td>\n",
       "      <td>0.025302</td>\n",
       "      <td>0.052429</td>\n",
       "      <td>0.045413</td>\n",
       "      <td>0.242257</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>arxiv_entropy</th>\n",
       "      <td>0.413170</td>\n",
       "      <td>0.851626</td>\n",
       "      <td>0.854806</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.557022</td>\n",
       "      <td>0.569943</td>\n",
       "      <td>0.571163</td>\n",
       "      <td>0.042225</td>\n",
       "      <td>0.121309</td>\n",
       "      <td>-0.003224</td>\n",
       "      <td>0.134996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cb_totals</th>\n",
       "      <td>0.374271</td>\n",
       "      <td>0.626841</td>\n",
       "      <td>0.590135</td>\n",
       "      <td>0.557022</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.718166</td>\n",
       "      <td>0.941676</td>\n",
       "      <td>0.020627</td>\n",
       "      <td>0.161090</td>\n",
       "      <td>0.081764</td>\n",
       "      <td>0.102318</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cb_total_sectors</th>\n",
       "      <td>0.615248</td>\n",
       "      <td>0.661327</td>\n",
       "      <td>0.732691</td>\n",
       "      <td>0.569943</td>\n",
       "      <td>0.718166</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.694304</td>\n",
       "      <td>-0.041482</td>\n",
       "      <td>-0.070867</td>\n",
       "      <td>0.113997</td>\n",
       "      <td>0.171821</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cb_entropy</th>\n",
       "      <td>0.314287</td>\n",
       "      <td>0.630843</td>\n",
       "      <td>0.572022</td>\n",
       "      <td>0.571163</td>\n",
       "      <td>0.941676</td>\n",
       "      <td>0.694304</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.018266</td>\n",
       "      <td>0.199007</td>\n",
       "      <td>0.049969</td>\n",
       "      <td>0.074918</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>is_china</th>\n",
       "      <td>0.111354</td>\n",
       "      <td>0.030280</td>\n",
       "      <td>0.025302</td>\n",
       "      <td>0.042225</td>\n",
       "      <td>0.020627</td>\n",
       "      <td>-0.041482</td>\n",
       "      <td>-0.018266</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.161641</td>\n",
       "      <td>0.051433</td>\n",
       "      <td>-0.013953</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>is_europe</th>\n",
       "      <td>-0.102074</td>\n",
       "      <td>0.124714</td>\n",
       "      <td>0.052429</td>\n",
       "      <td>0.121309</td>\n",
       "      <td>0.161090</td>\n",
       "      <td>-0.070867</td>\n",
       "      <td>0.199007</td>\n",
       "      <td>-0.161641</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.179624</td>\n",
       "      <td>0.009918</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>admin_area</th>\n",
       "      <td>0.086160</td>\n",
       "      <td>-0.001417</td>\n",
       "      <td>0.045413</td>\n",
       "      <td>-0.003224</td>\n",
       "      <td>0.081764</td>\n",
       "      <td>0.113997</td>\n",
       "      <td>0.049969</td>\n",
       "      <td>0.051433</td>\n",
       "      <td>-0.179624</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.005640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cluster_t0</th>\n",
       "      <td>0.381047</td>\n",
       "      <td>0.186987</td>\n",
       "      <td>0.242257</td>\n",
       "      <td>0.134996</td>\n",
       "      <td>0.102318</td>\n",
       "      <td>0.171821</td>\n",
       "      <td>0.074918</td>\n",
       "      <td>-0.013953</td>\n",
       "      <td>0.009918</td>\n",
       "      <td>0.005640</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          y  arxiv_totals  arxiv_total_discs  arxiv_entropy  \\\n",
       "y                  1.000000      0.515747           0.635057       0.413170   \n",
       "arxiv_totals       0.515747      1.000000           0.886018       0.851626   \n",
       "arxiv_total_discs  0.635057      0.886018           1.000000       0.854806   \n",
       "arxiv_entropy      0.413170      0.851626           0.854806       1.000000   \n",
       "cb_totals          0.374271      0.626841           0.590135       0.557022   \n",
       "cb_total_sectors   0.615248      0.661327           0.732691       0.569943   \n",
       "cb_entropy         0.314287      0.630843           0.572022       0.571163   \n",
       "is_china           0.111354      0.030280           0.025302       0.042225   \n",
       "is_europe         -0.102074      0.124714           0.052429       0.121309   \n",
       "admin_area         0.086160     -0.001417           0.045413      -0.003224   \n",
       "cluster_t0         0.381047      0.186987           0.242257       0.134996   \n",
       "\n",
       "                   cb_totals  cb_total_sectors  cb_entropy  is_china  \\\n",
       "y                   0.374271          0.615248    0.314287  0.111354   \n",
       "arxiv_totals        0.626841          0.661327    0.630843  0.030280   \n",
       "arxiv_total_discs   0.590135          0.732691    0.572022  0.025302   \n",
       "arxiv_entropy       0.557022          0.569943    0.571163  0.042225   \n",
       "cb_totals           1.000000          0.718166    0.941676  0.020627   \n",
       "cb_total_sectors    0.718166          1.000000    0.694304 -0.041482   \n",
       "cb_entropy          0.941676          0.694304    1.000000 -0.018266   \n",
       "is_china            0.020627         -0.041482   -0.018266  1.000000   \n",
       "is_europe           0.161090         -0.070867    0.199007 -0.161641   \n",
       "admin_area          0.081764          0.113997    0.049969  0.051433   \n",
       "cluster_t0          0.102318          0.171821    0.074918 -0.013953   \n",
       "\n",
       "                   is_europe  admin_area  cluster_t0  \n",
       "y                  -0.102074    0.086160    0.381047  \n",
       "arxiv_totals        0.124714   -0.001417    0.186987  \n",
       "arxiv_total_discs   0.052429    0.045413    0.242257  \n",
       "arxiv_entropy       0.121309   -0.003224    0.134996  \n",
       "cb_totals           0.161090    0.081764    0.102318  \n",
       "cb_total_sectors   -0.070867    0.113997    0.171821  \n",
       "cb_entropy          0.199007    0.049969    0.074918  \n",
       "is_china           -0.161641    0.051433   -0.013953  \n",
       "is_europe           1.000000   -0.179624    0.009918  \n",
       "admin_area         -0.179624    1.000000    0.005640  \n",
       "cluster_t0          0.009918    0.005640    1.000000  "
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Correlation between variables\n",
    "\n",
    "data.corr()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### More outputs for the paper"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "#This is the correlation table\n",
    "my_vars = ['y','arxiv_totals','arxiv_entropy','cb_totals','cb_entropy','is_china']\n",
    "\n",
    "corr_table = data[my_vars].corr().applymap(lambda x: np.round(x,3))\n",
    "\n",
    "corr_table.to_latex(fig_path+'/tables/table_3_correlation_table.tex')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 288x936 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Produce a bunch of boxplots comparing the independent variables for y > 1 \n",
    "\n",
    "#Variables to plot\n",
    "plot_vars = ['arxiv_totals','arxiv_entropy','cb_totals','cb_entropy']\n",
    "\n",
    "#Lay down the plot\n",
    "fig,ax = plt.subplots(nrows=(len(plot_vars)),figsize=(4,13),sharex=True)\n",
    "\n",
    "#For each variable, draw the boxplot\n",
    "for num,x in enumerate(plot_vars):\n",
    "    \n",
    "    ax[num].boxplot([data.loc[data['y']==0,x],data.loc[data['y']>0,x]])\n",
    "    #Set title\n",
    "    ax[num].set_ylabel(x,size=12)\n",
    "    \n",
    "    #Add labels\n",
    "    ax[num].set_xticklabels(['No cluster','Has cluster'])\n",
    "    \n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "These boxplots are broadly consistent with the key hypotheses of our analysis: locations that acquired a concentration of DL research tended to be bigger and more diverse, and also to host stronger concentrations of tech companies based on the CrunchBase data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### v. Modelling\n",
    "\n",
    "Here we run a poisson regression using the data above."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(701, 15)"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Remember to: \n",
    "\n",
    "#Cluster standard errors on country\n",
    "#Do robust standard errors\n",
    "\n",
    "import statsmodels.api as sm\n",
    "\n",
    "data['intercept']=1\n",
    "\n",
    "data['entropy_interaction'] = data['arxiv_entropy']*data['cb_entropy']\n",
    "data['research_industry_interaction'] = data['arxiv_totals']*data['cb_totals']\n",
    "\n",
    "x_vars = ['intercept',\n",
    "          #'arxiv_totals',\n",
    "          'arxiv_entropy',\n",
    "          #'cb_totals',\n",
    "          'cb_entropy',\n",
    "          #'research_industry_interaction',\n",
    "          #'entropy_interaction',\n",
    "          'is_china',\n",
    "          #'is_europe',\n",
    "          #'cluster_t0',\n",
    "          'admin_area']\n",
    "\n",
    "data.shape\n",
    "\n",
    "#data_2 = data.loc[data.arxiv_totals>np.median(data.arxiv_totals),:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.296527\n",
      "         Iterations 8\n"
     ]
    }
   ],
   "source": [
    "#Test model with robust standard errors\n",
    "test_model= sm.Poisson(data['y'],data[x_vars]).fit(\n",
    "    cov_type='cluster',cov_kwds={'groups':data['country']})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>Poisson Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>         <td>y</td>        <th>  No. Observations:  </th>  <td>   701</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>              <td>Poisson</td>     <th>  Df Residuals:      </th>  <td>   696</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>               <td>MLE</td>       <th>  Df Model:          </th>  <td>     4</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>          <td>Sun, 08 Jul 2018</td> <th>  Pseudo R-squ.:     </th>  <td>0.3608</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>              <td>09:18:01</td>     <th>  Log-Likelihood:    </th> <td> -207.87</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>converged:</th>           <td>True</td>       <th>  LL-Null:           </th> <td> -325.22</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th> </th>                      <td> </td>        <th>  LLR p-value:       </th> <td>1.278e-49</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "        <td></td>           <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>intercept</th>     <td>   -3.6225</td> <td>    0.376</td> <td>   -9.645</td> <td> 0.000</td> <td>   -4.359</td> <td>   -2.886</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>arxiv_entropy</th> <td>    1.4927</td> <td>    0.270</td> <td>    5.520</td> <td> 0.000</td> <td>    0.963</td> <td>    2.023</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>cb_entropy</th>    <td>    0.8366</td> <td>    0.490</td> <td>    1.707</td> <td> 0.088</td> <td>   -0.124</td> <td>    1.797</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>is_china</th>      <td>    1.0942</td> <td>    0.171</td> <td>    6.413</td> <td> 0.000</td> <td>    0.760</td> <td>    1.429</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>admin_area</th>    <td>    0.0027</td> <td>    0.002</td> <td>    1.235</td> <td> 0.217</td> <td>   -0.002</td> <td>    0.007</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                          Poisson Regression Results                          \n",
       "==============================================================================\n",
       "Dep. Variable:                      y   No. Observations:                  701\n",
       "Model:                        Poisson   Df Residuals:                      696\n",
       "Method:                           MLE   Df Model:                            4\n",
       "Date:                Sun, 08 Jul 2018   Pseudo R-squ.:                  0.3608\n",
       "Time:                        09:18:01   Log-Likelihood:                -207.87\n",
       "converged:                       True   LL-Null:                       -325.22\n",
       "                                        LLR p-value:                 1.278e-49\n",
       "=================================================================================\n",
       "                    coef    std err          z      P>|z|      [0.025      0.975]\n",
       "---------------------------------------------------------------------------------\n",
       "intercept        -3.6225      0.376     -9.645      0.000      -4.359      -2.886\n",
       "arxiv_entropy     1.4927      0.270      5.520      0.000       0.963       2.023\n",
       "cb_entropy        0.8366      0.490      1.707      0.088      -0.124       1.797\n",
       "is_china          1.0942      0.171      6.413      0.000       0.760       1.429\n",
       "admin_area        0.0027      0.002      1.235      0.217      -0.002       0.007\n",
       "=================================================================================\n",
       "\"\"\""
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Save the summary as $L^AT_EX$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "summ = test_model.summary()\n",
    "\n",
    "beginningtex = \"\"\"\\\\documentclass{report}\n",
    "\\\\usepackage{booktabs}\n",
    "\\\\begin{document}\"\"\"\n",
    "endtex = \"\\end{document}\"\n",
    "\n",
    "f = open(fig_path+'/tables/table_poission.tex', 'w')\n",
    "f.write(beginningtex)\n",
    "f.write(summ.as_latex())\n",
    "f.write(endtex)\n",
    "f.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### vi. Modelling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "# As before, write a class that does all this.\n",
    "\n",
    "class DlSpatialMulti():\n",
    "    '''\n",
    "    This class is initialised with a df with papers and the independent variables and controls dataset produced above.\n",
    "    \n",
    "    Methods:\n",
    "    \n",
    "    -.get_dl_results uses DBSCAN to extract a DL cluster taking key parameters (epsilon, lambda) and models\n",
    "    cluster development with data features. \n",
    "    \n",
    "    -.get_benchmark uses DBSCAN to extract DL clusters in other arXiv categories taking key parameters (epsilon, lambda) and models\n",
    "    cluster development with data features. \n",
    "\n",
    "    -.comparison compares the results of the models.\n",
    "\n",
    "    '''\n",
    "    \n",
    "    def __init__(self,papers,independent_variables):\n",
    "        '''\n",
    "        \n",
    "        Initialise with the papers and independent variables\n",
    "        \n",
    "        '''\n",
    "        #Store papers\n",
    "        self.papers = papers\n",
    "        \n",
    "        #Store independent variables\n",
    "        self.ind_vars = independent_variables\n",
    "        \n",
    "        #Dict to store models and data. We will use the keys to label the information that is stored\n",
    "        self.model_store = {}\n",
    "        self.data_store = {}\n",
    "        \n",
    "    def get_dl_results(self,thres=2012,epsilon=10,min_samples=100,\n",
    "                      x_vars=['intercept',\n",
    "                              #'arxiv_totals',\n",
    "                              'arxiv_entropy',\n",
    "                              #'cb_totals',\n",
    "                              'cb_entropy',\n",
    "                              #'entropy_interaction',\n",
    "                              #'research_industry_interaction',\n",
    "                              'is_china',\n",
    "                              #'is_europe',\n",
    "                              'admin_area']):\n",
    "        '''\n",
    "        This method extracts and models DL clusters. The inputs are a cut-off threshold for cluster emergence,\n",
    "        the DBSCAN parameters and the variables to use in the prediction\n",
    "        \n",
    "        '''\n",
    "        #Load papers\n",
    "        papers = self.papers\n",
    "        \n",
    "        #Target container\n",
    "        #The index is the number of regions\n",
    "        target = pd.DataFrame(index=set(self.papers['country_reg'])-set(' '))\n",
    "        \n",
    "        #Get DL papers\n",
    "        dl_papers = papers.loc[papers['is_dl']=='dl',:]\n",
    "\n",
    "        #Split into two periods\n",
    "        dl_papers_0 = dl_papers.loc[dl_papers['year']<thres,:]\n",
    "        dl_papers_1 = dl_papers.loc[dl_papers['year']>thres,:]\n",
    "\n",
    "        #Identify clusters in both periods\n",
    "        dl_clusters_0, dl_clusters_1 = [cluster_report(paps,\n",
    "                                                       dbscan(paps,\n",
    "                                                              coords=['grid_lon','grid_lat'],epsilon=epsilon,\n",
    "                                                              min_samples=min_samples)) for paps in [\n",
    "            dl_papers_0,dl_papers_1]]\n",
    "        \n",
    "        \n",
    "        #Get cluster frequencies in both periods\n",
    "        clust_locs_0,clust_locs_1 = [\n",
    "            flatten_freqs([df[4].reset_index(level=0).index]) for df in [dl_clusters_0,dl_clusters_1]]\n",
    "        #Name the cluster locations in t0 (may use as contrl)\n",
    "        clust_locs_0.name = 'cluster_t0'\n",
    "        \n",
    "        #Create the cluster frequency count\n",
    "        target['y'] = pd.concat([target,clust_locs_1],axis=1,sort=True,join='outer')\n",
    "\n",
    "        #Fill the missing values\n",
    "        target.fillna(0,inplace=True)\n",
    "        \n",
    "        #Concatenate the cluster results with the features\n",
    "        dl_data = pd.concat([target,self.ind_vars],axis=1,sort=True,join='inner').fillna(0)\n",
    "        \n",
    "        \n",
    "        #Model using xvars. NB we are using clustered standard errors by country. \n",
    "        model= sm.Poisson(dl_data['y'],\n",
    "                          dl_data[x_vars]).fit(cov_type='cluster',cov_kwds={'groups':dl_data['country']},\n",
    "                                                                maxiter=5000, maxfun=5000)\n",
    "        \n",
    "        #Store everything\n",
    "        self.data_store['dl'] = dl_data\n",
    "        self.model_store['dl'] = model\n",
    "        \n",
    "        return(self)\n",
    "        \n",
    "        \n",
    "    def get_benchmark_results(self,category,thres=2012,epsilon=10,min_samples=100,\n",
    "                             x_vars=['intercept',\n",
    "                                     #'arxiv_totals',\n",
    "                                     'arxiv_entropy',\n",
    "                                     #'cb_totals',\n",
    "                                     'cb_entropy',\n",
    "                                     'is_china',\n",
    "                                     #'is_europe',\n",
    "                                     #'cluster_t0',\n",
    "                                     #'entropy_interaction',\n",
    "                                     #'research_industry_interaction',\n",
    "                                     'admin_area']):\n",
    "        '''\n",
    "        This method does the same as above but for a selected arXiv category.\n",
    "        '''\n",
    "        \n",
    "        #Load papers\n",
    "        papers = self.papers\n",
    "        \n",
    "        #Target container\n",
    "        target = pd.DataFrame(index=set(self.papers['country_reg'])-set(' '))\n",
    "        \n",
    "        #Subset papers to find the relevant category\n",
    "        subset = papers.loc[[category in arxiv_cat for arxiv_cat in papers['arxiv_categories']]]\n",
    "                \n",
    "        #Split into papers in t0 and papers in t1. Note that this excludes the threshold year as a 'boundary'\n",
    "        subset_0 = subset.loc[subset['year']<thres]\n",
    "        \n",
    "        subset_1 = subset.loc[subset['year']>thres]\n",
    "                \n",
    "        #TODO: This is repeating the above. Refactor sometime?\n",
    "        #Fit the clustering algorithm for the two subsets in the data and generate the reports\n",
    "        db_report_0,db_report_1 = [cluster_report(subset,dbscan(subset,coords=['grid_lon','grid_lat'],\n",
    "                                                                epsilon=epsilon,\n",
    "                                                                min_samples=min_samples)) for subset in [subset_0,subset_1]]\n",
    "        \n",
    "        #Get cluster frequencies\n",
    "        clust_locs_0,clust_locs_1 = [\n",
    "            flatten_freqs([df[4].reset_index(level=0).index]) for df in [db_report_0,db_report_1]]\n",
    "        clust_locs_0.name = 'cluster_t0'\n",
    "        \n",
    "        #Create the cluster frequency count\n",
    "        target['y'] = pd.concat([target,clust_locs_1],axis=1,sort=True,join='outer')\n",
    "        \n",
    "        #Fill missing values\n",
    "        target.fillna(0,inplace=True)\n",
    "        \n",
    "        #Store all the information\n",
    "        #Concatenate the target, features etc\n",
    "        bm_data = pd.concat([target,self.ind_vars],axis=1,sort=True,join='inner').fillna(0)\n",
    "        \n",
    "        \n",
    "        #Model\n",
    "        bm_model= sm.Poisson(bm_data['y'],\n",
    "                          bm_data [x_vars]).fit(cov_type='cluster',cov_kwds={'groups':bm_data['country']},\n",
    "                                                                maxiter=5000, maxfun=5000)\n",
    "        #Store everything using the right key \n",
    "        self.data_store[category] = bm_data\n",
    "        self.model_store[category] = bm_model\n",
    "        \n",
    "        return(self)\n",
    "    \n",
    "    def compare_results(self,ax):\n",
    "        '''\n",
    "        \n",
    "        This method creates a barchart with confidence intervals to compare the results.\n",
    "        \n",
    "        '''\n",
    "        \n",
    "        #Load the results\n",
    "        #For each key in the stored models we will extract model outputs (parameters and confidence intervals)\n",
    "        parameters = []\n",
    "        conf_int = []\n",
    "        \n",
    "        #Do this\n",
    "        for x in self.model_store.keys():\n",
    "            parameters.append(self.model_store[x].params)\n",
    "            \n",
    "            #Extract the confident intervals\n",
    "            conf_ints = self.model_store[x].conf_int()\n",
    "            conf_ints_low = conf_ints[0]\n",
    "            conf_ints_high = conf_ints[1]\n",
    "            \n",
    "            conf_int.append([conf_ints_low,conf_ints_high])\n",
    "        \n",
    "        #Create dataframes and give them columns\n",
    "        model_results_df = pd.concat(parameters,axis=1)\n",
    "        conf_int_low_df = pd.concat([x[0] for x in conf_int],axis=1)\n",
    "        conf_int_high_df = pd.concat([x[1] for x in conf_int],axis=1)\n",
    "        \n",
    "        #Variable names\n",
    "        model_results_df.columns= self.model_store.keys()\n",
    "        conf_int_low_df.columns= self.model_store.keys()\n",
    "        conf_int_high_df.columns= self.model_store.keys()\n",
    "        \n",
    "        #And to plot\n",
    "        my_vars = [\n",
    "            #'arxiv_totals',\n",
    "            'arxiv_entropy',\n",
    "            #'cb_totals',\n",
    "            'cb_entropy',\n",
    "            #'research_industry_interaction',\n",
    "            #'entropy_interaction',\n",
    "            'is_china',\n",
    "            #'is_europe'\n",
    "        ]\n",
    "        \n",
    "        #DFs to plot\n",
    "        plot_df = model_results_df.loc[my_vars]\n",
    "        low = conf_int_low_df.loc[my_vars]\n",
    "        high = conf_int_high_df.loc[my_vars]\n",
    "\n",
    "        # Do the barplot\n",
    "        #Number of bars in the x axis\n",
    "        x_n = np.arange(len(plot_df))\n",
    "\n",
    "        for num,col in enumerate(plot_df.columns):\n",
    "            ax.bar(x=x_n+0.15*num,\n",
    "                   height=plot_df[col],\n",
    "                   width=0.15,\n",
    "                   #yerr=[high[col],low[col]],\n",
    "                   yerr = np.array(low[col],high[col]),\n",
    "                   align='center', \n",
    "                   ecolor='black', capsize=3,alpha=0.5\n",
    "                  )\n",
    "            #print(plot_df[col])\n",
    "            #print(low[col])\n",
    "            #print(high[col])\n",
    "\n",
    "        ax.set_xticks(x_n+0.25)\n",
    "        ax.set_xticklabels(my_vars,rotation=45,ha='right',size=12)\n",
    "\n",
    "        ax.legend(list(plot_df.columns),loc='upper right',title='Category',fontsize=12,ncol=len(model_results_df))\n",
    "        ax.set_title('Coefficients for key variables in Poisson Regression',size=16)\n",
    "        \n",
    "        self.params = plot_df\n",
    "        self.conf_int = [low,high]\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### **Test**\n",
    "\n",
    "We run the class above for a set of categories, extract key information and produce visualisations "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [],
   "source": [
    "#These are the 'shared' independent variables\n",
    "data = pd.concat([pred_norm,control.drop('cluster_t0',axis=1)],axis=1,sort=False,join='inner').fillna(0)\n",
    "data['intercept']=1\n",
    "data['entropy_interaction'] = data['arxiv_entropy']*data['cb_entropy']\n",
    "data['research_industry_interaction'] = data['arxiv_totals']*data['cb_totals']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['cs.NI', 'cs.DM', 'cs.CC', 'cs.DS', 'cs.LO', 'cs.IT']"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "['cs.NI', 'cs.DM', 'cs.CC', 'cs.DS', 'cs.LO', 'cs.IT']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.296527\n",
      "         Iterations 8\n",
      "cs.NI\n",
      "Optimization terminated successfully.\n",
      "         Current function value: 0.181881\n",
      "         Iterations 7\n",
      "cs.IT\n",
      "Optimization terminated successfully.\n",
      "         Current function value: 0.379328\n",
      "         Iterations 7\n",
      "cs.DS\n",
      "Optimization terminated successfully.\n",
      "         Current function value: 0.212755\n",
      "         Iterations 8\n",
      "cs.CR\n",
      "Optimization terminated successfully.\n",
      "         Current function value: 0.137508\n",
      "         Iterations 7\n"
     ]
    }
   ],
   "source": [
    "#xs are the indep variables\n",
    "xs = data\n",
    "\n",
    "#Initialie\n",
    "test = DlSpatialMulti(mv_data,xs)\n",
    "test.get_dl_results(min_samples=100,epsilon=10)\n",
    "\n",
    "for cat in ['cs.NI','cs.IT','cs.DS','cs.CR']:\n",
    "    print(cat)\n",
    "    test.get_benchmark_results(cat,min_samples=50,epsilon=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,ax = plt.subplots(figsize=(10,6))\n",
    "test.compare_results(ax=ax)\n",
    "\n",
    "ax.set_title('')\n",
    "ax.set_ylabel('Estimated coefficient',fontsize=12)\n",
    "#ax.set_ylab\n",
    "\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.savefig(fig_path+'/paper_figures/figure_7_poisson_comparison.pdf',bbox_to_inches='tight')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.424372\n",
      "         Iterations 8\n",
      "cs.NE\n",
      "Optimization terminated successfully.\n",
      "         Current function value: 0.102316\n",
      "         Iterations 8\n",
      "cs.AI\n",
      "Optimization terminated successfully.\n",
      "         Current function value: 0.179725\n",
      "         Iterations 8\n",
      "cs.CV\n",
      "Optimization terminated successfully.\n",
      "         Current function value: 0.284978\n",
      "         Iterations 8\n",
      "cs.CL\n",
      "Optimization terminated successfully.\n",
      "         Current function value: 0.166809\n",
      "         Iterations 8\n",
      "stat.ML\n",
      "Optimization terminated successfully.\n",
      "         Current function value: 0.239097\n",
      "         Iterations 8\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#xs are the indep variables\n",
    "xs = data\n",
    "\n",
    "#Initialie\n",
    "test_2 = DlSpatialMulti(mv_data,xs)\n",
    "test_2.get_dl_results(min_samples=50,epsilon=10)\n",
    "\n",
    "for cat in ['cs.NE','cs.AI','cs.CV','cs.CL','stat.ML']:\n",
    "    print(cat)\n",
    "    test_2.get_benchmark_results(cat,min_samples=50,epsilon=10)\n",
    "    \n",
    "fig,ax = plt.subplots(figsize=(15,6))\n",
    "test_2.compare_results(ax=ax)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/Cellar/python3/3.5.2_3/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/ipykernel_launcher.py:1: FutureWarning: Sorting because non-concatenation axis is not aligned. A future version\n",
      "of pandas will change to not sort by default.\n",
      "\n",
      "To accept the future behavior, pass 'sort=False'.\n",
      "\n",
      "To retain the current behavior and silence the warning, pass 'sort=True'.\n",
      "\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    }
   ],
   "source": [
    "comb = pd.concat([cb_totals,arxiv_totals],axis=1).fillna(0)\n",
    "\n",
    "comb.sort_values('arxiv_totals',ascending=False,inplace=True)\n",
    "\n",
    "comb = comb.apply(lambda x: x/x.sum(),axis=0).iloc[:100,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cb_totals</th>\n",
       "      <th>arxiv_totals</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>cb_totals</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.875509</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>arxiv_totals</th>\n",
       "      <td>0.875509</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              cb_totals  arxiv_totals\n",
       "cb_totals      1.000000      0.875509\n",
       "arxiv_totals   0.875509      1.000000"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "comb.corr()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Basic analysis of the situation in China"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [],
   "source": [
    "country_collabs = papers_clust.groupby('arxiv_id')['country'].apply(lambda x: list(x)).reset_index(drop=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [],
   "source": [
    "country_collabs['china_us'] = [('China' in x) & ('United States of America' in x) for x in country_collabs['country']]\n",
    "\n",
    "country_collabs['is_dl'] = [x in papers_expansive for x in country_collabs['arxiv_id']]\n",
    "\n",
    "country_collabs['year'] = [papers_meta.loc[x,'year'] for x in country_collabs['arxiv_id']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 295,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "dl_ct = pd.crosstab(country_collabs['china_us'],country_collabs['is_dl'],margins=1)\n",
    "\n",
    "china_us_shares = dl_ct[True]/dl_ct['All']\n",
    "\n",
    "fig,ax = plt.subplots()\n",
    "\n",
    "(100*china_us_shares[[True,'All']]).plot.bar(color='steelblue',title='Share of DL papers is bigger among US-China collaborations \\n than in the wider corpus of arXiv papers',ax=ax)\n",
    "ax.set_xlabel('')\n",
    "ax.set_ylabel('DL percentage in category')\n",
    "ax.set_xticklabels(['Chinese-US collaborations','All arXiv CS papers'],rotation=45,ha='right')\n",
    "\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.savefig('/Users/jmateosgarcia/Desktop/china_collabs.png')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 291,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/Cellar/python3/3.5.2_3/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/pandas/plotting/_core.py:194: UserWarning: 'colors' is being deprecated. Please use 'color'instead of 'colors'\n",
      "  warnings.warn((\"'colors' is being deprecated. Please use 'color'\"\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "dl_papers_recent = country_collabs.loc[(country_collabs['year']>2010) & (country_collabs['is_dl']==True),:]\n",
    "\n",
    "fig,ax = plt.subplots()\n",
    "pd.crosstab(dl_papers_recent['year'],dl_papers_recent['china_us'],normalize=0).iloc[:,[1,0]].plot.bar(\n",
    "    stacked=True,ax=ax,\n",
    "    colors=['orange','steelblue'],title='Chinese-USA collaborations are \\n gaining importance over time')\n",
    "\n",
    "ax.legend(bbox_to_anchor=(1,1),title='China-US collaborations')\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.savefig('/Users/jmateosgarcia/Desktop/china_collabs_time.png')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 301,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "30652"
      ]
     },
     "execution_count": 301,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(papers_expansive)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>arxiv_categories</th>\n",
       "      <th>arxiv_raw_summary</th>\n",
       "      <th>arxiv_title</th>\n",
       "      <th>citations</th>\n",
       "      <th>year</th>\n",
       "      <th>full_title</th>\n",
       "      <th>journal</th>\n",
       "      <th>is_dl</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>arxiv_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>oai:arXiv.org:0704.0002</th>\n",
       "      <td>[math.CO, cs.CG]</td>\n",
       "      <td>We describe a new algorithm, the $(k,\\ell)$-pe...</td>\n",
       "      <td>[sparsity, certifying, graph, decomposition]</td>\n",
       "      <td>17</td>\n",
       "      <td>2009</td>\n",
       "      <td>Sparsity-certifying Graph Decompositions</td>\n",
       "      <td>Graphs and Combinatorics</td>\n",
       "      <td>not_dl</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>oai:arXiv.org:0704.0047</th>\n",
       "      <td>[cs.NE, cs.AI]</td>\n",
       "      <td>The intelligent acoustic emission locator is d...</td>\n",
       "      <td>[intelligent, location, simultaneously, active...</td>\n",
       "      <td>8</td>\n",
       "      <td>2003</td>\n",
       "      <td>Intelligent location of simultaneously active ...</td>\n",
       "      <td>Aircraft Engineering and Aerospace Technology</td>\n",
       "      <td>dl</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>oai:arXiv.org:0704.0050</th>\n",
       "      <td>[cs.NE, cs.AI]</td>\n",
       "      <td>Part I describes an intelligent acoustic emiss...</td>\n",
       "      <td>[intelligent, location, simultaneously, active...</td>\n",
       "      <td>0</td>\n",
       "      <td>2007</td>\n",
       "      <td>Intelligent location of simultaneously active ...</td>\n",
       "      <td>arXiv preprint arXiv:0704.0050</td>\n",
       "      <td>not_dl</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>oai:arXiv.org:0704.0098</th>\n",
       "      <td>[cs.IT, math.IT]</td>\n",
       "      <td>Sparse Code Division Multiple Access (CDMA), a...</td>\n",
       "      <td>[sparsely, spread, cdma, statistical, mechanic...</td>\n",
       "      <td>24</td>\n",
       "      <td>2007</td>\n",
       "      <td>Sparsely spread CDMA—a statistical mechanics-b...</td>\n",
       "      <td>Journal of Physics A</td>\n",
       "      <td>not_dl</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>oai:arXiv.org:0704.0217</th>\n",
       "      <td>[cs.IT, math.IT]</td>\n",
       "      <td>Given a multiple-input multiple-output (MIMO) ...</td>\n",
       "      <td>[capacity, multiple, antenna, fading, channel,...</td>\n",
       "      <td>154</td>\n",
       "      <td>2009</td>\n",
       "      <td>Capacity of a Multiple-Antenna Fading Channel ...</td>\n",
       "      <td>IEEE Transactions on Information Theory</td>\n",
       "      <td>not_dl</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         arxiv_categories  \\\n",
       "arxiv_id                                    \n",
       "oai:arXiv.org:0704.0002  [math.CO, cs.CG]   \n",
       "oai:arXiv.org:0704.0047    [cs.NE, cs.AI]   \n",
       "oai:arXiv.org:0704.0050    [cs.NE, cs.AI]   \n",
       "oai:arXiv.org:0704.0098  [cs.IT, math.IT]   \n",
       "oai:arXiv.org:0704.0217  [cs.IT, math.IT]   \n",
       "\n",
       "                                                         arxiv_raw_summary  \\\n",
       "arxiv_id                                                                     \n",
       "oai:arXiv.org:0704.0002  We describe a new algorithm, the $(k,\\ell)$-pe...   \n",
       "oai:arXiv.org:0704.0047  The intelligent acoustic emission locator is d...   \n",
       "oai:arXiv.org:0704.0050  Part I describes an intelligent acoustic emiss...   \n",
       "oai:arXiv.org:0704.0098  Sparse Code Division Multiple Access (CDMA), a...   \n",
       "oai:arXiv.org:0704.0217  Given a multiple-input multiple-output (MIMO) ...   \n",
       "\n",
       "                                                               arxiv_title  \\\n",
       "arxiv_id                                                                     \n",
       "oai:arXiv.org:0704.0002       [sparsity, certifying, graph, decomposition]   \n",
       "oai:arXiv.org:0704.0047  [intelligent, location, simultaneously, active...   \n",
       "oai:arXiv.org:0704.0050  [intelligent, location, simultaneously, active...   \n",
       "oai:arXiv.org:0704.0098  [sparsely, spread, cdma, statistical, mechanic...   \n",
       "oai:arXiv.org:0704.0217  [capacity, multiple, antenna, fading, channel,...   \n",
       "\n",
       "                         citations  year  \\\n",
       "arxiv_id                                   \n",
       "oai:arXiv.org:0704.0002         17  2009   \n",
       "oai:arXiv.org:0704.0047          8  2003   \n",
       "oai:arXiv.org:0704.0050          0  2007   \n",
       "oai:arXiv.org:0704.0098         24  2007   \n",
       "oai:arXiv.org:0704.0217        154  2009   \n",
       "\n",
       "                                                                full_title  \\\n",
       "arxiv_id                                                                     \n",
       "oai:arXiv.org:0704.0002           Sparsity-certifying Graph Decompositions   \n",
       "oai:arXiv.org:0704.0047  Intelligent location of simultaneously active ...   \n",
       "oai:arXiv.org:0704.0050  Intelligent location of simultaneously active ...   \n",
       "oai:arXiv.org:0704.0098  Sparsely spread CDMA—a statistical mechanics-b...   \n",
       "oai:arXiv.org:0704.0217  Capacity of a Multiple-Antenna Fading Channel ...   \n",
       "\n",
       "                                                               journal   is_dl  \n",
       "arxiv_id                                                                        \n",
       "oai:arXiv.org:0704.0002                       Graphs and Combinatorics  not_dl  \n",
       "oai:arXiv.org:0704.0047  Aircraft Engineering and Aerospace Technology      dl  \n",
       "oai:arXiv.org:0704.0050                 arXiv preprint arXiv:0704.0050  not_dl  \n",
       "oai:arXiv.org:0704.0098                           Journal of Physics A  not_dl  \n",
       "oai:arXiv.org:0704.0217        IEEE Transactions on Information Theory  not_dl  "
      ]
     },
     "execution_count": 300,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 299,
   "metadata": {},
   "outputs": [],
   "source": [
    "import rarfile"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "with rarfile."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
